%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: goodSky.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Thorpe, James I. (GSFC-6630)
%%CreationDate: 2/1/19
%%BoundingBox: 0 0 379 258
%%HiResBoundingBox: 0 0 379 258
%%CropBox: 0 0 379 258
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 15122 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDB4FFA8FFA8A87DA8FD0D7DA87DA8A8AFA8FD60FFA8FFA8A87DA1%FD057DA77DA8A8A8A7CAA8A8A8CAA8A8A7A8A1A7FD077DA8A8FD56FFA8A8%FD047D7CA1A1A8A7CFCAFFA8FFCAFFCACFCAFFCAFFCAFFCAFFCACFCAFFCA%FFCAFFCACAA1A87D7D7CFD047DFFA9FD0BFFA8FD40FFA8A87D7D7DA8A8CF%CAFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCAFFCFFFCFFFCACFA8A87D7D7DA8A8FD07FF7DA87DA87DA8FD39FFA8%A17D7D7DCACAFFCAFFCACFCAFFCACFA8FFCAFFCAFFCACFCAFFCACFCAFFCA%FFCAFFCAFFCACFCACFCAFFCACFA8FFCAFFCAFFCACFCAFFCAA8FD047DA8FF%FFFFA852527D52A8A8FD36FFA8A87DA1A7FFFFFFCAFFCAFFCAFFCFFFCAFF%CAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCFCFA77D7DA8A8FFFD047DFD35FFA8A8527D%A1CFCFFFCAFFA8CAA8FFCACFA8FFA8CAA8FFCACFA8FFCACFA8FFCACFA8FF%CACFA8FFCACFA8FFCACFA8CFCACFA8FFCACFA8CFCACFA8FFCACFA8CFA8CF%CAFFCFCF7D7D76A8A8FD36FF7D7DA1CFCFFFCFFFCAFFA8FFCAFFCAFFCAFF%CACFCAFFCFFFCAFFCAFFA8FFCFFFCAFFCAFFCAFFCAFFCAFFCFFFCAFFA8FF%CAFFCFFFCAFFCACFA8FFCFFFCAFFCAFFA8FFCFFFCAFFFFCA7D7D7DFD32FF%A87D7CA8CAFFCFFFCAFFCACFA8FFCAFFCAFFCAFFCACFCAFFCAFFCAFFCAFF%CACFCAFFCAFFCAFFCACFA8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACF%CAFFCAFFCAFFCAFFA8CFCAFFCAFFCFFFCAA8527DA8FD2EFF7D7DA7FFFFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFCAFFCFFF%CAFFCFFFCAFFCAFFCAFFCFFFCFFFA77D7DFD2BFF7D52A8CFFFCAFFCACFCA%FFA8CFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCA%CFCAFFA8CFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACACAFFCACFCA%FFCACFCACFA8CFCAFFCACFCAFFCAA152A8FD27FFA87D7DFFFFFFCFFFCFFF%CFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCAFFCFFF%CFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFFFFF7D7DFD25FF7D7DA8FFCAFFCA%CFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCA%FFCACFCAFFCACFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA%FFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFA77C84FD22FF7D%7DCFFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCF7D7DFFFFFF7DA87D7D7DA8FD17FF52A7CFCFCAFFCACFCAFFCACFA8CF%CACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACF%CAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FF%CACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCF7D52FFFFA8277D527D%A8FD16FF52CAFFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFF%CFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFF%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF%CAFFCFFFCFFFCFFFCFFFFFA87DFF7DA87D7DFD17FF52A8CFFFCACFCAFFCA%CFCAFFA8CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFA8%FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCA%CFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCACFCF%A752FD1AFF52A8CFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA%FFCAFFCAFFCAFFCAFFCAFFCAFFCACFCAFFCAFFCAFFCAFFCAFFCACFCAFFCA%FFCAFFCAFFCAFFCACFA8FFCAFFCAFFCAFFCAFFCAFFA8FFCAFFCAFFCAFFCA%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCFA77DFD18FF7DA1CFFFCACFCAFFCA%CFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCA%CFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA%CFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCA%FFCACFCF7D7DFD16FFA87DFFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCF%FFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCF7DA8FD15FF7D%A8FFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFCACFA8FFCACF%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCACFCAFF%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFA8FFCACFCAFFCACFCAFFCACF%CAFFCAFFCAFFCACFCAFFCACFCAFFA77DFD14FFA87DFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFF7DA9FD13FF52CACAFFCACFCAFFCACFCAFFCACFA8FFCACFCA%FFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCA%CFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCACFCA%FFCACFCAFFCACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCAA87D%FD12FFA87DFFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCF%FFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFFF7DA8FD11FFA1A7FF%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFF%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACF%CAFFCACFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF%CACFCACFCACFCAFFCACFCAFFCACFCAFF7DA8A87DA87DFD0DFF7DCFCFFFCA%FFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCFFFCAFFCFFFCFCA7DA8527D7DFD0CFFA87DCAFFCACFCA%FFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCA%CFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA%FFCACFA8FFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCACFCAFFCA%CFA8FFCACFCAFFCACFC9CFCAFFA7A77D52A8FD0EFF7DFFCFFFCAFFCFFFCA%FFCFFFCFFFCAFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFCFC2C9C2CACAFF7DFD10FFA87DCAFFA8CFA8FFCACFA8FFCAFFA8%A8CFCFA8FFA8CFA8FFCACFA8FFA1CACAFFCACFA8FFCACFA8FFCAFF7DCACA%CFA8FFCACFA8FFCACFA8CFA1FFA8FFA8CFA8FFCACFA8CFCACA7DFFCACFA8%CFCACFA8FFA8CFCAA8A7FFA8FFCACFA8FFCACFA8FFCAA7A8FFA8CFA8CFC2%BB8DB6BBC9A77DFD11FF7DFFCAFFCFFFCAFFCFFFCFCF76CA52A752A8CFFF%CFFFCAFFCFFFA17CA77DA7FFCFFFCAFFCFFFCAFFCA7C7D7DCFFFCAFFCFFF%CAFFCFFFA152CAFFCAFFCFFFCAFFCFFFCFCA7D7C76FFCFFFCAFFCFFFCAFF%CAFD047DFFCFFFCFFFCAFFCFCA52CF52A152A8FFFFC9BB8D6969B5C1C97D%FD10FFA87DA8FFCAFFCACFCAFFCAA8A77DA87D517D7CFFCAFFCACFCAFFA7%7D2752527DCFFFCACFCAFFCACFA15227A151CACACFCAFFCACFCAFFCF7D52%A1CFCFCAFFCACFCAFFCAFF27527D52A8FFCACFCAFFCACFCACA4B4B527CA8%FFCAFFCACFCAFFCA76A87D527D76FFCAC8B58D20698DBBA07DFD11FF7DCA%CFFFCFFFCFFFCFFFA8CF52A876A77D7DCFFFCFFFCFFFCFCFA17DA176A1FF%CFFFCFFFCFFFCACA7D76A17DA8FFCFFFCFFFCFFFCFFFA176A8FFCFFFCFFF%CFFFCFFFCAA152A852CFCFFFCFFFCFFFCFFFCF7D7CA176FFCFFFCFFFCFFF%CFFF52A876A77D7DFFCFC2BBB08E8DB6C1A07DFD11FFA87DFFCAFFCACFCA%FFCAFFCACFA8A8CACACAFFCAFFCACFCAFFCFCFA8FFCAFFCAFFCACFCAFFCA%CFCAFFCACAA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCAFFCF%FFA8CFCAFFCACFCAFFCACFCAFFA8CFA8FFCACFCAFFCACFCAFFCACAA8FD04%CAFFC9C9BBBBB5B0B5C876A8FD11FFA87DCFFFCAFFCFFFCAFFCFFFCFFFCF%FFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCAFFCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFC9C2BB%C2BBC2C27DFD13FF7DA8CFCFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFF%CACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACF%CAFFA8CFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8CF%CACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCACAC9C9A0C8C9A17DFD14FF%7DFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFF%CFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF%CFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF%CFFFCFFFCFFFCFFFCFFFCACFC9CFCACF76FD15FF7D7DFFCAFFCACFCAFFCA%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCA%FFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCA%CFCAFFCACFCAFFCAFFA8FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCA%CFCACFCAFF7CA8FD16FF7DCAFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFA8FFCFFFCAFFCFFFCAFFCFFFA77DFD17FFA87C%CAFFA8FFCACFA8FFCACFCACFA8CFA8FFCACFA8FFCACFA8FFA8CFA8FFCACF%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FF%CACFA8CFCACFA8FFCACFA8FFCACFA8CFA8CFA8FFCACFA8FFCACFA8FFA8CF%A8FFCACFA8FFCACFA8FFA876A8FFFFFFA8FFA8FD12FFA87DCFFFCAFFCAFF%CAFFCAFFCFCFCAFFCAFFCAFFCFFFCAFFCAFFA8FFCAFFCAFFCAFFCAFFCAFF%A8FFCAFFCAFFCAFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCAFFCAFFCAFFCAFF%CAFFCAFFCFFFCAFFCAFFCAFFCAFFCAFFCFFFCAFFCAFFCAFFCAFFCAFFCAFF%CAFFCA7DA8FFFD067DFD13FF7D7DCAFFCAFFCAFFCAFFCAFFCACFCAFFCAFF%CAFFCAFFCAFFCACFCAFFCAFFCAFFCAFFCAFFCACFA8FFCAFFCAFFCAFFCAFF%CACFA8FFCAFFCAFFCAFFCAFFCAFFA8FFCAFFCAFFCAFFCAFFCAFFA8FFCAFF%CAFFCAFFCAFFCAFFCACFCAFFCAFFCAFFCAFFCAFFCA7CA8FF7DA8277D52A8%A8FD14FF7D7DCFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCA7DA8FFFFFF7DA87D7DFD17FF7D76A8FFCACFCA%FFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFA8%CFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCA%FFCACFCACFA8CFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCAFFA17CA8%FD20FFA87DA7FFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFFCF%FFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFFFFF7D7DFD23FFAF7D7CCFCFFFCACFCAFFCAFFA8CFCAFFCAFFCACF%CAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFF%CACFCAFFCACFCACFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACF%A8FFCACFCAFFCAFFCFCA527DFD26FFA876A7CFFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFF%CAFFCAFFCAFFCFFFCAFFCFA152FD2AFF7D7DA1FFCFCFCAFFCACFA8CFCACF%CAFFCACFCAFFCACAA8FFCACFCAFFCACFCACFA8CFCAFFCACFCAFFCACFA8FF%CACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFA8CF%A8FFCACFCAFFCFFF7D7D7DFD2CFFA8A87DCACFFFCFFFCFFFCFFFCAFFCFFF%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFA876A8FD31FF7D7DA1FFCFFFCAFFCACFA8FFCACFCAFFCACFCACFCA%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCACFCACFCA%FFCACFCAFFA8CFCAFFCACFCAFFCACFA8FFCACFCAFFCFCF7D7D7DFD34FFA8%A852A1A8FFCFFFCAFFA8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA%FFCAFFCAFFCACFCAFFCAFFCAFFCFCFA8FFCAFFCAFFCFFFA8FFCAFFCAFFCF%FFA8FFCAFFCAFFCFFFA77D7DA8A8FD38FF7D7D7CA7A7FFCFFFCACFA8CFCA%FFCACFCACFA8CFCAFFCACFCAFFA8CFCAFFCACFCAFFA8CFCAFFCACFCAFFA8%CFCAFFCACFCAFFA8CFCAFFCACFCAFFA8CFCAFFCFFFA7A1767DA8FF52A852%7D527DFD37FF7D7D7DA7A8FFFFFFCAFFCAFFCFFFCFFFCAFFCFFFCFFFCFFF%CAFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCAFFCFFFCFFFCAFF%CFFFFFFFA8A77C7DA8FFFFFF7D52527D7DA8FD3BFF7D7D7C7DA1CAA8FFCA%CFCAFFCAFFA8CFCACFCAFFCACFA8FFCACFCAFFCAFFCAFFCAFFA8FFCAFFCA%FFCACFA8FFCAFFCAFFCAFFA8CA7D7D767DA8FD05FFA8FF7DA87DA8FD3FFF%A8A87D7D7DA7A8CAA8FFCFFFCFFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CAFFCFFFCFFFCAFFCFFFCFFFA8CAA1A77D7D7DA8A8FD50FFAFA8A8A87D7D%767D7DA1A1A8A7A8A8CFCAFFA8FFCFFFCAFFCFFFCAFFCACAA8A8A1A87DA7%7C7D7C7D7D7DA8FD5CFFA8FFA8A87DA17DA17D7D7DA17D7D7DA77D7D7DA1%FD057DA77DA8A8FFA8FD68FFAFFFA8FFA8FFA8AFA8FFA8FFA8FFA8FDFCFF%FDFCFFFDCDFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD16FF7DA7A1A7A1A7%A0A1A0A1FD06A099A099A099A09999999AFD0699939993999399FD079394%93938D948D948D948D946994699469946994699469706994697069706970%6970696F4570456F456F456F456F454B444B444B204B204B204B204B204B%A8FD15FFA8A8CFCACAFD04C9C2C9C2C8C2C2C1C2C1C2BBC1BBC1FD08BBB5%BBB5BBFD08B5B0B5B0B5FD06B08DB18DB08DB18DB08DB18D8E8D8E8D8E8D%8E8D8D698E698D698DFD0669686968694469FD0644204420442044202020%A8FD15FFA8CACACFC9CAFD04C9C2C9C2C8FD04C2C1C2C1C2BBC2FD0ABBB5%BBB5BBB5BBB5B5B5B6B5B5B0B6B0B6B0B6B0B68DB68DB68DB68DB68DB68D%948D948D948D948D8E6994698E69946969696FFD066944694469FD044420%4420442044204BA8FD15FFA8A7CFC9CAC9C9C3C9C2C9C2C8C2C2C1C2C1C2%BBC2BBC1FD08BBB5BBB5BBB5BBFD06B5B0B5B0B5FD04B08DB08DB08DB18D%B08DB18D8E8D8E8D8E8D8E8D8E698E698D698EFD0A69446944694469FD04%4420442044FD0520A8FD15FFA8CAA7CAC9C9A1C9C2C9A0C2C2C29FC2BBC1%99C1FD06BB92BBB4BB92BBB4B592B5B4B592B5B5B58CB5B0B08DB0B0B08D%B08DB08DB0FD0C8D698D698D698D698DFD06696869686944694445444544%44204420442044FD0620A1FD15FF7D7DA87DA8A1A77DA7A1A77DA7A1A17D%A7A1A17DA17C76FD04A17CA1A0A17CA1A0A17CA1A0A176A19BA17676A1A1%76A19BA176A177A176A177A176A177A177A14C7777A177A177A177A176A1%777D76A1777D76A1767D4B77767D767D767D767D767D767D767D527D76A8%FD15FFA8FD15FFA8FD15FFA8FD4EFFA8FFFFFFA8FFFFA8A8FFA8FD0BFFA8%FFFFFFA8FFFFA8A8FF7DA8FD09FFA8A8FFFFFFA8FFA8A8FFFFA8FD0AFFA8%A8FFFFFFA8FFA8A8FFA8A8FD09FFA8A8FFFFFFA8A8FF7DFFFFA8A8FD1CFF%7D527DFFA85252A8527D7D7D52FD09FF5252A8FF7D527DA8527D7D52A8FD%08FFA85252FFFF7D527DA852FF52527DFD08FFA8527DFFFF5252A87D52FF%277DFD09FF7D52A8FFFF5252A87D52A85252A8FD1AFFA852A852FF7DA87D%27A87D27A87D7DFD07FFFD047DFF52A87D27A852A8527DFD08FF52A852A8%FF52A852FF7DA852A852FD08FF52A852FFA87DA87DFF52FF7D52A8FD08FF%52FF52FF52A87DA8A87D52A87DA8FD1BFF527D52FF7D7D527D527D527D52%FD09FF527D7DFF7D7D527D5252A8A852FD08FFA8527DA8A8527D7DA827FF%527D52FD08FF7D5252A8A8527D7DA827FFA87D7DFD08FF52527DA87D527D%A8277DA85252A8FD1BFFA852FF7DFF7DA8FF7D7DFF7DA8FD09FFA87DFF7D%FF7DA8A87DA8A852A8FD09FF7D7DFFA8FF52FF7D527DFF52FD09FFA87DFD%04A87DFF7D52A87D7DFD09FFA87DA8A8A87D7DFF527DA87D7DFDFCFFFDCB%FF7DFD05FFA8A8FD04FFA8A8FFFFA8A8A8FD07FF7DFFA8FFA8FF7DA8FD5D%FF527D52A87DA87DFF27A8FFA8A8FF52A8A87D7DA8527DA8FFA8FFA87DA8%527D7DFFA852FD5DFF52527D277D527D5252527D7D277D5252FD057D527D%7D52A8FF7DFF525252A87D7DFD5DFF52A8FF7DFF7D7D7D527D527D277D52%7D52FD057DFF277DFFA87DFFA8525252A852FD5DFFA8FFFF7DFF7D7DA87D%7DFF7D7DA87D7DFFA8A8A8FF7DA827FFFFA827FFA8FF7DA8527DFD73FFA8%A8FDFCFFFDBCFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2019-02-01T11:26:38-05:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>176</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUFquuaLpEPr6tqFtp8B6S3U0cKf8FIVGKpQ35g+XHH+hG71IEVR7GyuriFvlcJGYPvkwGQ&#xA;TwlSPnPVpfhtPLN8TWiyXEtlHH8z6U9xKv0x5HjDLgKmdf8APbsEGjabb8twz6jNK4A8Y0sx/wAT&#xA;weIE+GVpu/zFdeRm0izHUlre5uNz0UATwV+f/C4PEXw1yf8AKxmNTqukotNgdLuSa/RqNMfFT4Tq&#xA;/mKY1dNW0ckgEj9GXPTvQ/pDHxV8NaJ/zGVjS90i4p1j+pXMDCvepu5h/n1x8RfDcNc/MCIhX0rS&#xA;rgkhQfr1xbb99mtJwfobD4gR4ZVV83eYoSFvPK9w7dOVjc2syVH+VcvZbde39h8QI4CqL+YOjotb&#xA;6z1KwOxJlsbiWMA9zNbJPCB/s8PEEcJTHSvNfljV5TDperWd7Ov24IJ45JFp15IrFl+kZJimuKux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpLq/nHy9pVz9TuLr1tSK8l0y1R7q7IIqG+rwh5&#xA;Av8AlMAvicBNJAS9tc86agxGn6VBpFuel1qkgnn+Ys7RuBB97lT/AJOQOQMxjKhJ5dvLj4ta17UL&#xA;3kdra2k+oQg+CCzEU7D2eV8gchLMYwETpvlfQdOmabTtMtbOdtnuliQ3D+7yU5sfdmOQJZAJmyRK&#xA;OUnxdN233HSg6fcMUuAkc7/AnZR9o/M9sCrgqRrsAqjc/wBTiq1FLESP/sF/l9/n/n81VTFVkFPQ&#xA;jp04jtTt4YlQ6SMtRlPGRfst/A+xxVtSJE+JeuzKd9x1GKrfTdKmM/7BjtX2PbFWlEMlTQq42Ybq&#xA;w+dMKoPVNC0vVIxFqdjbalCu4ju4o5aEbgjkpH4YgrSXR+U7a2YHR9T1HRpKbQw3BmhA8FtrsXNu&#xA;o/4xoPnkhMhgYAq6Xvn3Tv72Oy163FKmLlp90FHgrm4glb/ZRDJjKxONKfOPmaLXPLV3oVpc3Hlz&#xA;zDemKO3t78CzlkpMjSw29w3qWsryRKyD03cb77ZYJAtZBCTaD+XXm439tFq59Cxa2e3uJ7a448LO&#xA;S0kg+pLCgEYcTOk5dV4cgQNqDCh6lpmnw6dptrp8DO0NpEkEbSHk5WNQoLHuaDFUTirsVdirsVdi&#xA;rsVdirsVdirsVSTW/Num6XcrYIkuo6xIoeLSrNRJOVNQHkqVjhjND8crKvYGu2AkBIFpS+neaNa5&#xA;HW7/APRti3TStJkeNyvhNffBMT/xhEVOlWGVSydzaMfemWm6Doul25t9OsYLWEks6xRqvJj1ZiBV&#xA;mPcnc5XZbKV+EchIjROIO8hAI5e3jTxxVtLS3Tf01LGoLkAk16/7WNrS544FUlo1pttxG57YqtS2&#xA;jL+o8a896Cg+EHr9J742tL/QgpT01p06DBa0seGJpFXgNvjc0H0b4VX+hBSnprTp0GC1p3ow1rwW&#xA;vjQdsbVZDBCIU/dr9kE7DrSmElQF/oQ9PTWnToOhwWtKZhhSUN6Y4yUDbClR0J/VhtVT0Yf5F2rT&#xA;Yd+uC1WPaQMNkVWHRgo6DsfbDa03GkTbGNQ6n4hQdfEYq21rbMvExIR4cRgtaWeisZqUDoN60qwp&#xA;+un34VW3On6de2r29zbQ3NrMpEkMiLJG6nqCrAqQcbWkmj8sX+kkP5W1FrCFan9EXIa609q70RGY&#xA;S2/+SIXCDrwbJjIQwOMFHad51iF1DpvmC1OiapMwSASOJLO4cmgW2ugEV2PaN1ST/IpvlokC1GJD&#xA;JckxdirsVdirsVdirsVdiriQBU7AdTirDZ9f1XzM7W/lub6logPGfzGArPN4ppyOGRh43Dgp/Ir/&#xA;AGlrlOmcYWmej6HpmkWzQWEPpiRjJPKxaSWWQ9ZJpXLSSOe7OScpJtvApHYFUt5SR0jG3+t/ZhVV&#xA;AAFBsB0GBXYqpqPUf1Duo/u/1FsKqmBXYqpxb8n3+I7V8BsKfrxVUxV2KrIKehHTpxHT5YlQvxVb&#xA;IpZCB9rqvzG4/HFW0YMisAQGFaHrvireKrJENRIv217eI8Diq5WDKGG4IqD88VbxVTZWRi6bqd3T&#xA;+IwqvVgyhgagioPtgVRvrCxv7SWzvreO6tJ14TW8yLJG6+DIwIIxVIYzrnlMhrb19a8tA/vLNi01&#xA;/ZL/ADQOxL3MS94mrIB9hm+GPLo5O9qlj7mQz6/bP5dbXdKMeo2ph+swMklEki6lg4VzstTQKT2p&#xA;XLWpidj+cFnqENpLZaPdzreW6vCFMRY3b2Ut+loEVmcsYLdjyC9aClTTFWcaZdy3mm2l5NbyWctz&#xA;DHNJaTbSRNIgYxv/AJSE0OKonFXYq7FXYqwjVZp/N97caZAxTyrZSNBqcgJQ6hPGaSWqMN/q0bDj&#xA;MR9tqp9lXDVznWzZCF7shjRo41jjiRI0UKiKaBQBSgAXoO2UNy6s1fsrT/WP/NOKqcjTu3pBVAIq&#xA;5DEGnh9nvhVUHqjYIoA2HxHp/wADgV1Zv5V7/tHr2/ZxVZKZyvAKoLniDyPTv+z4YVXj1RQBFCjY&#xA;UY9O23HArqz0+wtf9Y/804q1I86qxCKaVp8RHy/Zwq5BKiBQi0UUHxE9P9jirdZq/ZWn+sf+acCu&#xA;rN/Kv/BH6P2cVWQmf0kqq1oOrGvTv8OFV9Zv5Vr/AKx6/wDA4FdWb+Vfb4j/AM04qsiMwDLwXZm/&#xA;bJ6/EP2ffCq+s9PsLX/WP/NOBXVl/lX/AII9PuxVTQzqzLwT4quo5Hr3H2fHfCqpWX+Vaf6x/pgV&#xA;1Zv5Vr/rH/mnFVKssUn2VCSHccjQOf8AY9/1/PCqrWb+Vev8x6f8DgV1Zv5V6fzHr/wOKsR17SDp&#xA;El5qltFM+iXriXzDpdnLNFJVWDG/tfq/CVZ04j1UjYeqvi4Aa2E+jXOHVkejeU/J0Eljq2k2cFY7&#xA;aOOwuoWLoYOBEbr8RVjwkYCTdqMd6E5c0p/irsVdirsVY7511G7js7bSNOmaDVNblNrBOn24IQpe&#xA;5uR4GOIHgf8AfhQHrkZGgmIsonTtOstNsLfT7KIQWdrGsMES9FRBQDMZyURiriQASTQDqcVWQg8O&#xA;RFGc8jT36fhiVX4q7FVMUacnb4FoPGrbn9QxVUxV2KrJtwq7EllpX2PL+GKr8VdirsVWQU9COnTi&#xA;OnyxKhfirsVWLQTOABuFY+NTUfwxVfirsVU5dij7VVgPob4f44qqYq7FWnUOhU9CKYq1GxZATTlu&#xA;Gp0qDQ0+nFV2KuxVIvK5Gia9deWSaWF0j6loa/yJzAvLYf5MUsqyJ/kycQKJmRjlYaJxosuybB2K&#xA;uxV2KsTAF55+v7hviTSrGCzt61+GS7dp7n2+JIrb7spyltxBO8qbXYqsn/uyKgciF3FftED+OIUr&#xA;8VdirsVWRbmRuxY9qdAF/hiq/FXYqskPxR9d27f6p64qvxV2KuxVZD/dJXrxHanbwxVfirsVWE/v&#xA;gN91Py2I/riq/FXYqsn/ALmQ+Ck1Aqdh4YhSvxV2KuxVYm0ki7bkNQCmxFP1riq/FVrSxqaMwByJ&#xA;kAyESUi82H6sdG1dKepp2qWoJOw9K9k+oS1P8qpdc/moy3Gd2rINkl0rzh5713Vdc0zSX05bmwuG&#xA;AWeKYC0SK+ntxDcMruXlnt4EnWirsx/ZZGzIaHpWKuxV2KsS0pSvmjzREWKu93bXC0A/u3sIIV6j&#xA;+e3f2ynLzbsfJOfTen963bf4f6ZU2LJnjgieae49KGMFpJHKKqqO5JGwGKsQ1fzneJHrMVpbP6mi&#xA;/ULkzPLB6dxa3EzFpEYBwtY4XpXfptkgGJK/yt+YUPmHVorKO0ns4brT4NTs5rgorSxzwwzcY040&#xA;b0xchXKsaMKdxiRSQbZf6b0/vW+dF/pkUpd5g1yx0LSrrUr2ZiltBLcC3TgZpRBGZGjhQ05uwXYY&#xA;QpYX5d/Ni0vktkMUtwZL2S3vbm2ktZYLb6xqBs7MeojUlDu6LWOu1SfDJGLESei+m3+/G/4X+mQZ&#xA;O4Nt+8brX9n7umKsG8wfmRp9rr9hpWlyNqk31a71C5+qmKRWjt7aYxwIyhuU0sifCq9Au/VayAYk&#xA;sj8ra4Nf0SDVFBgMrSJJbhlcxvFI0bIx4KQ1U+JSAQdsB2SE29N/9+N/wv8ATAlB6zqNvpGj32rX&#xA;ckn1TT7eW6uOAQt6cCGR6AgCvFfHCFKXeS9Xu9W0NGvUltdTs2FrqVvJ6RK3EaKWo0dVKsGDinjh&#xA;KAnvpv8A78b/AIX+mRS703/343/C/wBMVebah+bUKXMl7YW8l3pFjdy6bdT8kVTyiWZb0sqPwtk9&#xA;GVObUB+FvsmuT4WPE9JCMRtK242Pw/0yDJ3Bv9+N/wAL/TFWI+ffPdn5WNlaXJk9XVBIkFwXhjVG&#xA;EkMC/b4l253StwQE8A7U+GhlEWxkaRPkvzfH5iilT05reaCGC4Bk9IrNb3HNYp04cqLI0EnwmhGJ&#xA;FJBtkvpv/vxv+F/pkUpR5s12Ty9oN1rHoS3sdovqTRRtEjBF3Z6vQbeA38MI3QdmN65+YN3o/mXV&#xA;9PewuLv6rYQXlpDblHaRfrKwSsQiNItPrSGlG2RjttUgbIJ3ZLba1Fd+XbXWIpQY7u3jnQRskq/v&#xA;FDUDqtGpWlcoz5OCJLfgx8cgHzz5y/ODXrTX/QhVljYstDUjYA9uNMw9NpBliJyO8u7o97HQYMMY&#xA;xkDLi6/gF6Rp/nOTX/KkKMD6st1YRAAiheW/ijUbgU+IgdcnpM0hk8OXMPN9u9ljTkkHZ7Rm5eXd&#xA;irsVdirEtYV9N882N+TSz1u1OmzNtRbm0Z7m1H+zjluAT4hR3yrKGzGU8yluadEkQo6h0YUZWFQR&#xA;7g4qkd35M0Ka4vrsJcR3V+kcc7w3l3BVYDWJVEUqCMIa04AdT4mptFKml+VPL2n3UN9Y2xjkhtlt&#xA;bVfVleKGAKi8IYWdooqrEnIooLU3riSkBOcCqVzaW9zGY5k5AgqGBKuvIUJR1IZDTupBxVI4PI3l&#xA;SO5tJRYKZ9Ncy2srSSu/KRhIXlZnJmYygvyk5fF8XXfDZRTIcCXYqkWoeTPKt3f2+oTaZAL+FZIY&#xA;r2JPSnRJo2jYLLFwdTRtiDVe1MIJQQmOk6Rp+kWS2VhGY4AzyHk7yuzyMXd3kkLu7MzElmYnASmk&#xA;ZiqndWtvd201rcxrNbXCNFNE4qro44srA9QQaYqg9B0XTNG02Oz06H0YKmRqs7szvuzs8hZ2JPdj&#xA;hJUBMMCuxVjMv5d+SpDeQppUdtFe8Wv4rQyWiXA4snCYW7RCRCpIZGqpruN8lZRQZMAAAAKAbADI&#xA;pdiqW61omm6mtub6NphbSLJDGZJViMgZSjSRIypLwZQy8waEVG+EFSHaP5b0TRmuW0y1Fu14/qT0&#xA;Z2qRUhVDFuCLyNEWiipoN8SVATLAqC1rRdO1rTZtM1GNpbK4HGeJJJISy1rxLRMjUPcV3xBUhK08&#xA;laA81xcst0bidDALj69e+qkQeNmWKT1ucXN4EZ/TK8qDlXDaKRU+k2dnpEOm2MS29pbRiKCFeioo&#xA;oB4/xzF1UeKLlaWXDJ4n5i/K2e8vPWWMCUtUMOVSPlmr0+qy4Rw8w99p+18RA496Zp5U8qG31nQ9&#xA;F4fBbN+lb8AtRYrbktureBe5dHXxEbeGZ/ZuCXEckuZeR7e7R8eWz2DNy847FXYq7FUt8xaJDrek&#xA;T6fJI0Dvxkt7pAC8M8TCSGZK7co5FVhXrSh2xIUFKPLWtzajbS21/GttrenOLfVbRa0WUCokjru0&#xA;My/HE38poaMGAxpRouTGVhOMil2Kqcfws0ZFB9pKeB/ocVVMVdiqxvhlVq7MOJ+Y3G/34qvxV2Kr&#xA;Jq8KiuxDGngCCcVX4q7FXYqsh/uU2I+EbHr0xKr8VdiqxKmSQ77UUeGwrX/hsVX4q7FVjHlKqA/Z&#xA;+Nh+A/z9sVX4q7FVkrELRd3Y0X+v0YquVQqhVFAooB7DFWnQMKYCLSDSVatNpukWE2o3p4wQgfZX&#xA;nIzsQqRxqPiZ5HYKqjckgZSNOLbTnNK3kzRb6ztrjU9VUJrWrOs13EGDi3iQEQWisNiIVJ5EbGRn&#xA;YfazYQiIinBnLiNsiyTF2KuxV2KuxVjvmnyxPfTRavpEiW3mCzQpC8tfQuYSeTWtyACTGx3VgOUb&#xA;fEtRyVhIWkGlHQ9ZsNVWaFrc2eqWfFNR0ucL69uxFVrxqrI1DwkQlW7HrmOQQ5AIKaejDWvBa9eg&#xA;75G0rZLWFgKIoZfsniDT2p4e2G1pyJC4J9NQ1fjFB9qmKrvQh/32vcdB0PXBa0te2iZSAiqTuG4j&#xA;qOhw2tOjSF1DcF5bhthse+KrvQgpT01p06DBa001vAwIManl12HfbG1pbFFEYlrGlaUagFKjqPvw&#xA;qv8ARhrXgtfGg7YLV3oQj/da/cO/XG1pZBBCIY/gT7KnYCnSmElQF/oQ9PTWnToOhwWtO9CH/fa7&#xA;9dh2xtaWQQQ+mG9NPiJfYD9o1/VhJUBf6EFKemtOnQYLWnGOBRyKqAu5JAFPfFVkVvFxJaNfj/Z4&#xA;gUXwp+vDa0v9GLrwWvyHbBatNFbqpLIoUVrsO+KrY7eMsZGjAJFFWg2UdsNrS/0Yf5F616DrgtUH&#xA;q2o6RpNk15qDpBbqVjB48md3NEjjRQWd3Y0VFBJPQYRZU0Eu0XQNR1bUIvMOu262noAvomiuFc2z&#xA;MtPrN0Rs1yVPEKp4xqSASSWy+MaceUrY/wCcfIXm/WdYS6tfqsV2un3VveajHS0ju2mgZIo6J613&#xA;GAxCtymZAPiVedKTYp/5K8ixaatpqV/D6Gq2/wBcitraKZpIbe0ubuW4htlqFB9KOQLt8O1BUKlF&#xA;WZYq7FXYq7FXYqk3mDytYaw0NzzkstWtAfqOq2xCzxct2XcMskbU+KOQFD1pUAgEWkGkkfzFqGhE&#xA;Q+bYUt7cbJ5gtw36Pf3n5Fms2/4yEx+EhO2Uyxkcm6OS2RI6uodCGRgCrA1BB6EHK2a10JPJDRx9&#xA;xHgcVdHIGqCOLr9pT/nuMVX4qpv+7b1B9k/3n/NX0YVVMCuxVYnwyMnY/Gv6j+O/04qvxV2KrIa+&#xA;ilevEddu2JVfiqyapTgKVc8d/Dv+GIVfirsVUzSVqDdFPxHxYdvo74VVMCtM6qKn6B3PyxVYqs7c&#xA;pBQD7CeHuffFVTFUhu/NQlu5dM8v236a1aI8J0jfha2zf8vV1R1jI/kUNJ4JTfJxgSxlMBGaL5Ra&#xA;G+TWNcuRqmuID6EnHhbWgYcWWzgJf06qaNIxMjdC3Gii6MQGkyJZHkmLsVdirsVdirsVdirsVdir&#xA;iAwIIqDsQehGKsXuPI62jNP5XvDocrHkbMRifTnNanlaFk4V7mB4yTuSciYAshIhCS+YPMGlll17&#xA;RZEgX/pZ6aXvbYjxaNEF1H71iKr/ADnKjjLYMiY6fq+m6vAbjTLq3vYkbiZbeYScT3BKA8W8VOQ5&#xA;M+aK53KAc0VxvVwTX2qAv30xSvWSRhVAjD/WP0/s4FWfv4qlUDR7/CGNR8hT8MKr1eVlDKqEH/KP&#xA;/NOBWpBNswRSyGo+LcjuOnfCravKyhlVSCP5j/zTgVus1fsrT/WP/NOKrIDN6KfCv2R0Ynan+rhK&#xA;hfWb+Va/6x6/8DgVTQyuxk4LQfCnxHpXc9O9MKqnKUblVA3r8R/5pwKpF55RRFULtVwx38Qpp+P+&#xA;YKqi+oqgBFVRtQMaAD6MCrBNcOv7pEav7RY8f+I7/RhpVlxcQ2UMl5eSxQwxCstxNIERF2qSzAKo&#xA;xVJY/OMmo0Xy1ps2t8/s3qEwWAB6P9blUJIniYBIfbJDGSwOQBIU1rRdXhtbnzP5gkGnX0phtdM0&#xA;63vbWylFVHN7to1nuIFMiqZ1aOA8gGGWiADWZks68qan5WvNOkt/LXorp2mTvYtDbxGGKKWKjOiL&#xA;xRafGDVdjXY5NgnOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpPq3lDy3qtyLy8sIzfqOKajCWt7tV&#xA;/lW6gMc6j2D4kLaXf4U8w2f/AByfMUrx/s22qwJeoo8FkiNpcfTJK+QOMMxkKk8vnS1Ja60OK9A6&#xA;S6VeL6rEd2ivFtEX5es2QOMsvEUv8YW9uKX9jqNkw3cT2Fyyov8AlXFsk9v/AMPkTAshMN2/nbyd&#xA;dTena61ZC6JoYVuIWeoNKNGG5Dw3AOCiysJ1HeROoYEOjAMrxnmCD7Df8MFJtvmFLNGeaV+NVNSD&#xA;4j+mKqqOrqGU1B74FWwkCBCdhxFew6Yqsd+YpXjF+05NK+w/r/mCrmuIlAC0pTYn4V8Buf4Y0tpT&#xA;f+bvKti6rqWs2Vu9eIjmuIohy/56MtcNFFhQHnnSZlrYx3d+CKo1lZXdyjeAEscfoDp1MlMPAUcY&#xA;XrfebLsgWnluRKbibVruC3jPuq2v15/+CjU5IYyxOQKy+X/Od6QdQ12LT4jv6Ok2y+qD4G4vDcqw&#xA;+UCHJDGGJyFFWXkHyvb3CXc9q2pX0ZDR3mpSSXsqMP2ojOXWL/nkFGTAAYE2nN9YW97Gkc5lCRyL&#xA;KBDNLASV6BjEyF0PdGqp7jCh59pf5FeW9MtI7SyvrqGBVNvIka2yiSzZbdXt3AioTJ9Si9SX+8Y1&#xA;q2+yr0eOKKMERoqBmLMFAFWY1JNO5OKrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUb&#xA;qys7uIxXcEdxEescqK6+HRgRiqSyfl55Cdi/+HdNWRjUyx2sMclf9dFVu/jiqi35ceUa1jtp7c1q&#xA;Pq17eW9PYejMlF9umCgmy2Py88uhuQl1QNSlRrGq/wDZTjwheIub8vPLrU5S6oQpBUHWNV2I6f8A&#xA;HzjwheItf8q58qluUkd5OQCB6+o6hNSu5p6k70rjQWyvX8t/II+35e0+c7b3FvHOdvAyhzhQm+na&#xA;No+mpw06xt7JKU428SRCm21EC+AxVGYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUo84or+U&#xA;dcRwGRtPugykVBBhaoIwFISK68r+WR00iyH/AEbxf805q8si7HHEJPc+WvLg6aVZ/wDSPF/zTmFO&#xA;cu9z8cI9yV3Pl3y+K00y0/5ER/8ANOYssku8uXDHHuCWXGgaEK0021/5Ex/805RLLLvLmQxQ7h8k&#xA;vm0LRN/9x9t/yJj/AKZWcs+8uVDDD+aPkgJtE0bf/QLb/kTH/TB4s+8uTDBj/mj5IKXRtH/5Ybf/&#xA;AJFJ/TCMs+8t8dPj/mj5BBy6PpP/ACxW/wDyKT+mWDLLvLfHT4/5sfkELJpOlf8ALHB/yKT+mWxy&#xA;S7y3x02P+bH5BCS6Vpn/ACxwf8i0/pl8cku8t8dNi/mx+QQU2mabv/okP/Itf6Zkwme9vjpcX8yP&#xA;yCXz6dp/L/eWH/kWv9MyoSPe5UNJh/mR+QUG07T/APlmi/4Bf6ZcJFEtJi/mR+QU20+w/wCWaL/g&#xA;F/plgJaZaXF/Mj8gptYWP/LNF/wC/wBMsBajpcX82PyCw2Fj/wAs8X/AL/TJhqOmxfzY/IKbWNl/&#xA;yzxf8Av9MkGqWmx/zY/IKLWVl/yzx/8AAL/TJNR0+P8Amx+QUmsrP/fEf/AL/TFqlp8f82PyCi9n&#xA;af74j/4Ef0xaZYMf80fJDva2v++U/wCBH9MiWqWDH/NHyQ8ltb/76T/gRkC0Sww/mj5IWW3g/wB9&#xA;r/wIyuRaJYYdw+SEkhhr9hfuGUEm2ieKHcENJFF/Iv3DCCXEnjj3BDvHH/KPuyYJcWcI9z7f/wCc&#xA;XVVfyqtgoAH1hzQbdYoycyYcnR6kfvC9byTQ7FXYq0XQOqFgHavFSdzTrQYqlvmaznvvLup6fbSL&#xA;Hd31pPbWzMQB6ssTKnUN3NehxVAv5Wlkcodev+YFSvGxrQ7Vp9W9solp4luGeQQ58kJKCRr2oMAS&#xA;DQWPUbEf7zZWdDjLaNbkCk/5cwv11vUvusv+yXKz2diPe2DtLKO5Qf8AK+yYEtrepU7n/Qv+yXIn&#xA;svD5/NsHa2Yd3yUf+VT6ZIoYa5qTKwqGBsqEHuP9FwfyTh8/mzHbWcdR8kBB+UlgzXst1rt8LRJf&#xA;9EkR7L+5WJA/qE21OQm9QfKmD+ScPn82Y7d1I6j5Lpvyf8tRyLHN5g1GOR/sI0lirGppsDbYf5Jw&#xA;+fzZD2g1PePk235G6C3XWdV/4Ky/7JcP8l4fP5sx7R6rvj8lh/Ify8eus6r/AMFZf9kuSHZuLzZD&#xA;2m1ffH5KR/IPywzlDrWq8wKledlWh2rT6rkhoMY72Q9qNZ3x+SC1H/nH3QfTjS01nUvrLyxfBLJZ&#xA;gGESr65UC1ryERbj/lUrkxo4BmPavW98f9Ku/wChdPJsruo1vVmZDR1WSyJUkV3H1XbJjTxDMe1+&#xA;uHWP+lWp/wA43+TJFDprWruh6MslkQfpFrkvCip9r9b3x/0rj/zjT5OP/S41j/kZZf8AZLkvDDE+&#xA;1ut74/6VZJ/zjV5KRGeTWtXRFFWZpbIADxJNrh4Qx/0V6zvj8mz/AM4y+S6VOsawAOv7yy/7JcNI&#xA;PtTrO+PyQVp/zjZ5R+qiS/1vUlaSaUQtHNZ8GiMrfV6FrXdmi48qftVphY/6J9X3x+Sq3/ONX5fe&#xA;v9XOvaqJz0i9ex59K/Z+q1xY/wCiXVd8fkvP/OLnkc/9LfWf+Rtn/wBkuG2J9o9V3x+S0/8AOLHk&#xA;U9dX1n/kbZ/9kuBB9odT3x+Sn/0Kv5AYso1jWCy7MBNZ1BIrv/ouLE9vanvHyQl1/wA4p+Sjc2sd&#xA;vq+qlDITeq81pzEHpScWjAtevrBBvtSuDhDA9uajvHyXL/zil+Wk0RmTW9XeIVrItxZFRTruLWmR&#xA;MAxPbOfy+Tv+hRPy4cBhq+tEHcETWdCP+kXI+DFge1sx7vktP/OHv5bnrq2t/wDI6z/7JMfBiwPa&#xA;WU9yw/8AOHP5aHrqut/8j7P/ALJMPhhgddkL1TyD5F0ryR5eTQtLnuLi0jcyCS7aNpasFWlY0iWl&#xA;FH7OTApxZzMjZZHhYuxV2KvGfPHlrWLvz7dzro9xeajc3mgS+WtaSLnFZW1ncq+oqZx/vPVPU5Ak&#xA;eoHAANDiqj+aunah5gvLu8i8v6hqC3OiXmm+XAbaTnaa0l2yJckMP9G5cEkjuG4jgv2viFVUvvPK&#xA;Xm6TzBdpZ6Zcx+bv0nqt1J5m4MkL6bPpc0NpCLsgKw+sNEFhBqjLy4j7WKso/J3RJ7HVb+4tdGuN&#xA;C0k6TpVpPbXMLWxm1W39f65OI2ClzxeNGm6SEVDNTFXqmKsP/NnTNQ1LyZLbWltJfRi7sJtQsIRW&#xA;S4sYbyKS7hVf2uUCN8H7Q+HetCqxHTbHX4/y681aLo+mXunT68+tS+VLYwPALaBoR6Ebg8BZmWRm&#xA;MSPxpXoKUxVjcflVxcC8t/Kl5B5Ei1TTZtQ8vNZkPKLbTrmCeb6hx5Soty0HKkZ9QrzFacsVXW3l&#xA;bVtOtfK9zHpl5N5otYLaC10i60xb2ySzOpzSRrNfvFIlpJBbyb8ZlZaLs3TFX0BirsVeL2Hl7WIf&#xA;zJjvDo90mq2+v6hqF9r/AKTGKXRJrGSOC2W4IpJ+8MSrApqjLy4j7WKqPmTR9X1fze+qxaHfPf6p&#xA;ceXbvyzqkkDodPtYJkk1GKdyK2jCP1PUjfd+fGhoaKqF3p13dH80NI8t6BqFi2ptbXNqv1Cewgux&#xA;biJL5Yp5I44mknPqU+Kr1LCo3xVnX5Vaa1ofMk9ppk2jeX73U1m0PTJ4WtWjhFnbxzOtswUwrJcp&#xA;IwUgdzTfFWd4qwX81tNlvIfL00+my6xoNjqguNd0yGH6y0tuLWdI2NuA5mWO4eNjGFJPWm2KsVbS&#xA;tf8A+VMQeVZdIvpL+KO1u7ixCFg2nLqyySWQkJ4NKLFChh5Vpt3xVJda0OG38l3E/wDha9bl5ohv&#xA;/KVnBpc01xY6et3ZTXLJDFGz2gkWCZuJVDQ8ab0xVkU2mn/la9t5g0axvLm81O4tDqkWoaQ0dtb2&#xA;YsQPXg1CWFHjlWoUxrKTyqrIOuKvXMVdirw/yDpereX9dg1K50LUILvStN1YebruO2d31K6lvYpr&#xA;T0Sg/wBMfgsjIUrxDcKg7Yqvfyzfr+YL3N3oV1PqA169v73WhAXil0CTS5IUtROK+oGkMaC2FW5L&#xA;y4gYqk+maPLqumarqkHla80rT7jWdJuNV8pLpU9nH+irN5FFIZI40u5m2kuFhVtgqb7EqvVPyn02&#xA;707yeLeezk063a/1GbTdOmXhJb2M17LJaRGMV9PjCy0T9kbdsVZjirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVad0jQvIwRFFWZjQAeJJxVqKaKaMSROskbfZdCGBoabEYqsubq1tYvWupkgi5I&#xA;nqSsEXlIwRFqxAqzsFA7k0xVVxVTiuLeV5o4pUke3cRzorAmNyiyBXA+y3B1ah7EHviqGg1vRpzG&#xA;IL+2lMwjMQSaNi4mQyRFaHf1EUstOoBIxVG4qhrjU9Ntrq2tLm7hhu7wsLO3kkVJJjGAXEaEhn4g&#xA;ivHpiq9L2zdYnSeNlnYxwsHUh3UMSqmvxEcG2HgcVWWOp6bfrK1jdw3a28rQTtBIsgjlSnKN+JPF&#xA;1qKqd8VROKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxViX5t6dfal+WPm&#xA;iwsIHur26025it7eJSzyO0ZCqqjcknFWH2v5Za5pPmjTLe21Ke20vVrm9v8AXF0CFtKsY3jtLaG2&#xA;jWFJJ/TDtEWJ9QlmrirF9Ys/zN1HylqFvdxa3dT+npk2sQvCC66pBrFtK50ocQGiS3SRvgqmy/tc&#xA;sVRPmK+/NCPy2U0mHXiPX1KTQb2SO5kvRHHHB9Tiu4IwrkySNNwa6+EKvxhiQMVTTS4fOyfmNd30&#xA;UGr2s2papptzcQCMjSGsjpFrFfNIWXj6qSRcF+LlyUBdueKpZ5e8peb3g0+G6sLu3e4sfL9veSBG&#xA;hZGi0S8guPjFPTaKaRFJFOLEYqusz5t0vSfKHl7R59StZvMljFot/bX8si3WnT2vCa4u7dZmLBBb&#xA;fWUVo/h5LFQ9MVegeZxpT/mV5asL+dIRf6Jrtpa85FSR5Xm0wlYSxqZPTV223oCfHFWAaV5c83eU&#xA;9btLjR9Ol1DTbW9ms9PS6s3B5EQQXNyIrcwpbCdIzHFO6lQqM9D6+Ks9/K64srjU/PstlLHNb/4m&#xA;lUPCysnNNNsVkFVqKq4Ib3rirO8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdiqgbCxN8L820RvljMK3ZRfVERPIxiSnLjy3pWmKq+KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>379.000000</stDim:w>
            <stDim:h>258.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -258 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 258 li
379 258 li
379 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 258 mo
379 258 li
379 0 li
0 0 li
0 258 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
353.78 86.6001 mo
353.776 86.0869 li
353.768 85.5742 li
353.751 85.0615 li
353.729 84.5488 li
353.699 84.0361 li
353.664 83.5234 li
353.622 83.0112 li
353.573 82.499 li
353.519 81.9868 li
353.457 81.4751 li
353.39 80.9634 li
353.315 80.4517 li
353.235 79.9404 li
353.148 79.4297 li
353.055 78.9189 li
352.955 78.4082 li
352.849 77.8984 li
352.736 77.3887 li
352.617 76.8789 li
352.491 76.3701 li
352.359 75.8613 li
352.222 75.3535 li
352.076 74.8457 li
351.926 74.3384 li
351.769 73.8315 li
351.604 73.3252 li
351.435 72.8198 li
351.258 72.3145 li
351.075 71.8101 li
350.886 71.3057 li
350.69 70.8022 li
350.488 70.2993 li
350.28 69.7974 li
350.065 69.2959 li
349.845 68.7949 li
349.617 68.2949 li
349.384 67.7954 li
349.145 67.2969 li
348.898 66.7988 li
348.646 66.3018 li
348.388 65.8057 li
348.123 65.3101 li
347.853 64.8154 li
347.575 64.3218 li
347.292 63.8291 li
347.002 63.3369 li
346.707 62.8457 li
346.404 62.3555 li
346.097 61.8667 li
345.782 61.3784 li
345.462 60.8911 li
345.136 60.4048 li
344.803 59.9199 li
344.465 59.4355 li
344.12 58.9526 li
343.769 58.4707 li
343.412 57.9902 li
343.049 57.5103 li
342.681 57.0317 li
342.306 56.5547 li
341.924 56.0781 li
341.537 55.6035 li
341.145 55.1299 li
340.746 54.6572 li
340.341 54.186 li
339.931 53.7158 li
339.514 53.2476 li
339.091 52.7803 li
338.663 52.314 li
338.229 51.8496 li
337.789 51.3862 li
337.343 50.9243 li
336.891 50.4639 li
336.434 50.0049 li
335.971 49.5474 li
335.502 49.0913 li
335.026 48.6367 li
334.547 48.1836 li
334.061 47.7319 li
333.568 47.2817 li
333.071 46.8335 li
332.568 46.3862 li
332.06 45.9409 li
331.545 45.4971 li
331.025 45.0552 li
330.5 44.6147 li
329.969 44.1758 li
329.433 43.7388 li
328.891 43.3032 li
328.344 42.8696 li
327.791 42.4375 li
327.232 42.0073 li
326.669 41.5791 li
326.1 41.1523 li
325.525 40.7275 li
324.945 40.3042 li
324.36 39.8833 li
323.771 39.4639 li
323.175 39.0459 li
322.574 38.6304 li
321.968 38.2168 li
321.357 37.8047 li
320.74 37.395 li
320.119 36.9868 li
319.492 36.5811 li
318.86 36.1768 li
318.224 35.7749 li
317.582 35.375 li
316.936 34.9771 li
316.283 34.5811 li
315.627 34.187 li
314.965 33.7954 li
314.298 33.4053 li
313.627 33.0181 li
312.95 32.6323 li
312.269 32.249 li
311.583 31.8677 li
310.892 31.4888 li
310.196 31.1118 li
309.496 30.7373 li
308.791 30.3647 li
308.081 29.9946 li
307.367 29.6265 li
306.647 29.2607 li
305.924 28.897 li
305.196 28.5361 li
304.464 28.1772 li
303.727 27.8203 li
302.984 27.4663 li
302.238 27.1143 li
301.488 26.7646 li
300.733 26.4175 li
299.975 26.0728 li
299.211 25.73 li
298.443 25.3901 li
297.671 25.0527 li
296.895 24.7173 li
296.114 24.3848 li
295.329 24.0542 li
294.54 23.7266 li
293.747 23.4014 li
292.95 23.0786 li
292.149 22.7583 li
291.345 22.4404 li
290.535 22.125 li
289.723 21.8125 li
288.905 21.5024 li
288.085 21.1948 li
287.26 20.8896 li
286.432 20.5874 li
285.6 20.2876 li
284.764 19.9907 li
283.924 19.6963 li
283.08 19.4043 li
282.233 19.1152 li
281.382 18.8286 li
280.528 18.5449 li
279.67 18.2637 li
278.809 17.9854 li
277.944 17.7095 li
277.076 17.4365 li
276.204 17.1665 li
275.329 16.8989 li
274.45 16.6338 li
273.568 16.3721 li
272.684 16.1128 li
271.796 15.8564 li
270.904 15.6025 li
270.01 15.3521 li
269.111 15.104 li
268.211 14.8589 li
267.307 14.6167 li
266.399 14.377 li
265.49 14.1401 li
264.577 13.9067 li
263.661 13.6758 li
262.742 13.4478 li
261.82 13.2227 li
260.896 13.0005 li
259.969 12.7813 li
259.039 12.5649 li
258.106 12.3516 li
257.171 12.1406 li
256.233 11.9331 li
255.293 11.7285 li
254.35 11.5269 li
253.404 11.3281 li
252.456 11.1328 li
251.506 10.9399 li
250.553 10.75 li
249.598 10.5635 li
248.64 10.3799 li
247.68 10.1992 li
246.718 10.0215 li
245.753 9.84668 li
244.786 9.67529 li
243.818 9.50635 li
242.847 9.34082 li
241.874 9.17871 li
240.899 9.01904 li
239.923 8.86279 li
238.943 8.70947 li
237.963 8.55957 li
236.98 8.41211 li
235.996 8.26855 li
235.01 8.12744 li
234.021 7.98975 li
233.032 7.85498 li
232.041 7.72363 li
231.048 7.59521 li
230.053 7.46973 li
229.057 7.34766 li
228.06 7.22852 li
227.061 7.1123 li
226.06 7 li
225.058 6.89014 li
224.055 6.78369 li
223.05 6.68018 li
222.044 6.58008 li
221.036 6.4834 li
220.028 6.38965 li
219.019 6.29883 li
218.008 6.21143 li
216.996 6.12695 li
215.983 6.0459 li
214.97 5.96777 li
213.955 5.89307 li
212.939 5.82178 li
211.923 5.75342 li
210.905 5.68848 li
209.887 5.62646 li
208.868 5.56738 li
207.849 5.51221 li
206.828 5.45996 li
205.808 5.41064 li
204.785 5.36475 li
203.764 5.32227 li
202.741 5.28271 li
201.718 5.24609 li
200.694 5.21338 li
199.67 5.18359 li
198.646 5.15674 li
197.621 5.1333 li
196.597 5.11328 li
195.571 5.09619 li
194.546 5.08252 li
193.521 5.07227 li
192.495 5.06494 li
191.469 5.06104 li
190.443 5.06006 li
189.418 5.0625 li
188.393 5.06836 li
187.367 5.07715 li
186.342 5.08887 li
185.316 5.10449 li
184.291 5.12305 li
183.266 5.14453 li
182.242 5.16992 li
181.218 5.19775 li
180.194 5.22949 li
179.171 5.26416 li
178.148 5.30176 li
177.125 5.34277 li
176.104 5.38721 li
175.082 5.43457 li
174.062 5.48535 li
173.042 5.53955 li
172.022 5.59668 li
171.004 5.65674 li
169.986 5.72021 li
168.969 5.78711 li
167.953 5.85693 li
166.938 5.93018 li
165.923 6.00635 li
164.91 6.08594 li
163.898 6.16895 li
162.887 6.25439 li
161.876 6.34375 li
160.868 6.43604 li
159.86 6.53125 li
158.853 6.62988 li
157.848 6.73145 li
156.844 6.83643 li
155.841 6.94434 li
154.84 7.05566 li
153.84 7.16992 li
152.842 7.2876 li
151.845 7.4082 li
150.85 7.53174 li
149.855 7.65869 li
148.863 7.78906 li
147.873 7.92188 li
146.884 8.05811 li
145.897 8.19775 li
144.912 8.33984 li
143.928 8.48535 li
142.946 8.63428 li
141.967 8.78564 li
140.989 8.94043 li
140.013 9.09863 li
139.039 9.25928 li
138.067 9.42334 li
137.098 9.59033 li
136.13 9.76074 li
135.165 9.93359 li
134.201 10.1099 li
133.24 10.2891 li
132.281 10.4712 li
131.325 10.6563 li
130.371 10.8447 li
129.419 11.0361 li
128.47 11.23 li
127.523 11.4272 li
126.579 11.6274 li
125.637 11.8306 li
124.697 12.0366 li
123.761 12.2456 li
122.827 12.4575 li
121.896 12.6724 li
120.967 12.8906 li
120.041 13.1113 li
119.118 13.335 li
118.198 13.5615 li
117.281 13.791 li
116.366 14.0229 li
115.455 14.2583 li
114.546 14.4966 li
113.641 14.7373 li
112.738 14.981 li
111.839 15.2275 li
110.943 15.4771 li
110.05 15.7295 li
109.16 15.9844 li
108.273 16.2422 li
107.39 16.5029 li
106.51 16.7661 li
105.633 17.0322 li
104.76 17.3013 li
103.89 17.5728 li
103.023 17.8472 li
102.16 18.124 li
101.3 18.4038 li
100.444 18.6865 li
99.5918 18.9717 li
98.7432 19.2593 li
97.8975 19.5498 li
97.0562 19.8433 li
96.2183 20.1387 li
95.3843 20.4375 li
94.5537 20.7383 li
93.7271 21.042 li
92.9043 21.3481 li
92.0854 21.6572 li
91.2705 21.9688 li
90.4595 22.2822 li
89.6523 22.5991 li
88.8496 22.918 li
88.0503 23.2397 li
87.2554 23.5635 li
86.4648 23.8901 li
85.6777 24.2192 li
84.8955 24.5508 li
84.1167 24.8848 li
83.3428 25.2212 li
82.5728 25.5601 li
81.8071 25.9014 li
81.0459 26.2446 li
80.2886 26.5908 li
79.5361 26.939 li
78.7876 27.29 li
78.0439 27.6431 li
77.3047 27.9985 li
76.5693 28.3564 li
75.8394 28.7163 li
75.1133 29.0786 li
74.3921 29.4434 li
73.6753 29.8101 li
72.9634 30.1792 li
72.2559 30.5508 li
71.5532 30.9243 li
70.8555 31.2998 li
70.1621 31.6777 li
69.4736 32.0581 li
68.79 32.4404 li
68.1113 32.8247 li
67.437 33.2114 li
66.7681 33.6001 li
66.1035 33.9907 li
65.4443 34.3838 li
64.79 34.7788 li
64.1406 35.1758 li
63.4966 35.5747 li
62.8569 35.9756 li
62.2227 36.3789 li
61.5938 36.7837 li
60.9697 37.1909 li
60.3506 37.5996 li
59.7368 38.0107 li
59.1279 38.4233 li
58.5249 38.8379 li
57.9268 39.2549 li
57.3335 39.6733 li
56.7461 40.0933 li
56.1636 40.5156 li
55.5864 40.9395 li
55.0151 41.3652 li
54.4487 41.793 li
53.8877 42.2222 li
53.332 42.6533 li
52.7822 43.0864 li
52.2373 43.521 li
51.6982 43.957 li
51.1646 44.395 li
50.6367 44.835 li
50.1138 45.2759 li
49.5972 45.7188 li
49.0854 46.1636 li
48.5796 46.6099 li
48.0796 47.0576 li
47.585 47.5068 li
47.0957 47.9575 li
46.6128 48.4097 li
46.1353 48.8638 li
45.6636 49.3193 li
45.1973 49.7759 li
44.7368 50.2344 li
44.2822 50.6938 li
43.8335 51.1553 li
43.3906 51.6177 li
42.9536 52.0815 li
42.5225 52.5469 li
42.0967 53.0137 li
41.6772 53.4814 li
41.2637 53.9507 li
40.856 54.4214 li
40.4541 54.8931 li
40.0581 55.3662 li
39.6685 55.8408 li
39.2842 56.3164 li
38.9063 56.793 li
38.5347 57.271 li
38.1685 57.75 li
37.8086 58.2305 li
37.4551 58.7119 li
37.1069 59.1943 li
36.7656 59.6777 li
36.4297 60.1621 li
36.1001 60.6479 li
35.7769 61.1348 li
35.4595 61.6221 li
35.1484 62.1108 li
34.8438 62.6006 li
34.5449 63.0913 li
34.252 63.583 li
33.9658 64.0752 li
33.6855 64.5684 li
33.4116 65.0625 li
33.1436 65.5576 li
32.8823 66.0537 li
32.627 66.5503 li
32.3779 67.0479 li
32.1348 67.5459 li
31.8984 68.0449 li
31.668 68.5449 li
31.4443 69.0454 li
31.2266 69.5464 li
31.0151 70.0483 li
30.8101 70.5508 li
30.6113 71.0542 li
30.4189 71.5576 li
30.2329 72.062 li
30.0532 72.5669 li
29.8799 73.0723 li
29.7129 73.5786 li
29.5522 74.085 li
29.3979 74.5918 li
29.25 75.0996 li
29.1089 75.6074 li
28.9736 76.1157 li
28.8447 76.6245 li
28.7227 77.1338 li
28.6069 77.6436 li
28.4976 78.1533 li
28.3945 78.6636 li
28.2979 79.1738 li
28.2075 79.6851 li
28.1235 80.1963 li
28.0464 80.7075 li
27.9756 81.2192 li
27.9111 81.731 li
27.853 82.2427 li
27.8013 82.7549 li
27.7563 83.2676 li
27.7178 83.7798 li
27.6855 84.2925 li
27.6597 84.8052 li
27.6401 85.3179 li
27.6274 85.8306 li
27.6206 86.3438 li
27.6206 86.8564 li
27.6274 87.3691 li
27.6401 87.8818 li
27.6597 88.3945 li
27.6855 88.9072 li
27.7178 89.4199 li
27.7563 89.9326 li
27.8013 90.4448 li
27.853 90.957 li
27.9111 91.4692 li
27.9756 91.981 li
28.0464 92.4927 li
28.1235 93.0039 li
28.2075 93.5151 li
28.2979 94.0259 li
28.3945 94.5366 li
28.4976 95.0469 li
28.6069 95.5566 li
28.7227 96.0664 li
28.8447 96.5752 li
28.9736 97.084 li
29.1089 97.5928 li
29.25 98.1006 li
29.3979 98.6079 li
29.5522 99.1152 li
29.7129 99.6216 li
29.8799 100.127 li
30.0532 100.633 li
30.2329 101.138 li
30.4189 101.642 li
30.6113 102.146 li
30.8101 102.649 li
31.0151 103.151 li
31.2266 103.653 li
31.4443 104.155 li
31.668 104.655 li
31.8984 105.155 li
32.1348 105.654 li
32.3779 106.152 li
32.627 106.649 li
32.8823 107.146 li
33.1436 107.642 li
33.4116 108.137 li
33.6855 108.631 li
33.9658 109.125 li
34.252 109.617 li
34.5449 110.109 li
34.8438 110.599 li
35.1484 111.089 li
35.4595 111.578 li
35.7769 112.065 li
36.1001 112.552 li
36.4297 113.038 li
36.7656 113.522 li
37.1069 114.006 li
37.4551 114.488 li
37.8086 114.97 li
38.1685 115.45 li
38.5347 115.929 li
38.9063 116.407 li
39.2842 116.884 li
39.6685 117.359 li
40.0581 117.834 li
40.4541 118.307 li
40.856 118.778 li
41.2637 119.249 li
41.6772 119.719 li
42.0967 120.187 li
42.5225 120.653 li
42.9536 121.118 li
43.3906 121.582 li
43.8335 122.045 li
44.2822 122.506 li
44.7368 122.966 li
45.1973 123.424 li
45.6636 123.881 li
46.1353 124.336 li
46.6128 124.79 li
47.0957 125.242 li
47.585 125.693 li
48.0796 126.143 li
48.5796 126.59 li
49.0854 127.036 li
49.5972 127.48 li
50.1138 127.924 li
50.6367 128.365 li
51.1646 128.805 li
51.6982 129.243 li
52.2373 129.679 li
52.7822 130.113 li
53.332 130.547 li
53.8877 130.978 li
54.4487 131.407 li
55.0151 131.835 li
55.5864 132.261 li
56.1636 132.685 li
56.7461 133.106 li
57.3335 133.526 li
57.9268 133.945 li
58.5249 134.362 li
59.1279 134.776 li
59.7368 135.189 li
60.3506 135.601 li
60.9697 136.009 li
61.5938 136.416 li
62.2227 136.821 li
62.8569 137.225 li
63.4966 137.625 li
64.1406 138.024 li
64.79 138.421 li
65.4443 138.816 li
66.1035 139.209 li
66.7681 139.6 li
67.437 139.988 li
68.1113 140.375 li
68.79 140.76 li
69.4736 141.142 li
70.1621 141.521 li
70.8555 141.9 li
71.5532 142.275 li
72.2559 142.649 li
72.9634 143.021 li
73.6753 143.39 li
74.3921 143.757 li
75.1133 144.121 li
75.8394 144.483 li
76.5693 144.844 li
77.3047 145.201 li
78.0439 145.557 li
78.7876 145.91 li
79.5361 146.261 li
80.2886 146.609 li
81.0459 146.955 li
81.8071 147.299 li
82.5728 147.64 li
83.3428 147.979 li
84.1167 148.315 li
84.8955 148.649 li
85.6777 148.98 li
86.4648 149.31 li
87.2554 149.637 li
88.0503 149.96 li
88.8496 150.282 li
89.6523 150.601 li
90.4595 150.918 li
91.2705 151.231 li
92.0854 151.543 li
92.9043 151.852 li
93.7271 152.158 li
94.5537 152.462 li
95.3843 152.763 li
96.2183 153.061 li
97.0562 153.356 li
97.8975 153.65 li
98.7432 153.94 li
99.5918 154.229 li
100.444 154.514 li
101.3 154.796 li
102.16 155.076 li
103.023 155.353 li
103.89 155.627 li
104.76 155.898 li
105.633 156.168 li
106.51 156.434 li
107.39 156.697 li
108.273 156.958 li
109.16 157.216 li
110.05 157.471 li
110.943 157.723 li
111.839 157.973 li
112.738 158.219 li
113.641 158.463 li
114.546 158.703 li
115.455 158.941 li
116.366 159.177 li
117.281 159.409 li
118.198 159.639 li
119.118 159.865 li
120.041 160.089 li
120.967 160.31 li
121.896 160.527 li
122.827 160.742 li
123.761 160.954 li
124.697 161.163 li
125.637 161.369 li
126.579 161.572 li
127.523 161.772 li
128.47 161.97 li
129.419 162.164 li
130.371 162.355 li
131.325 162.544 li
132.281 162.729 li
133.24 162.911 li
134.201 163.09 li
135.165 163.267 li
136.13 163.439 li
137.098 163.609 li
138.067 163.776 li
139.039 163.94 li
140.013 164.102 li
140.989 164.26 li
141.967 164.414 li
142.946 164.565 li
143.928 164.715 li
144.912 164.86 li
145.897 165.002 li
146.884 165.142 li
147.873 165.278 li
148.863 165.411 li
149.855 165.541 li
150.85 165.668 li
151.845 165.792 li
152.842 165.912 li
153.84 166.03 li
154.84 166.145 li
155.841 166.256 li
156.844 166.363 li
157.848 166.469 li
158.853 166.57 li
159.86 166.669 li
160.868 166.764 li
161.876 166.856 li
162.887 166.945 li
163.898 167.031 li
164.91 167.114 li
165.923 167.193 li
166.938 167.27 li
167.953 167.343 li
168.969 167.413 li
169.986 167.479 li
171.004 167.543 li
172.022 167.604 li
173.042 167.66 li
174.062 167.715 li
175.082 167.766 li
176.104 167.813 li
177.125 167.857 li
178.148 167.898 li
179.171 167.936 li
180.194 167.971 li
181.218 168.002 li
182.242 168.03 li
183.266 168.056 li
184.291 168.077 li
185.316 168.096 li
186.342 168.111 li
187.367 168.123 li
188.393 168.132 li
189.418 168.138 li
190.443 168.14 li
191.469 168.139 li
192.495 168.135 li
193.521 168.128 li
194.546 168.117 li
195.571 168.104 li
196.597 168.087 li
197.621 168.066 li
198.646 168.043 li
199.67 168.017 li
200.694 167.986 li
201.718 167.954 li
202.741 167.917 li
203.764 167.878 li
204.785 167.835 li
205.808 167.789 li
206.828 167.74 li
207.849 167.688 li
208.868 167.633 li
209.887 167.573 li
210.905 167.512 li
211.923 167.446 li
212.939 167.378 li
213.955 167.307 li
214.97 167.232 li
215.983 167.154 li
216.996 167.073 li
218.008 166.988 li
219.019 166.901 li
220.028 166.811 li
221.036 166.717 li
222.044 166.62 li
223.05 166.52 li
224.055 166.416 li
225.058 166.31 li
226.06 166.2 li
227.061 166.088 li
228.06 165.972 li
229.057 165.853 li
230.053 165.73 li
231.048 165.605 li
232.041 165.477 li
233.032 165.345 li
234.021 165.21 li
235.01 165.072 li
235.996 164.932 li
236.98 164.787 li
237.963 164.641 li
238.943 164.49 li
239.923 164.337 li
240.899 164.181 li
241.874 164.021 li
242.847 163.859 li
243.818 163.693 li
244.786 163.524 li
245.753 163.354 li
246.718 163.179 li
247.68 163.001 li
248.64 162.82 li
249.598 162.637 li
250.553 162.45 li
251.506 162.26 li
252.456 162.067 li
253.404 161.872 li
254.35 161.673 li
255.293 161.472 li
256.233 161.267 li
257.171 161.06 li
258.106 160.849 li
259.039 160.635 li
259.969 160.419 li
260.896 160.199 li
261.82 159.978 li
262.742 159.752 li
263.661 159.524 li
264.577 159.293 li
265.49 159.06 li
266.399 158.823 li
267.307 158.583 li
268.211 158.341 li
269.111 158.096 li
270.01 157.848 li
270.904 157.598 li
271.796 157.344 li
272.684 157.087 li
273.568 156.828 li
274.45 156.566 li
275.329 156.301 li
276.204 156.033 li
277.076 155.764 li
277.944 155.49 li
278.809 155.215 li
279.67 154.937 li
280.528 154.655 li
281.382 154.371 li
282.233 154.085 li
283.08 153.796 li
283.924 153.504 li
284.764 153.209 li
285.6 152.912 li
286.432 152.612 li
287.26 152.311 li
288.085 152.005 li
288.905 151.697 li
289.723 151.388 li
290.535 151.075 li
291.345 150.76 li
292.149 150.441 li
292.95 150.121 li
293.747 149.799 li
294.54 149.474 li
295.329 149.146 li
296.114 148.815 li
296.895 148.482 li
297.671 148.147 li
298.443 147.81 li
299.211 147.47 li
299.975 147.127 li
300.733 146.782 li
301.488 146.436 li
302.238 146.086 li
302.984 145.733 li
303.727 145.38 li
304.464 145.022 li
305.196 144.664 li
305.924 144.303 li
306.647 143.939 li
307.367 143.573 li
308.081 143.205 li
308.791 142.835 li
309.496 142.463 li
310.196 142.088 li
310.892 141.711 li
311.583 141.332 li
312.269 140.951 li
312.95 140.567 li
313.627 140.182 li
314.298 139.795 li
314.965 139.404 li
315.627 139.013 li
316.283 138.619 li
316.936 138.223 li
317.582 137.825 li
318.224 137.425 li
318.86 137.023 li
319.492 136.619 li
320.119 136.213 li
320.74 135.805 li
321.357 135.396 li
321.968 134.983 li
322.574 134.569 li
323.175 134.154 li
323.771 133.736 li
324.36 133.316 li
324.945 132.896 li
325.525 132.473 li
326.1 132.048 li
326.669 131.621 li
327.232 131.192 li
327.791 130.763 li
328.344 130.33 li
328.891 129.896 li
329.433 129.461 li
329.969 129.024 li
330.5 128.585 li
331.025 128.145 li
331.545 127.703 li
332.06 127.259 li
332.568 126.813 li
333.071 126.366 li
333.568 125.918 li
334.061 125.468 li
334.547 125.017 li
335.026 124.563 li
335.502 124.108 li
335.971 123.652 li
336.434 123.195 li
336.891 122.736 li
337.343 122.275 li
337.789 121.813 li
338.229 121.351 li
338.663 120.886 li
339.091 120.42 li
339.514 119.952 li
339.931 119.484 li
340.341 119.014 li
340.746 118.543 li
341.145 118.07 li
341.537 117.597 li
341.924 117.122 li
342.306 116.646 li
342.681 116.168 li
343.049 115.689 li
343.412 115.21 li
343.769 114.729 li
344.12 114.247 li
344.465 113.764 li
344.803 113.28 li
345.136 112.795 li
345.462 112.309 li
345.782 111.822 li
346.097 111.333 li
346.404 110.844 li
346.707 110.354 li
347.002 109.863 li
347.292 109.371 li
347.575 108.878 li
347.853 108.384 li
348.123 107.89 li
348.388 107.395 li
348.646 106.898 li
348.898 106.401 li
349.145 105.903 li
349.384 105.404 li
349.617 104.905 li
349.845 104.405 li
350.065 103.904 li
350.28 103.402 li
350.488 102.9 li
350.69 102.397 li
350.886 101.894 li
351.075 101.39 li
351.258 100.886 li
351.435 100.38 li
351.604 99.8745 li
351.769 99.3682 li
351.926 98.8613 li
352.076 98.3545 li
352.222 97.8467 li
352.359 97.3384 li
352.491 96.8301 li
352.617 96.3208 li
352.736 95.8115 li
352.849 95.3018 li
352.955 94.7915 li
353.055 94.2813 li
353.148 93.7705 li
353.235 93.2598 li
353.315 92.748 li
353.39 92.2368 li
353.457 91.7251 li
353.519 91.2129 li
353.573 90.7012 li
353.622 90.1885 li
353.664 89.6763 li
353.699 89.1636 li
353.729 88.6514 li
353.751 88.1387 li
353.768 87.6255 li
353.776 87.1128 li
353.78 86.6001 li
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
353.78 86.6001 mo
353.776 86.0869 li
353.768 85.5742 li
353.751 85.0615 li
353.729 84.5488 li
353.699 84.0361 li
353.664 83.5234 li
353.622 83.0112 li
353.573 82.499 li
353.519 81.9868 li
353.457 81.4751 li
353.39 80.9634 li
353.315 80.4517 li
353.235 79.9404 li
353.148 79.4297 li
353.055 78.9189 li
352.955 78.4082 li
352.849 77.8984 li
352.736 77.3887 li
352.617 76.8789 li
352.491 76.3701 li
352.359 75.8613 li
352.222 75.3535 li
352.076 74.8457 li
351.926 74.3384 li
351.769 73.8315 li
351.604 73.3252 li
351.435 72.8198 li
351.258 72.3145 li
351.075 71.8101 li
350.886 71.3057 li
350.69 70.8022 li
350.488 70.2993 li
350.28 69.7974 li
350.065 69.2959 li
349.845 68.7949 li
349.617 68.2949 li
349.384 67.7954 li
349.145 67.2969 li
348.898 66.7988 li
348.646 66.3018 li
348.388 65.8057 li
348.123 65.3101 li
347.853 64.8154 li
347.575 64.3218 li
347.292 63.8291 li
347.002 63.3369 li
346.707 62.8457 li
346.404 62.3555 li
346.097 61.8667 li
345.782 61.3784 li
345.462 60.8911 li
345.136 60.4048 li
344.803 59.9199 li
344.465 59.4355 li
344.12 58.9526 li
343.769 58.4707 li
343.412 57.9902 li
343.049 57.5103 li
342.681 57.0317 li
342.306 56.5547 li
341.924 56.0781 li
341.537 55.6035 li
341.145 55.1299 li
340.746 54.6572 li
340.341 54.186 li
339.931 53.7158 li
339.514 53.2476 li
339.091 52.7803 li
338.663 52.314 li
338.229 51.8496 li
337.789 51.3862 li
337.343 50.9243 li
336.891 50.4639 li
336.434 50.0049 li
335.971 49.5474 li
335.502 49.0913 li
335.026 48.6367 li
334.547 48.1836 li
334.061 47.7319 li
333.568 47.2817 li
333.071 46.8335 li
332.568 46.3862 li
332.06 45.9409 li
331.545 45.4971 li
331.025 45.0552 li
330.5 44.6147 li
329.969 44.1758 li
329.433 43.7388 li
328.891 43.3032 li
328.344 42.8696 li
327.791 42.4375 li
327.232 42.0073 li
326.669 41.5791 li
326.1 41.1523 li
325.525 40.7275 li
324.945 40.3042 li
324.36 39.8833 li
323.771 39.4639 li
323.175 39.0459 li
322.574 38.6304 li
321.968 38.2168 li
321.357 37.8047 li
320.74 37.395 li
320.119 36.9868 li
319.492 36.5811 li
318.86 36.1768 li
318.224 35.7749 li
317.582 35.375 li
316.936 34.9771 li
316.283 34.5811 li
315.627 34.187 li
314.965 33.7954 li
314.298 33.4053 li
313.627 33.0181 li
312.95 32.6323 li
312.269 32.249 li
311.583 31.8677 li
310.892 31.4888 li
310.196 31.1118 li
309.496 30.7373 li
308.791 30.3647 li
308.081 29.9946 li
307.367 29.6265 li
306.647 29.2607 li
305.924 28.897 li
305.196 28.5361 li
304.464 28.1772 li
303.727 27.8203 li
302.984 27.4663 li
302.238 27.1143 li
301.488 26.7646 li
300.733 26.4175 li
299.975 26.0728 li
299.211 25.73 li
298.443 25.3901 li
297.671 25.0527 li
296.895 24.7173 li
296.114 24.3848 li
295.329 24.0542 li
294.54 23.7266 li
293.747 23.4014 li
292.95 23.0786 li
292.149 22.7583 li
291.345 22.4404 li
290.535 22.125 li
289.723 21.8125 li
288.905 21.5024 li
288.085 21.1948 li
287.26 20.8896 li
286.432 20.5874 li
285.6 20.2876 li
284.764 19.9907 li
283.924 19.6963 li
283.08 19.4043 li
282.233 19.1152 li
281.382 18.8286 li
280.528 18.5449 li
279.67 18.2637 li
278.809 17.9854 li
277.944 17.7095 li
277.076 17.4365 li
276.204 17.1665 li
275.329 16.8989 li
274.45 16.6338 li
273.568 16.3721 li
272.684 16.1128 li
271.796 15.8564 li
270.904 15.6025 li
270.01 15.3521 li
269.111 15.104 li
268.211 14.8589 li
267.307 14.6167 li
266.399 14.377 li
265.49 14.1401 li
264.577 13.9067 li
263.661 13.6758 li
262.742 13.4478 li
261.82 13.2227 li
260.896 13.0005 li
259.969 12.7813 li
259.039 12.5649 li
258.106 12.3516 li
257.171 12.1406 li
256.233 11.9331 li
255.293 11.7285 li
254.35 11.5269 li
253.404 11.3281 li
252.456 11.1328 li
251.506 10.9399 li
250.553 10.75 li
249.598 10.5635 li
248.64 10.3799 li
247.68 10.1992 li
246.718 10.0215 li
245.753 9.84668 li
244.786 9.67529 li
243.818 9.50635 li
242.847 9.34082 li
241.874 9.17871 li
240.899 9.01904 li
239.923 8.86279 li
238.943 8.70947 li
237.963 8.55957 li
236.98 8.41211 li
235.996 8.26855 li
235.01 8.12744 li
234.021 7.98975 li
233.032 7.85498 li
232.041 7.72363 li
231.048 7.59521 li
230.053 7.46973 li
229.057 7.34766 li
228.06 7.22852 li
227.061 7.1123 li
226.06 7 li
225.058 6.89014 li
224.055 6.78369 li
223.05 6.68018 li
222.044 6.58008 li
221.036 6.4834 li
220.028 6.38965 li
219.019 6.29883 li
218.008 6.21143 li
216.996 6.12695 li
215.983 6.0459 li
214.97 5.96777 li
213.955 5.89307 li
212.939 5.82178 li
211.923 5.75342 li
210.905 5.68848 li
209.887 5.62646 li
208.868 5.56738 li
207.849 5.51221 li
206.828 5.45996 li
205.808 5.41064 li
204.785 5.36475 li
203.764 5.32227 li
202.741 5.28271 li
201.718 5.24609 li
200.694 5.21338 li
199.67 5.18359 li
198.646 5.15674 li
197.621 5.1333 li
196.597 5.11328 li
195.571 5.09619 li
194.546 5.08252 li
193.521 5.07227 li
192.495 5.06494 li
191.469 5.06104 li
190.443 5.06006 li
189.418 5.0625 li
188.393 5.06836 li
187.367 5.07715 li
186.342 5.08887 li
185.316 5.10449 li
184.291 5.12305 li
183.266 5.14453 li
182.242 5.16992 li
181.218 5.19775 li
180.194 5.22949 li
179.171 5.26416 li
178.148 5.30176 li
177.125 5.34277 li
176.104 5.38721 li
175.082 5.43457 li
174.062 5.48535 li
173.042 5.53955 li
172.022 5.59668 li
171.004 5.65674 li
169.986 5.72021 li
168.969 5.78711 li
167.953 5.85693 li
166.938 5.93018 li
165.923 6.00635 li
164.91 6.08594 li
163.898 6.16895 li
162.887 6.25439 li
161.876 6.34375 li
160.868 6.43604 li
159.86 6.53125 li
158.853 6.62988 li
157.848 6.73145 li
156.844 6.83643 li
155.841 6.94434 li
154.84 7.05566 li
153.84 7.16992 li
152.842 7.2876 li
151.845 7.4082 li
150.85 7.53174 li
149.855 7.65869 li
148.863 7.78906 li
147.873 7.92188 li
146.884 8.05811 li
145.897 8.19775 li
144.912 8.33984 li
143.928 8.48535 li
142.946 8.63428 li
141.967 8.78564 li
140.989 8.94043 li
140.013 9.09863 li
139.039 9.25928 li
138.067 9.42334 li
137.098 9.59033 li
136.13 9.76074 li
135.165 9.93359 li
134.201 10.1099 li
133.24 10.2891 li
132.281 10.4712 li
131.325 10.6563 li
130.371 10.8447 li
129.419 11.0361 li
128.47 11.23 li
127.523 11.4272 li
126.579 11.6274 li
125.637 11.8306 li
124.697 12.0366 li
123.761 12.2456 li
122.827 12.4575 li
121.896 12.6724 li
120.967 12.8906 li
120.041 13.1113 li
119.118 13.335 li
118.198 13.5615 li
117.281 13.791 li
116.366 14.0229 li
115.455 14.2583 li
114.546 14.4966 li
113.641 14.7373 li
112.738 14.981 li
111.839 15.2275 li
110.943 15.4771 li
110.05 15.7295 li
109.16 15.9844 li
108.273 16.2422 li
107.39 16.5029 li
106.51 16.7661 li
105.633 17.0322 li
104.76 17.3013 li
103.89 17.5728 li
103.023 17.8472 li
102.16 18.124 li
101.3 18.4038 li
100.444 18.6865 li
99.5918 18.9717 li
98.7432 19.2593 li
97.8975 19.5498 li
97.0562 19.8433 li
96.2183 20.1387 li
95.3843 20.4375 li
94.5537 20.7383 li
93.7271 21.042 li
92.9043 21.3481 li
92.0854 21.6572 li
91.2705 21.9688 li
90.4595 22.2822 li
89.6523 22.5991 li
88.8496 22.918 li
88.0503 23.2397 li
87.2554 23.5635 li
86.4648 23.8901 li
85.6777 24.2192 li
84.8955 24.5508 li
84.1167 24.8848 li
83.3428 25.2212 li
82.5728 25.5601 li
81.8071 25.9014 li
81.0459 26.2446 li
80.2886 26.5908 li
79.5361 26.939 li
78.7876 27.29 li
78.0439 27.6431 li
77.3047 27.9985 li
76.5693 28.3564 li
75.8394 28.7163 li
75.1133 29.0786 li
74.3921 29.4434 li
73.6753 29.8101 li
72.9634 30.1792 li
72.2559 30.5508 li
71.5532 30.9243 li
70.8555 31.2998 li
70.1621 31.6777 li
69.4736 32.0581 li
68.79 32.4404 li
68.1113 32.8247 li
67.437 33.2114 li
66.7681 33.6001 li
66.1035 33.9907 li
65.4443 34.3838 li
64.79 34.7788 li
64.1406 35.1758 li
63.4966 35.5747 li
62.8569 35.9756 li
62.2227 36.3789 li
61.5938 36.7837 li
60.9697 37.1909 li
60.3506 37.5996 li
59.7368 38.0107 li
59.1279 38.4233 li
58.5249 38.8379 li
57.9268 39.2549 li
57.3335 39.6733 li
56.7461 40.0933 li
56.1636 40.5156 li
55.5864 40.9395 li
55.0151 41.3652 li
54.4487 41.793 li
53.8877 42.2222 li
53.332 42.6533 li
52.7822 43.0864 li
52.2373 43.521 li
51.6982 43.957 li
51.1646 44.395 li
50.6367 44.835 li
50.1138 45.2759 li
49.5972 45.7188 li
49.0854 46.1636 li
48.5796 46.6099 li
48.0796 47.0576 li
47.585 47.5068 li
47.0957 47.9575 li
46.6128 48.4097 li
46.1353 48.8638 li
45.6636 49.3193 li
45.1973 49.7759 li
44.7368 50.2344 li
44.2822 50.6938 li
43.8335 51.1553 li
43.3906 51.6177 li
42.9536 52.0815 li
42.5225 52.5469 li
42.0967 53.0137 li
41.6772 53.4814 li
41.2637 53.9507 li
40.856 54.4214 li
40.4541 54.8931 li
40.0581 55.3662 li
39.6685 55.8408 li
39.2842 56.3164 li
38.9063 56.793 li
38.5347 57.271 li
38.1685 57.75 li
37.8086 58.2305 li
37.4551 58.7119 li
37.1069 59.1943 li
36.7656 59.6777 li
36.4297 60.1621 li
36.1001 60.6479 li
35.7769 61.1348 li
35.4595 61.6221 li
35.1484 62.1108 li
34.8438 62.6006 li
34.5449 63.0913 li
34.252 63.583 li
33.9658 64.0752 li
33.6855 64.5684 li
33.4116 65.0625 li
33.1436 65.5576 li
32.8823 66.0537 li
32.627 66.5503 li
32.3779 67.0479 li
32.1348 67.5459 li
31.8984 68.0449 li
31.668 68.5449 li
31.4443 69.0454 li
31.2266 69.5464 li
31.0151 70.0483 li
30.8101 70.5508 li
30.6113 71.0542 li
30.4189 71.5576 li
30.2329 72.062 li
30.0532 72.5669 li
29.8799 73.0723 li
29.7129 73.5786 li
29.5522 74.085 li
29.3979 74.5918 li
29.25 75.0996 li
29.1089 75.6074 li
28.9736 76.1157 li
28.8447 76.6245 li
28.7227 77.1338 li
28.6069 77.6436 li
28.4976 78.1533 li
28.3945 78.6636 li
28.2979 79.1738 li
28.2075 79.6851 li
28.1235 80.1963 li
28.0464 80.7075 li
27.9756 81.2192 li
27.9111 81.731 li
27.853 82.2427 li
27.8013 82.7549 li
27.7563 83.2676 li
27.7178 83.7798 li
27.6855 84.2925 li
27.6597 84.8052 li
27.6401 85.3179 li
27.6274 85.8306 li
27.6206 86.3438 li
27.6206 86.8564 li
27.6274 87.3691 li
27.6401 87.8818 li
27.6597 88.3945 li
27.6855 88.9072 li
27.7178 89.4199 li
27.7563 89.9326 li
27.8013 90.4448 li
27.853 90.957 li
27.9111 91.4692 li
27.9756 91.981 li
28.0464 92.4927 li
28.1235 93.0039 li
28.2075 93.5151 li
28.2979 94.0259 li
28.3945 94.5366 li
28.4976 95.0469 li
28.6069 95.5566 li
28.7227 96.0664 li
28.8447 96.5752 li
28.9736 97.084 li
29.1089 97.5928 li
29.25 98.1006 li
29.3979 98.6079 li
29.5522 99.1152 li
29.7129 99.6216 li
29.8799 100.127 li
30.0532 100.633 li
30.2329 101.138 li
30.4189 101.642 li
30.6113 102.146 li
30.8101 102.649 li
31.0151 103.151 li
31.2266 103.653 li
31.4443 104.155 li
31.668 104.655 li
31.8984 105.155 li
32.1348 105.654 li
32.3779 106.152 li
32.627 106.649 li
32.8823 107.146 li
33.1436 107.642 li
33.4116 108.137 li
33.6855 108.631 li
33.9658 109.125 li
34.252 109.617 li
34.5449 110.109 li
34.8438 110.599 li
35.1484 111.089 li
35.4595 111.578 li
35.7769 112.065 li
36.1001 112.552 li
36.4297 113.038 li
36.7656 113.522 li
37.1069 114.006 li
37.4551 114.488 li
37.8086 114.97 li
38.1685 115.45 li
38.5347 115.929 li
38.9063 116.407 li
39.2842 116.884 li
39.6685 117.359 li
40.0581 117.834 li
40.4541 118.307 li
40.856 118.778 li
41.2637 119.249 li
41.6772 119.719 li
42.0967 120.187 li
42.5225 120.653 li
42.9536 121.118 li
43.3906 121.582 li
43.8335 122.045 li
44.2822 122.506 li
44.7368 122.966 li
45.1973 123.424 li
45.6636 123.881 li
46.1353 124.336 li
46.6128 124.79 li
47.0957 125.242 li
47.585 125.693 li
48.0796 126.143 li
48.5796 126.59 li
49.0854 127.036 li
49.5972 127.48 li
50.1138 127.924 li
50.6367 128.365 li
51.1646 128.805 li
51.6982 129.243 li
52.2373 129.679 li
52.7822 130.113 li
53.332 130.547 li
53.8877 130.978 li
54.4487 131.407 li
55.0151 131.835 li
55.5864 132.261 li
56.1636 132.685 li
56.7461 133.106 li
57.3335 133.526 li
57.9268 133.945 li
58.5249 134.362 li
59.1279 134.776 li
59.7368 135.189 li
60.3506 135.601 li
60.9697 136.009 li
61.5938 136.416 li
62.2227 136.821 li
62.8569 137.225 li
63.4966 137.625 li
64.1406 138.024 li
64.79 138.421 li
65.4443 138.816 li
66.1035 139.209 li
66.7681 139.6 li
67.437 139.988 li
68.1113 140.375 li
68.79 140.76 li
69.4736 141.142 li
70.1621 141.521 li
70.8555 141.9 li
71.5532 142.275 li
72.2559 142.649 li
72.9634 143.021 li
73.6753 143.39 li
74.3921 143.757 li
75.1133 144.121 li
75.8394 144.483 li
76.5693 144.844 li
77.3047 145.201 li
78.0439 145.557 li
78.7876 145.91 li
79.5361 146.261 li
80.2886 146.609 li
81.0459 146.955 li
81.8071 147.299 li
82.5728 147.64 li
83.3428 147.979 li
84.1167 148.315 li
84.8955 148.649 li
85.6777 148.98 li
86.4648 149.31 li
87.2554 149.637 li
88.0503 149.96 li
88.8496 150.282 li
89.6523 150.601 li
90.4595 150.918 li
91.2705 151.231 li
92.0854 151.543 li
92.9043 151.852 li
93.7271 152.158 li
94.5537 152.462 li
95.3843 152.763 li
96.2183 153.061 li
97.0562 153.356 li
97.8975 153.65 li
98.7432 153.94 li
99.5918 154.229 li
100.444 154.514 li
101.3 154.796 li
102.16 155.076 li
103.023 155.353 li
103.89 155.627 li
104.76 155.898 li
105.633 156.168 li
106.51 156.434 li
107.39 156.697 li
108.273 156.958 li
109.16 157.216 li
110.05 157.471 li
110.943 157.723 li
111.839 157.973 li
112.738 158.219 li
113.641 158.463 li
114.546 158.703 li
115.455 158.941 li
116.366 159.177 li
117.281 159.409 li
118.198 159.639 li
119.118 159.865 li
120.041 160.089 li
120.967 160.31 li
121.896 160.527 li
122.827 160.742 li
123.761 160.954 li
124.697 161.163 li
125.637 161.369 li
126.579 161.572 li
127.523 161.772 li
128.47 161.97 li
129.419 162.164 li
130.371 162.355 li
131.325 162.544 li
132.281 162.729 li
133.24 162.911 li
134.201 163.09 li
135.165 163.267 li
136.13 163.439 li
137.098 163.609 li
138.067 163.776 li
139.039 163.94 li
140.013 164.102 li
140.989 164.26 li
141.967 164.414 li
142.946 164.565 li
143.928 164.715 li
144.912 164.86 li
145.897 165.002 li
146.884 165.142 li
147.873 165.278 li
148.863 165.411 li
149.855 165.541 li
150.85 165.668 li
151.845 165.792 li
152.842 165.912 li
153.84 166.03 li
154.84 166.145 li
155.841 166.256 li
156.844 166.363 li
157.848 166.469 li
158.853 166.57 li
159.86 166.669 li
160.868 166.764 li
161.876 166.856 li
162.887 166.945 li
163.898 167.031 li
164.91 167.114 li
165.923 167.193 li
166.938 167.27 li
167.953 167.343 li
168.969 167.413 li
169.986 167.479 li
171.004 167.543 li
172.022 167.604 li
173.042 167.66 li
174.062 167.715 li
175.082 167.766 li
176.104 167.813 li
177.125 167.857 li
178.148 167.898 li
179.171 167.936 li
180.194 167.971 li
181.218 168.002 li
182.242 168.03 li
183.266 168.056 li
184.291 168.077 li
185.316 168.096 li
186.342 168.111 li
187.367 168.123 li
188.393 168.132 li
189.418 168.138 li
190.443 168.14 li
191.469 168.139 li
192.495 168.135 li
193.521 168.128 li
194.546 168.117 li
195.571 168.104 li
196.597 168.087 li
197.621 168.066 li
198.646 168.043 li
199.67 168.017 li
200.694 167.986 li
201.718 167.954 li
202.741 167.917 li
203.764 167.878 li
204.785 167.835 li
205.808 167.789 li
206.828 167.74 li
207.849 167.688 li
208.868 167.633 li
209.887 167.573 li
210.905 167.512 li
211.923 167.446 li
212.939 167.378 li
213.955 167.307 li
214.97 167.232 li
215.983 167.154 li
216.996 167.073 li
218.008 166.988 li
219.019 166.901 li
220.028 166.811 li
221.036 166.717 li
222.044 166.62 li
223.05 166.52 li
224.055 166.416 li
225.058 166.31 li
226.06 166.2 li
227.061 166.088 li
228.06 165.972 li
229.057 165.853 li
230.053 165.73 li
231.048 165.605 li
232.041 165.477 li
233.032 165.345 li
234.021 165.21 li
235.01 165.072 li
235.996 164.932 li
236.98 164.787 li
237.963 164.641 li
238.943 164.49 li
239.923 164.337 li
240.899 164.181 li
241.874 164.021 li
242.847 163.859 li
243.818 163.693 li
244.786 163.524 li
245.753 163.354 li
246.718 163.179 li
247.68 163.001 li
248.64 162.82 li
249.598 162.637 li
250.553 162.45 li
251.506 162.26 li
252.456 162.067 li
253.404 161.872 li
254.35 161.673 li
255.293 161.472 li
256.233 161.267 li
257.171 161.06 li
258.106 160.849 li
259.039 160.635 li
259.969 160.419 li
260.896 160.199 li
261.82 159.978 li
262.742 159.752 li
263.661 159.524 li
264.577 159.293 li
265.49 159.06 li
266.399 158.823 li
267.307 158.583 li
268.211 158.341 li
269.111 158.096 li
270.01 157.848 li
270.904 157.598 li
271.796 157.344 li
272.684 157.087 li
273.568 156.828 li
274.45 156.566 li
275.329 156.301 li
276.204 156.033 li
277.076 155.764 li
277.944 155.49 li
278.809 155.215 li
279.67 154.937 li
280.528 154.655 li
281.382 154.371 li
282.233 154.085 li
283.08 153.796 li
283.924 153.504 li
284.764 153.209 li
285.6 152.912 li
286.432 152.612 li
287.26 152.311 li
288.085 152.005 li
288.905 151.697 li
289.723 151.388 li
290.535 151.075 li
291.345 150.76 li
292.149 150.441 li
292.95 150.121 li
293.747 149.799 li
294.54 149.474 li
295.329 149.146 li
296.114 148.815 li
296.895 148.482 li
297.671 148.147 li
298.443 147.81 li
299.211 147.47 li
299.975 147.127 li
300.733 146.782 li
301.488 146.436 li
302.238 146.086 li
302.984 145.733 li
303.727 145.38 li
304.464 145.022 li
305.196 144.664 li
305.924 144.303 li
306.647 143.939 li
307.367 143.573 li
308.081 143.205 li
308.791 142.835 li
309.496 142.463 li
310.196 142.088 li
310.892 141.711 li
311.583 141.332 li
312.269 140.951 li
312.95 140.567 li
313.627 140.182 li
314.298 139.795 li
314.965 139.404 li
315.627 139.013 li
316.283 138.619 li
316.936 138.223 li
317.582 137.825 li
318.224 137.425 li
318.86 137.023 li
319.492 136.619 li
320.119 136.213 li
320.74 135.805 li
321.357 135.396 li
321.968 134.983 li
322.574 134.569 li
323.175 134.154 li
323.771 133.736 li
324.36 133.316 li
324.945 132.896 li
325.525 132.473 li
326.1 132.048 li
326.669 131.621 li
327.232 131.192 li
327.791 130.763 li
328.344 130.33 li
328.891 129.896 li
329.433 129.461 li
329.969 129.024 li
330.5 128.585 li
331.025 128.145 li
331.545 127.703 li
332.06 127.259 li
332.568 126.813 li
333.071 126.366 li
333.568 125.918 li
334.061 125.468 li
334.547 125.017 li
335.026 124.563 li
335.502 124.108 li
335.971 123.652 li
336.434 123.195 li
336.891 122.736 li
337.343 122.275 li
337.789 121.813 li
338.229 121.351 li
338.663 120.886 li
339.091 120.42 li
339.514 119.952 li
339.931 119.484 li
340.341 119.014 li
340.746 118.543 li
341.145 118.07 li
341.537 117.597 li
341.924 117.122 li
342.306 116.646 li
342.681 116.168 li
343.049 115.689 li
343.412 115.21 li
343.769 114.729 li
344.12 114.247 li
344.465 113.764 li
344.803 113.28 li
345.136 112.795 li
345.462 112.309 li
345.782 111.822 li
346.097 111.333 li
346.404 110.844 li
346.707 110.354 li
347.002 109.863 li
347.292 109.371 li
347.575 108.878 li
347.853 108.384 li
348.123 107.89 li
348.388 107.395 li
348.646 106.898 li
348.898 106.401 li
349.145 105.903 li
349.384 105.404 li
349.617 104.905 li
349.845 104.405 li
350.065 103.904 li
350.28 103.402 li
350.488 102.9 li
350.69 102.397 li
350.886 101.894 li
351.075 101.39 li
351.258 100.886 li
351.435 100.38 li
351.604 99.8745 li
351.769 99.3682 li
351.926 98.8613 li
352.076 98.3545 li
352.222 97.8467 li
352.359 97.3384 li
352.491 96.8301 li
352.617 96.3208 li
352.736 95.8115 li
352.849 95.3018 li
352.955 94.7915 li
353.055 94.2813 li
353.148 93.7705 li
353.235 93.2598 li
353.315 92.748 li
353.39 92.2368 li
353.457 91.7251 li
353.519 91.2129 li
353.573 90.7012 li
353.622 90.1885 li
353.664 89.6763 li
353.699 89.1636 li
353.729 88.6514 li
353.751 88.1387 li
353.768 87.6255 li
353.776 87.1128 li
353.78 86.6001 li
@
gsave
353.78 86.6001 mo
353.776 86.0869 li
353.768 85.5742 li
353.751 85.0615 li
353.729 84.5488 li
353.699 84.0361 li
353.664 83.5234 li
353.622 83.0112 li
353.573 82.499 li
353.519 81.9868 li
353.457 81.4751 li
353.39 80.9634 li
353.315 80.4517 li
353.235 79.9404 li
353.148 79.4297 li
353.055 78.9189 li
352.955 78.4082 li
352.849 77.8984 li
352.736 77.3887 li
352.617 76.8789 li
352.491 76.3701 li
352.359 75.8613 li
352.222 75.3535 li
352.076 74.8457 li
351.926 74.3384 li
351.769 73.8315 li
351.604 73.3252 li
351.435 72.8198 li
351.258 72.3145 li
351.075 71.8101 li
350.886 71.3057 li
350.69 70.8022 li
350.488 70.2993 li
350.28 69.7974 li
350.065 69.2959 li
349.845 68.7949 li
349.617 68.2949 li
349.384 67.7954 li
349.145 67.2969 li
348.898 66.7988 li
348.646 66.3018 li
348.388 65.8057 li
348.123 65.3101 li
347.853 64.8154 li
347.575 64.3218 li
347.292 63.8291 li
347.002 63.3369 li
346.707 62.8457 li
346.404 62.3555 li
346.097 61.8667 li
345.782 61.3784 li
345.462 60.8911 li
345.136 60.4048 li
344.803 59.9199 li
344.465 59.4355 li
344.12 58.9526 li
343.769 58.4707 li
343.412 57.9902 li
343.049 57.5103 li
342.681 57.0317 li
342.306 56.5547 li
341.924 56.0781 li
341.537 55.6035 li
341.145 55.1299 li
340.746 54.6572 li
340.341 54.186 li
339.931 53.7158 li
339.514 53.2476 li
339.091 52.7803 li
338.663 52.314 li
338.229 51.8496 li
337.789 51.3862 li
337.343 50.9243 li
336.891 50.4639 li
336.434 50.0049 li
335.971 49.5474 li
335.502 49.0913 li
335.026 48.6367 li
334.547 48.1836 li
334.061 47.7319 li
333.568 47.2817 li
333.071 46.8335 li
332.568 46.3862 li
332.06 45.9409 li
331.545 45.4971 li
331.025 45.0552 li
330.5 44.6147 li
329.969 44.1758 li
329.433 43.7388 li
328.891 43.3032 li
328.344 42.8696 li
327.791 42.4375 li
327.232 42.0073 li
326.669 41.5791 li
326.1 41.1523 li
325.525 40.7275 li
324.945 40.3042 li
324.36 39.8833 li
323.771 39.4639 li
323.175 39.0459 li
322.574 38.6304 li
321.968 38.2168 li
321.357 37.8047 li
320.74 37.395 li
320.119 36.9868 li
319.492 36.5811 li
318.86 36.1768 li
318.224 35.7749 li
317.582 35.375 li
316.936 34.9771 li
316.283 34.5811 li
315.627 34.187 li
314.965 33.7954 li
314.298 33.4053 li
313.627 33.0181 li
312.95 32.6323 li
312.269 32.249 li
311.583 31.8677 li
310.892 31.4888 li
310.196 31.1118 li
309.496 30.7373 li
308.791 30.3647 li
308.081 29.9946 li
307.367 29.6265 li
306.647 29.2607 li
305.924 28.897 li
305.196 28.5361 li
304.464 28.1772 li
303.727 27.8203 li
302.984 27.4663 li
302.238 27.1143 li
301.488 26.7646 li
300.733 26.4175 li
299.975 26.0728 li
299.211 25.73 li
298.443 25.3901 li
297.671 25.0527 li
296.895 24.7173 li
296.114 24.3848 li
295.329 24.0542 li
294.54 23.7266 li
293.747 23.4014 li
292.95 23.0786 li
292.149 22.7583 li
291.345 22.4404 li
290.535 22.125 li
289.723 21.8125 li
288.905 21.5024 li
288.085 21.1948 li
287.26 20.8896 li
286.432 20.5874 li
285.6 20.2876 li
284.764 19.9907 li
283.924 19.6963 li
283.08 19.4043 li
282.233 19.1152 li
281.382 18.8286 li
280.528 18.5449 li
279.67 18.2637 li
278.809 17.9854 li
277.944 17.7095 li
277.076 17.4365 li
276.204 17.1665 li
275.329 16.8989 li
274.45 16.6338 li
273.568 16.3721 li
272.684 16.1128 li
271.796 15.8564 li
270.904 15.6025 li
270.01 15.3521 li
269.111 15.104 li
268.211 14.8589 li
267.307 14.6167 li
266.399 14.377 li
265.49 14.1401 li
264.577 13.9067 li
263.661 13.6758 li
262.742 13.4478 li
261.82 13.2227 li
260.896 13.0005 li
259.969 12.7813 li
259.039 12.5649 li
258.106 12.3516 li
257.171 12.1406 li
256.233 11.9331 li
255.293 11.7285 li
254.35 11.5269 li
253.404 11.3281 li
252.456 11.1328 li
251.506 10.9399 li
250.553 10.75 li
249.598 10.5635 li
248.64 10.3799 li
247.68 10.1992 li
246.718 10.0215 li
245.753 9.84668 li
244.786 9.67529 li
243.818 9.50635 li
242.847 9.34082 li
241.874 9.17871 li
240.899 9.01904 li
239.923 8.86279 li
238.943 8.70947 li
237.963 8.55957 li
236.98 8.41211 li
235.996 8.26855 li
235.01 8.12744 li
234.021 7.98975 li
233.032 7.85498 li
232.041 7.72363 li
231.048 7.59521 li
230.053 7.46973 li
229.057 7.34766 li
228.06 7.22852 li
227.061 7.1123 li
226.06 7 li
225.058 6.89014 li
224.055 6.78369 li
223.05 6.68018 li
222.044 6.58008 li
221.036 6.4834 li
220.028 6.38965 li
219.019 6.29883 li
218.008 6.21143 li
216.996 6.12695 li
215.983 6.0459 li
214.97 5.96777 li
213.955 5.89307 li
212.939 5.82178 li
211.923 5.75342 li
210.905 5.68848 li
209.887 5.62646 li
208.868 5.56738 li
207.849 5.51221 li
206.828 5.45996 li
205.808 5.41064 li
204.785 5.36475 li
203.764 5.32227 li
202.741 5.28271 li
201.718 5.24609 li
200.694 5.21338 li
199.67 5.18359 li
198.646 5.15674 li
197.621 5.1333 li
196.597 5.11328 li
195.571 5.09619 li
194.546 5.08252 li
193.521 5.07227 li
192.495 5.06494 li
191.469 5.06104 li
190.443 5.06006 li
189.418 5.0625 li
188.393 5.06836 li
187.367 5.07715 li
186.342 5.08887 li
185.316 5.10449 li
184.291 5.12305 li
183.266 5.14453 li
182.242 5.16992 li
181.218 5.19775 li
180.194 5.22949 li
179.171 5.26416 li
178.148 5.30176 li
177.125 5.34277 li
176.104 5.38721 li
175.082 5.43457 li
174.062 5.48535 li
173.042 5.53955 li
172.022 5.59668 li
171.004 5.65674 li
169.986 5.72021 li
168.969 5.78711 li
167.953 5.85693 li
166.938 5.93018 li
165.923 6.00635 li
164.91 6.08594 li
163.898 6.16895 li
162.887 6.25439 li
161.876 6.34375 li
160.868 6.43604 li
159.86 6.53125 li
158.853 6.62988 li
157.848 6.73145 li
156.844 6.83643 li
155.841 6.94434 li
154.84 7.05566 li
153.84 7.16992 li
152.842 7.2876 li
151.845 7.4082 li
150.85 7.53174 li
149.855 7.65869 li
148.863 7.78906 li
147.873 7.92188 li
146.884 8.05811 li
145.897 8.19775 li
144.912 8.33984 li
143.928 8.48535 li
142.946 8.63428 li
141.967 8.78564 li
140.989 8.94043 li
140.013 9.09863 li
139.039 9.25928 li
138.067 9.42334 li
137.098 9.59033 li
136.13 9.76074 li
135.165 9.93359 li
134.201 10.1099 li
133.24 10.2891 li
132.281 10.4712 li
131.325 10.6563 li
130.371 10.8447 li
129.419 11.0361 li
128.47 11.23 li
127.523 11.4272 li
126.579 11.6274 li
125.637 11.8306 li
124.697 12.0366 li
123.761 12.2456 li
122.827 12.4575 li
121.896 12.6724 li
120.967 12.8906 li
120.041 13.1113 li
119.118 13.335 li
118.198 13.5615 li
117.281 13.791 li
116.366 14.0229 li
115.455 14.2583 li
114.546 14.4966 li
113.641 14.7373 li
112.738 14.981 li
111.839 15.2275 li
110.943 15.4771 li
110.05 15.7295 li
109.16 15.9844 li
108.273 16.2422 li
107.39 16.5029 li
106.51 16.7661 li
105.633 17.0322 li
104.76 17.3013 li
103.89 17.5728 li
103.023 17.8472 li
102.16 18.124 li
101.3 18.4038 li
100.444 18.6865 li
99.5918 18.9717 li
98.7432 19.2593 li
97.8975 19.5498 li
97.0562 19.8433 li
96.2183 20.1387 li
95.3843 20.4375 li
94.5537 20.7383 li
93.7271 21.042 li
92.9043 21.3481 li
92.0854 21.6572 li
91.2705 21.9688 li
90.4595 22.2822 li
89.6523 22.5991 li
88.8496 22.918 li
88.0503 23.2397 li
87.2554 23.5635 li
86.4648 23.8901 li
85.6777 24.2192 li
84.8955 24.5508 li
84.1167 24.8848 li
83.3428 25.2212 li
82.5728 25.5601 li
81.8071 25.9014 li
81.0459 26.2446 li
80.2886 26.5908 li
79.5361 26.939 li
78.7876 27.29 li
78.0439 27.6431 li
77.3047 27.9985 li
76.5693 28.3564 li
75.8394 28.7163 li
75.1133 29.0786 li
74.3921 29.4434 li
73.6753 29.8101 li
72.9634 30.1792 li
72.2559 30.5508 li
71.5532 30.9243 li
70.8555 31.2998 li
70.1621 31.6777 li
69.4736 32.0581 li
68.79 32.4404 li
68.1113 32.8247 li
67.437 33.2114 li
66.7681 33.6001 li
66.1035 33.9907 li
65.4443 34.3838 li
64.79 34.7788 li
64.1406 35.1758 li
63.4966 35.5747 li
62.8569 35.9756 li
62.2227 36.3789 li
61.5938 36.7837 li
60.9697 37.1909 li
60.3506 37.5996 li
59.7368 38.0107 li
59.1279 38.4233 li
58.5249 38.8379 li
57.9268 39.2549 li
57.3335 39.6733 li
56.7461 40.0933 li
56.1636 40.5156 li
55.5864 40.9395 li
55.0151 41.3652 li
54.4487 41.793 li
53.8877 42.2222 li
53.332 42.6533 li
52.7822 43.0864 li
52.2373 43.521 li
51.6982 43.957 li
51.1646 44.395 li
50.6367 44.835 li
50.1138 45.2759 li
49.5972 45.7188 li
49.0854 46.1636 li
48.5796 46.6099 li
48.0796 47.0576 li
47.585 47.5068 li
47.0957 47.9575 li
46.6128 48.4097 li
46.1353 48.8638 li
45.6636 49.3193 li
45.1973 49.7759 li
44.7368 50.2344 li
44.2822 50.6938 li
43.8335 51.1553 li
43.3906 51.6177 li
42.9536 52.0815 li
42.5225 52.5469 li
42.0967 53.0137 li
41.6772 53.4814 li
41.2637 53.9507 li
40.856 54.4214 li
40.4541 54.8931 li
40.0581 55.3662 li
39.6685 55.8408 li
39.2842 56.3164 li
38.9063 56.793 li
38.5347 57.271 li
38.1685 57.75 li
37.8086 58.2305 li
37.4551 58.7119 li
37.1069 59.1943 li
36.7656 59.6777 li
36.4297 60.1621 li
36.1001 60.6479 li
35.7769 61.1348 li
35.4595 61.6221 li
35.1484 62.1108 li
34.8438 62.6006 li
34.5449 63.0913 li
34.252 63.583 li
33.9658 64.0752 li
33.6855 64.5684 li
33.4116 65.0625 li
33.1436 65.5576 li
32.8823 66.0537 li
32.627 66.5503 li
32.3779 67.0479 li
32.1348 67.5459 li
31.8984 68.0449 li
31.668 68.5449 li
31.4443 69.0454 li
31.2266 69.5464 li
31.0151 70.0483 li
30.8101 70.5508 li
30.6113 71.0542 li
30.4189 71.5576 li
30.2329 72.062 li
30.0532 72.5669 li
29.8799 73.0723 li
29.7129 73.5786 li
29.5522 74.085 li
29.3979 74.5918 li
29.25 75.0996 li
29.1089 75.6074 li
28.9736 76.1157 li
28.8447 76.6245 li
28.7227 77.1338 li
28.6069 77.6436 li
28.4976 78.1533 li
28.3945 78.6636 li
28.2979 79.1738 li
28.2075 79.6851 li
28.1235 80.1963 li
28.0464 80.7075 li
27.9756 81.2192 li
27.9111 81.731 li
27.853 82.2427 li
27.8013 82.7549 li
27.7563 83.2676 li
27.7178 83.7798 li
27.6855 84.2925 li
27.6597 84.8052 li
27.6401 85.3179 li
27.6274 85.8306 li
27.6206 86.3438 li
27.6206 86.8564 li
27.6274 87.3691 li
27.6401 87.8818 li
27.6597 88.3945 li
27.6855 88.9072 li
27.7178 89.4199 li
27.7563 89.9326 li
27.8013 90.4448 li
27.853 90.957 li
27.9111 91.4692 li
27.9756 91.981 li
28.0464 92.4927 li
28.1235 93.0039 li
28.2075 93.5151 li
28.2979 94.0259 li
28.3945 94.5366 li
28.4976 95.0469 li
28.6069 95.5566 li
28.7227 96.0664 li
28.8447 96.5752 li
28.9736 97.084 li
29.1089 97.5928 li
29.25 98.1006 li
29.3979 98.6079 li
29.5522 99.1152 li
29.7129 99.6216 li
29.8799 100.127 li
30.0532 100.633 li
30.2329 101.138 li
30.4189 101.642 li
30.6113 102.146 li
30.8101 102.649 li
31.0151 103.151 li
31.2266 103.653 li
31.4443 104.155 li
31.668 104.655 li
31.8984 105.155 li
32.1348 105.654 li
32.3779 106.152 li
32.627 106.649 li
32.8823 107.146 li
33.1436 107.642 li
33.4116 108.137 li
33.6855 108.631 li
33.9658 109.125 li
34.252 109.617 li
34.5449 110.109 li
34.8438 110.599 li
35.1484 111.089 li
35.4595 111.578 li
35.7769 112.065 li
36.1001 112.552 li
36.4297 113.038 li
36.7656 113.522 li
37.1069 114.006 li
37.4551 114.488 li
37.8086 114.97 li
38.1685 115.45 li
38.5347 115.929 li
38.9063 116.407 li
39.2842 116.884 li
39.6685 117.359 li
40.0581 117.834 li
40.4541 118.307 li
40.856 118.778 li
41.2637 119.249 li
41.6772 119.719 li
42.0967 120.187 li
42.5225 120.653 li
42.9536 121.118 li
43.3906 121.582 li
43.8335 122.045 li
44.2822 122.506 li
44.7368 122.966 li
45.1973 123.424 li
45.6636 123.881 li
46.1353 124.336 li
46.6128 124.79 li
47.0957 125.242 li
47.585 125.693 li
48.0796 126.143 li
48.5796 126.59 li
49.0854 127.036 li
49.5972 127.48 li
50.1138 127.924 li
50.6367 128.365 li
51.1646 128.805 li
51.6982 129.243 li
52.2373 129.679 li
52.7822 130.113 li
53.332 130.547 li
53.8877 130.978 li
54.4487 131.407 li
55.0151 131.835 li
55.5864 132.261 li
56.1636 132.685 li
56.7461 133.106 li
57.3335 133.526 li
57.9268 133.945 li
58.5249 134.362 li
59.1279 134.776 li
59.7368 135.189 li
60.3506 135.601 li
60.9697 136.009 li
61.5938 136.416 li
62.2227 136.821 li
62.8569 137.225 li
63.4966 137.625 li
64.1406 138.024 li
64.79 138.421 li
65.4443 138.816 li
66.1035 139.209 li
66.7681 139.6 li
67.437 139.988 li
68.1113 140.375 li
68.79 140.76 li
69.4736 141.142 li
70.1621 141.521 li
70.8555 141.9 li
71.5532 142.275 li
72.2559 142.649 li
72.9634 143.021 li
73.6753 143.39 li
74.3921 143.757 li
75.1133 144.121 li
75.8394 144.483 li
76.5693 144.844 li
77.3047 145.201 li
78.0439 145.557 li
78.7876 145.91 li
79.5361 146.261 li
80.2886 146.609 li
81.0459 146.955 li
81.8071 147.299 li
82.5728 147.64 li
83.3428 147.979 li
84.1167 148.315 li
84.8955 148.649 li
85.6777 148.98 li
86.4648 149.31 li
87.2554 149.637 li
88.0503 149.96 li
88.8496 150.282 li
89.6523 150.601 li
90.4595 150.918 li
91.2705 151.231 li
92.0854 151.543 li
92.9043 151.852 li
93.7271 152.158 li
94.5537 152.462 li
95.3843 152.763 li
96.2183 153.061 li
97.0562 153.356 li
97.8975 153.65 li
98.7432 153.94 li
99.5918 154.229 li
100.444 154.514 li
101.3 154.796 li
102.16 155.076 li
103.023 155.353 li
103.89 155.627 li
104.76 155.898 li
105.633 156.168 li
106.51 156.434 li
107.39 156.697 li
108.273 156.958 li
109.16 157.216 li
110.05 157.471 li
110.943 157.723 li
111.839 157.973 li
112.738 158.219 li
113.641 158.463 li
114.546 158.703 li
115.455 158.941 li
116.366 159.177 li
117.281 159.409 li
118.198 159.639 li
119.118 159.865 li
120.041 160.089 li
120.967 160.31 li
121.896 160.527 li
122.827 160.742 li
123.761 160.954 li
124.697 161.163 li
125.637 161.369 li
126.579 161.572 li
127.523 161.772 li
128.47 161.97 li
129.419 162.164 li
130.371 162.355 li
131.325 162.544 li
132.281 162.729 li
133.24 162.911 li
134.201 163.09 li
135.165 163.267 li
136.13 163.439 li
137.098 163.609 li
138.067 163.776 li
139.039 163.94 li
140.013 164.102 li
140.989 164.26 li
141.967 164.414 li
142.946 164.565 li
143.928 164.715 li
144.912 164.86 li
145.897 165.002 li
146.884 165.142 li
147.873 165.278 li
148.863 165.411 li
149.855 165.541 li
150.85 165.668 li
151.845 165.792 li
152.842 165.912 li
153.84 166.03 li
154.84 166.145 li
155.841 166.256 li
156.844 166.363 li
157.848 166.469 li
158.853 166.57 li
159.86 166.669 li
160.868 166.764 li
161.876 166.856 li
162.887 166.945 li
163.898 167.031 li
164.91 167.114 li
165.923 167.193 li
166.938 167.27 li
167.953 167.343 li
168.969 167.413 li
169.986 167.479 li
171.004 167.543 li
172.022 167.604 li
173.042 167.66 li
174.062 167.715 li
175.082 167.766 li
176.104 167.813 li
177.125 167.857 li
178.148 167.898 li
179.171 167.936 li
180.194 167.971 li
181.218 168.002 li
182.242 168.03 li
183.266 168.056 li
184.291 168.077 li
185.316 168.096 li
186.342 168.111 li
187.367 168.123 li
188.393 168.132 li
189.418 168.138 li
190.443 168.14 li
191.469 168.139 li
192.495 168.135 li
193.521 168.128 li
194.546 168.117 li
195.571 168.104 li
196.597 168.087 li
197.621 168.066 li
198.646 168.043 li
199.67 168.017 li
200.694 167.986 li
201.718 167.954 li
202.741 167.917 li
203.764 167.878 li
204.785 167.835 li
205.808 167.789 li
206.828 167.74 li
207.849 167.688 li
208.868 167.633 li
209.887 167.573 li
210.905 167.512 li
211.923 167.446 li
212.939 167.378 li
213.955 167.307 li
214.97 167.232 li
215.983 167.154 li
216.996 167.073 li
218.008 166.988 li
219.019 166.901 li
220.028 166.811 li
221.036 166.717 li
222.044 166.62 li
223.05 166.52 li
224.055 166.416 li
225.058 166.31 li
226.06 166.2 li
227.061 166.088 li
228.06 165.972 li
229.057 165.853 li
230.053 165.73 li
231.048 165.605 li
232.041 165.477 li
233.032 165.345 li
234.021 165.21 li
235.01 165.072 li
235.996 164.932 li
236.98 164.787 li
237.963 164.641 li
238.943 164.49 li
239.923 164.337 li
240.899 164.181 li
241.874 164.021 li
242.847 163.859 li
243.818 163.693 li
244.786 163.524 li
245.753 163.354 li
246.718 163.179 li
247.68 163.001 li
248.64 162.82 li
249.598 162.637 li
250.553 162.45 li
251.506 162.26 li
252.456 162.067 li
253.404 161.872 li
254.35 161.673 li
255.293 161.472 li
256.233 161.267 li
257.171 161.06 li
258.106 160.849 li
259.039 160.635 li
259.969 160.419 li
260.896 160.199 li
261.82 159.978 li
262.742 159.752 li
263.661 159.524 li
264.577 159.293 li
265.49 159.06 li
266.399 158.823 li
267.307 158.583 li
268.211 158.341 li
269.111 158.096 li
270.01 157.848 li
270.904 157.598 li
271.796 157.344 li
272.684 157.087 li
273.568 156.828 li
274.45 156.566 li
275.329 156.301 li
276.204 156.033 li
277.076 155.764 li
277.944 155.49 li
278.809 155.215 li
279.67 154.937 li
280.528 154.655 li
281.382 154.371 li
282.233 154.085 li
283.08 153.796 li
283.924 153.504 li
284.764 153.209 li
285.6 152.912 li
286.432 152.612 li
287.26 152.311 li
288.085 152.005 li
288.905 151.697 li
289.723 151.388 li
290.535 151.075 li
291.345 150.76 li
292.149 150.441 li
292.95 150.121 li
293.747 149.799 li
294.54 149.474 li
295.329 149.146 li
296.114 148.815 li
296.895 148.482 li
297.671 148.147 li
298.443 147.81 li
299.211 147.47 li
299.975 147.127 li
300.733 146.782 li
301.488 146.436 li
302.238 146.086 li
302.984 145.733 li
303.727 145.38 li
304.464 145.022 li
305.196 144.664 li
305.924 144.303 li
306.647 143.939 li
307.367 143.573 li
308.081 143.205 li
308.791 142.835 li
309.496 142.463 li
310.196 142.088 li
310.892 141.711 li
311.583 141.332 li
312.269 140.951 li
312.95 140.567 li
313.627 140.182 li
314.298 139.795 li
314.965 139.404 li
315.627 139.013 li
316.283 138.619 li
316.936 138.223 li
317.582 137.825 li
318.224 137.425 li
318.86 137.023 li
319.492 136.619 li
320.119 136.213 li
320.74 135.805 li
321.357 135.396 li
321.968 134.983 li
322.574 134.569 li
323.175 134.154 li
323.771 133.736 li
324.36 133.316 li
324.945 132.896 li
325.525 132.473 li
326.1 132.048 li
326.669 131.621 li
327.232 131.192 li
327.791 130.763 li
328.344 130.33 li
328.891 129.896 li
329.433 129.461 li
329.969 129.024 li
330.5 128.585 li
331.025 128.145 li
331.545 127.703 li
332.06 127.259 li
332.568 126.813 li
333.071 126.366 li
333.568 125.918 li
334.061 125.468 li
334.547 125.017 li
335.026 124.563 li
335.502 124.108 li
335.971 123.652 li
336.434 123.195 li
336.891 122.736 li
337.343 122.275 li
337.789 121.813 li
338.229 121.351 li
338.663 120.886 li
339.091 120.42 li
339.514 119.952 li
339.931 119.484 li
340.341 119.014 li
340.746 118.543 li
341.145 118.07 li
341.537 117.597 li
341.924 117.122 li
342.306 116.646 li
342.681 116.168 li
343.049 115.689 li
343.412 115.21 li
343.769 114.729 li
344.12 114.247 li
344.465 113.764 li
344.803 113.28 li
345.136 112.795 li
345.462 112.309 li
345.782 111.822 li
346.097 111.333 li
346.404 110.844 li
346.707 110.354 li
347.002 109.863 li
347.292 109.371 li
347.575 108.878 li
347.853 108.384 li
348.123 107.89 li
348.388 107.395 li
348.646 106.898 li
348.898 106.401 li
349.145 105.903 li
349.384 105.404 li
349.617 104.905 li
349.845 104.405 li
350.065 103.904 li
350.28 103.402 li
350.488 102.9 li
350.69 102.397 li
350.886 101.894 li
351.075 101.39 li
351.258 100.886 li
351.435 100.38 li
351.604 99.8745 li
351.769 99.3682 li
351.926 98.8613 li
352.076 98.3545 li
352.222 97.8467 li
352.359 97.3384 li
352.491 96.8301 li
352.617 96.3208 li
352.736 95.8115 li
352.849 95.3018 li
352.955 94.7915 li
353.055 94.2813 li
353.148 93.7705 li
353.235 93.2598 li
353.315 92.748 li
353.39 92.2368 li
353.457 91.7251 li
353.519 91.2129 li
353.573 90.7012 li
353.622 90.1885 li
353.664 89.6763 li
353.699 89.1636 li
353.729 88.6514 li
353.751 88.1387 li
353.768 87.6255 li
353.776 87.1128 li
353.78 86.6001 li
clp
27.6201 4.14014 mo
27.6201 168.14 li
354.62 168.14 li
354.62 4.14014 li
cp
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 258 ]ct
[327 0 0 164 27.6201 89.8599 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 327 
/H 164 
/M[327 0 0 -164 0 164 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 327 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 327 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 327 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 327 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZ
U(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,
K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6
nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$
Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3
JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZ
U(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,
K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6
nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$
Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3
JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZ
U(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,
K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6
nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$
Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3
JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZ
U(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,
K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6
nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$
Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3
JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZ
U(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,
K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6
nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$
Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3
JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZ
U(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,
K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6
nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3JcLB&\,a\_Je*GDmLPR$
Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZU(?3$Jf94ZfG^djJcLi3
JcLB&\,a\_Je*GDmLPR$Jf:I(h>i--JcLB&JcLr6nIL3^Je,p5],H8>Jf=V,K`H])JcLB&JcP*:Qk+cZ
ZOd'Lndj[tJf94Zko0RDnf"P/JcLi3JcLB&\,a\_Je*GD"VVOa)&3hW&!\&b)Rp[h+!2g\-6Mjuh>i--
JcLB&JcMJE!!2ZknIL3^Je-ZJrY#GM)&XA.'D2mJ)M/ll)ZCf^-7g]&-6N"$rYgIjJcLB&JcLB&rVup!
qZ$Tsp&LHjJe,@%"VVUg)^-O,-NbY6'bg?Qi>R:dJf=%q"Wo'B0g%c$7fu%3-6N"$WrR_ONrXb3JcNXf
!!2ipb7B18L^sY&',;B,,mu4W1Gq0M1FjUf'bgESPo>5m^)@S*+!rNs5tk<_?XmGH9KY$V+8Qo4!.k3&
!.k3&!0R?P%tY=D&)n*)',;B,-T+(\r_<br:.mc)-Qa':'DrBQ)M/lq)@%?2/2g"*DLh_=$]9ReDH97c
-6F<J)ZCY/!.k3&!.k3&!:p0j!Vue`%tY>(%hom-0LA]KJWbb8JVK"p7l)M3)&3h`&)eFY)M/mt)AF_g
<cO+o_:$<9_8XKqHWioo/1)J;)QNji!07,3!.k3\!6Yn)%uUr(',;B,/OX-+Se&EUf#tt@ZClJC3@>sf
'bgQWPo>5m_&=.4-7h&OG,*.3lKdX!lfmTf]9-Sn4=hg$rYjVnJcLB&JcLB&X8i5$kQ(,`Je*GDj:<1C
)&j_T:2ZQ+bhqjSiR>u[P%I*6,p+!>'+YVc)M/ls)AjPI0g&WlYLhq&in)oDkj.K]VKPd%2Cp0V*uZ&O
!.k3&!.k3&!;lfu"WRm@!14:K&&&P]'d"SQ4'[E>_rUdprsAY_]ocV]1FjUdrX[s+Jf94ZoGSPn2EY#S
R)@tMhncauZ,"?<l-Pr1>"h%0rYhg;JcMDC!<`Gp!.k3&!6Y?H!?O$N,o-pa!!30$!6Yn)%u_#*',_r@
1KfI>g["\8$KJ::?;j0H-Q<^4Po>5m_AXC9/3HF+Q,VtKg:a>]VPC/o^Z":fS;hMl7kl)-h>i--JcP0<
"U,YS#Qb$s!.k3I!!a`06:!Xf.h)+OnIL3^Je-rR#SS(!-V&<Ve+i_<$M)KDMg8Pq1EdVH],H8>S/N7e
/3HFL[GU2l^SJ-R^p0f5Y0lOpb.F$a=opf;)MJ0C!6>-F#:2Dh,npag_Z58gL]@DUqu@'(!>RL]92A8L
4<O7sQk+cZ^CLP_)_3dNM7DX@rsJbb_4HKs;`c?A&)eFY)M/n#)B9hR9OF1.l/0+QXj?D3p;s\<_;Xb6
aJt567j].T!.k3G!!iWG87cjZ5pup1!.k3&!6kKN"roNk>]k!W67rQ<!6Yn)%uh),',;TL7q%FhlMpke
s8ViJi;NZ^m`_VlG[*EY'b?QJJf;NF*?QUd@saimlIrSAXk;sYbMpL:Ze+O$d'oB[5pdN,!.k3&!:Kmo
"<:4$Z`RFm&-8@&JcM\K$3:_m6t(RR7mSaApAb4)'Cu`d%tY>S%gWgd-U(13J[ae?rrV];nGW@pr7JNV
L1E@h)%RW-]c)J@SJiCg/4XT.T>BaK]r\*Vhn.du^SIsMjlt[AUM0cl//j3BJcNmm#ltZ-R_G4d1_9`,
!.k3-!!!&s!"/c,"!Tj!:.IT50c0Qa!=oj4%tY>-%g`si/OE3CI&u*$p\tX#ikr'^A32(T%iQPM)M/lZ
)YP'i-8A>:K;6-?jheO'ZJt`9^pg/>_;X_Cc(eu=//kPhJcMMF#R2Y\DcAVG&d.k.JcLB&bQ%qM)DF-5
4?GMP$MON$%hm1uJe*hO$5F^95"fF8U=]>Cq#:a!h70D7?9TYQ%iQOV)M/mF)BC.e:i:fY^YJ"k]r%[/
ZF$g;Up7u#l/9CJDF#flh>i--JcP3=#Qtb^-R^2]$NZh!JcMYJ#QYkq4$#;Q-Pc=T!=ok8%tY=D&*FH1
',_rF4%*5!ZJ,9OrsS2;X-IR$2('7P)BZX2Jf:4!)]pUn:hb*<^$"Lr]r%X0Z)jarWk[3PimP#i?NN_K
)MJ0C!6>-F":cY&*=rMY_Z58gJcP`L"r&XR2CBLMp&G.)%hkECJe,X-$5k-A3Bgc%XNTbsq>Up&kfKZa
CJHZ/%hBQs+64>l)M/n$)BC@p:h+C5_rL(?dD)cY]WIs+ZbbMahpSWZ>!*]AWrR_OT`>8u%l#%1"Te;s
JcLB&aT)GE)CH:-o`,()%i#c(%tY=P%gs$c,r7kX>_/cig>`5'qYU:&o%h*NL1*7r*tJl#)C?Po)M/mG
)BKtI6!A8TR).\Gjl+_3]r%R)Z,"cIlds+JDG2r,)VtIG!.k4:!!<?1!WeekJcMJE!!;`l!tPn['D2lf
%tY>T%jDZ%+YYuE;g"S=ajAVml2CY^rU/CWV1EM\1FF7T%iQ?;+28_G)P.id+!s*NBlT-?fBDPckN1L8
\\Gu4jm1g?YDQLR!]Cr8K`H])JcLB&JcP*:!tPn[':]Sb&&Ac#',;T:0KW3KNi]t4bL>;5q>9^=aKCPD
A4JL)*tJl#)Cuul)M/lZ)YY-V+!rm9<b[Pqc/\fh&a89/b/_ullfHBsUO-?<2B!L7!.k33!.k3&!4W%.
%fmCYcjt^=NXlL2'cA/H1IPJmR'*e,\@oo-eBlCMVNH7<=[">ZrX\uH!@AnW)M/mG)B0bF/3Ha4G*obh
jlksnlg!^!lg!BS]r%'49K`:mh>i--JcLB&JcM):!!3'!rXT#E'D;rg%tY>T%h96f)'LL^3D3n1Ocl*+
X8]7.XJ1`#Al(fG+WLCkrYbea+2AeH)P.iW+!rO$9Mf5LUV5%&e_K0`jU'u&c+Bj1EDSbPrYgIjJcLB&
JcLW-!!2rslN$nprtCq6Je,[.)\Wr*+X\co6rRE(CNtJgNfocpM03&k1G'af'E/OA)ZLoA)M/lZ)YY-h
+!r^)7ncs,NLZlJ\&6;3dacde[?u,@:cp9NrYhg;JcLi3JcLB&eGoRMlMpncquFnNJe*kP$PO6o+!E!h
6q^?V=Un\C@<-pJG\0l</LMh`(&\Z.)M/mG)B'\E0fD-a?ZpsWOd2<(T<c;J\#,.&:e*f+-N+k>!.k3&
!.k3&!1<fe!W)lq%fd::%tY=D&*FH.',;B,-S$l.r](KQ92eu%>Y[dQ1Fjan)\j%b&,dCH+2AeH)P.iP
+!rNs7ncrjraQLWJ;ohdR"Ka'>"h4?0d[t\rYgIjJcLB&JcLB&o)Jakq>gI)rtCt7Je,[.)A<i'+!i9d
0JbLB4%E%E;bK;91Fjap)]9;&r=AiFru^DBJf94ZpDOql-7h&@7o35i>$kujK8kk@DJ<9J5s-kQ+!:G"
WrR_ONrXb3JcO7"!!26_r"&`>e.7-ANXlL2'bqT*+!iKp2*!Z+5!hS"3A<$4,p+!>'bgKUr#5MUSf32!
`#9L8-718u2F1/C?XmS`EH,l+<_u:P2Cp1%+8d&6!.k3&!.k3&!36)"!V69k!VcZb%tY=D&*FK&'+#Bk
)&j_N1GCC4qC;[p)]9A(q[^:WJf:4!rZ;Fn/1`M<:g-mr;#3ig5qso;+9!2X)MJ0C!.k3&!.k4:!;d9,
';#ee&&/VY',))q)'Af)!@oJq+oWbj*uPe,'Di=;)?:lC)M/lZ)YG!P+!2gV/2mGs!DGfY4T7VL2Cp0s
+8ZtW!.k33!.k3&!71]G!U9[.%tY=M%gWg`'c@r4+XJE8,pE.-!uVge'D`6))M/mD)?q91-7gl04T7VH
4Sq#=/1)G\qAS2jJcLB&JcLB&WW;hqrVup!o`4LmJe*GDj:;>+'bqV^)u^o])]9A(p^atTJf:*s"!8j:
/GV%"2?PZb-6N+'rYgIjJcLB&JcLE'!!3'!quQBhQk+cZ^(1A\'bqT()u^`Q)Zprq'bg<Pi>R:dJf=8"
"Wo'</1`OT/Gq4)/1`+ipDU(4JcLi3JcLB&\,a\_Je*_LrtG;F!#bbRrtYPIoad<+Jf;ECru_.cr@Isq
ru^nPh>i--JcLB&JcLr6nIL3^Je-lPr=]/Gr"K)FrtG#8],H8>RMu,H!%.Ucs!IafpDX#LK`H])JcLB&
JcP*:Qk+cZ\e"cRrt#)BnIORsJf94Zn/D9Jru1kYnJ\G.JcLi3JcLB&\,a\_Je*GDrtFl4Po>5m\/PAh
n/C-`JcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3
JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rd
i>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIj
JcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_
Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5m
V&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3
JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rd
i>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIj
JcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_
Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5m
V&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3
JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rd
i>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIj
JcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_
Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5m
V&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3
JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rd
i>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIj
JcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_
Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3JcN:\b7B18Je.8[Po>5m
V&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcLB&JcLB&lN!:_Je+Rdi>R:dJf<8[WrR_ONrXb3
JcN:\b7B18Je.8[Po>5mV&J1jJcLB&JcLB&OoY"_Je*GDa:Gm$Jf94ZrYgIjJcN1YJ,~>

%%EndBinary
grestore
np
.8 lw
[.8 1.32 ] 0 dsh
190.7 5.06006 mo
190.7 5.06006 li
85.2729 24.4351 mo
190.7 24.4351 li
190.7 24.4351 li
190.7 24.4351 mo
296.127 24.4351 li
41.6685 53.6602 mo
190.7 53.6602 li
190.7 53.6602 li
190.7 53.6602 mo
339.731 53.6602 li
27.7832 86.6001 mo
190.7 86.6001 li
190.7 86.6001 li
190.7 86.6001 mo
353.617 86.6001 li
41.6685 119.54 mo
190.7 119.54 li
190.7 119.54 li
190.7 119.54 mo
339.731 119.54 li
85.2729 148.765 mo
190.7 148.765 li
190.7 148.765 li
190.7 148.765 mo
296.127 148.765 li
190.7 168.14 mo
190.7 168.14 li
190.7 168.14 mo
188.372 168.007 li
186.135 167.627 li
183.91 167.001 li
181.822 166.183 li
179.623 165.072 li
177.49 163.741 li
175.401 162.182 li
173.218 160.264 li
171.087 158.086 li
169.008 155.641 li
166.982 152.923 li
164.92 149.77 li
162.939 146.317 li
161.047 142.56 li
159.253 138.496 li
157.57 134.122 li
156.01 129.439 li
154.589 124.45 li
153.321 119.158 li
152.259 113.765 li
151.372 108.091 li
150.698 102.348 li
150.223 96.353 li
149.973 90.3247 li
149.946 84.2842 li
150.144 78.251 li
150.566 72.2471 li
151.189 66.4893 li
152.025 60.7974 li
153.076 55.1895 li
154.299 49.874 li
155.677 44.8584 li
157.193 40.147 li
158.902 35.5684 li
160.735 31.3076 li
162.597 27.5259 li
164.547 24.0469 li
166.576 20.8662 li
168.678 17.979 li
170.848 15.3794 li
172.958 13.1855 li
175.118 11.2505 li
177.334 9.56641 li
179.45 8.22559 li
181.627 7.10449 li
183.687 6.27539 li
185.862 5.63574 li
187.999 5.23926 li
189.775 5.08105 li
190.7 5.06006 li
190.7 5.06006 li
190.7 168.14 mo
186.044 168.007 li
181.569 167.627 li
177.12 167.001 li
172.943 166.183 li
168.892 165.17 li
164.908 163.953 li
160.967 162.525 li
157.06 160.877 li
153.187 158.999 li
149.354 156.88 li
145.786 154.655 li
142.251 152.186 li
138.953 149.616 li
135.698 146.796 li
132.67 143.883 li
129.705 140.715 li
126.965 137.458 li
124.44 134.122 li
122.007 130.531 li
119.797 126.867 li
117.805 123.138 li
116.025 119.35 li
114.383 115.315 li
112.969 111.231 li
111.78 107.105 li
110.815 102.944 li
110.071 98.7559 li
109.548 94.5474 li
109.245 90.3247 li
109.162 86.0967 li
109.297 81.8691 li
109.653 77.6494 li
110.228 73.4443 li
111.024 69.2617 li
112.043 65.1089 li
113.286 60.9922 li
114.754 56.9194 li
116.365 53.0889 li
118.186 49.311 li
120.221 45.5938 li
122.475 41.9443 li
124.954 38.3691 li
127.523 35.0493 li
130.31 31.811 li
133.324 28.6621 li
136.401 25.7686 li
139.709 22.9707 li
143.061 20.4243 li
146.655 17.979 li
150.286 15.7798 li
153.938 13.8169 li
157.872 11.9604 li
161.847 10.3354 li
165.869 8.93262 li
169.953 7.74365 li
174.136 6.75977 li
178.507 5.97656 li
182.71 5.45215 li
186.855 5.15039 li
190.7 5.06006 li
190.7 5.06006 li
190.7 168.14 mo
183.715 168.007 li
177.003 167.627 li
170.33 167.001 li
164.065 166.183 li
157.988 165.17 li
152.013 163.953 li
146.101 162.525 li
140.24 160.877 li
134.805 159.127 li
129.377 157.151 li
123.978 154.938 li
118.935 152.629 li
114.213 150.229 li
109.519 147.59 li
105.133 144.864 li
101.038 142.06 li
97.2192 139.183 li
93.6646 136.238 li
90.3652 133.231 li
87.1416 129.986 li
84.188 126.683 li
81.4985 123.326 li
79.0684 119.921 li
76.894 116.473 li
74.9717 112.987 li
73.3848 109.664 li
72.019 106.315 li
70.8726 102.944 li
69.9438 99.5557 li
69.2324 96.1523 li
68.7373 92.7388 li
68.458 89.3184 li
68.3945 85.895 li
68.5469 82.4727 li
68.915 79.0547 li
69.499 75.6445 li
70.2998 72.2471 li
71.3179 68.8652 li
72.5547 65.5029 li
74.0112 62.1641 li
75.6895 58.853 li
77.5908 55.5732 li
79.7178 52.3286 li
82.0737 49.124 li
84.6616 45.9629 li
87.4863 42.8501 li
90.5527 39.7896 li
93.8667 36.7866 li
97.4365 33.8462 li
101.271 30.9731 li
105.383 28.1733 li
109.786 25.4531 li
114.213 22.9707 li
118.935 20.5713 li
123.978 18.2612 li
129.028 16.1841 li
134.431 14.2012 li
139.839 12.4443 li
145.666 10.7881 li
151.539 9.35254 li
157.467 8.12744 li
163.482 7.10449 li
169.66 6.27539 li
176.188 5.63574 li
182.596 5.23926 li
187.928 5.08105 li
190.7 5.06006 li
190.7 5.06006 li
190.7 168.14 mo
200.013 168.007 li
208.962 167.627 li
217.86 167.001 li
226.214 166.183 li
234.315 165.17 li
242.283 163.953 li
250.166 162.525 li
257.979 160.877 li
265.227 159.127 li
272.464 157.151 li
279.227 155.08 li
285.979 152.775 li
292.301 150.382 li
298.228 147.904 li
303.786 145.351 li
308.998 142.727 li
314.175 139.866 li
318.996 136.937 li
323.475 133.944 li
327.62 130.895 li
331.227 127.975 li
334.553 125.011 li
337.603 122.007 li
340.381 118.968 li
342.892 115.895 li
345.138 112.792 li
347.12 109.664 li
348.842 106.513 li
350.222 103.541 li
351.374 100.554 li
352.302 97.5552 li
353.004 94.5474 li
353.481 91.5322 li
353.735 88.5132 li
353.765 85.4922 li
353.571 82.4727 li
353.153 79.4561 li
352.511 76.4458 li
351.644 73.4443 li
350.551 70.4541 li
349.232 67.478 li
347.687 64.5181 li
345.911 61.5776 li
343.765 58.4653 li
341.354 55.3813 li
338.677 52.3286 li
335.729 49.311 li
332.507 46.332 li
329.006 43.3955 li
325.222 40.5049 li
321.146 37.6636 li
316.771 34.8765 li
312.087 32.1475 li
307.083 29.4814 li
301.743 26.8828 li
296.049 24.3574 li
289.979 21.9106 li
283.5 19.5488 li
277.021 17.4194 li
270.107 15.3794 li
262.697 13.4365 li
255.26 11.7217 li
247.812 10.2236 li
239.711 8.82959 li
231.473 7.64941 li
223.012 6.67627 li
215.086 5.97656 li
206.681 5.45215 li
198.389 5.15039 li
190.7 5.06006 li
190.7 5.06006 li
190.7 168.14 mo
197.685 168.007 li
204.396 167.627 li
211.07 167.001 li
217.335 166.183 li
223.412 165.17 li
229.388 163.953 li
235.299 162.525 li
241.16 160.877 li
246.596 159.127 li
252.022 157.151 li
257.422 154.938 li
262.465 152.629 li
267.187 150.229 li
271.881 147.59 li
276.267 144.864 li
280.361 142.06 li
284.181 139.183 li
287.735 136.238 li
291.034 133.231 li
294.259 129.986 li
297.212 126.683 li
299.901 123.326 li
302.331 119.921 li
304.506 116.473 li
306.429 112.987 li
308.015 109.664 li
309.381 106.315 li
310.527 102.944 li
311.456 99.5557 li
312.168 96.1523 li
312.663 92.7388 li
312.942 89.3184 li
313.006 85.895 li
312.854 82.4727 li
312.485 79.0547 li
311.901 75.6445 li
311.101 72.2471 li
310.082 68.8652 li
308.845 65.5029 li
307.389 62.1641 li
305.711 58.853 li
303.81 55.5732 li
301.683 52.3286 li
299.326 49.124 li
296.738 45.9629 li
293.914 42.8501 li
290.848 39.7896 li
287.533 36.7866 li
283.964 33.8462 li
280.129 30.9731 li
276.017 28.1733 li
271.614 25.4531 li
267.187 22.9707 li
262.465 20.5713 li
257.422 18.2612 li
252.371 16.1841 li
246.969 14.2012 li
241.562 12.4443 li
235.733 10.7881 li
229.861 9.35254 li
223.933 8.12744 li
217.917 7.10449 li
211.739 6.27539 li
205.212 5.63574 li
198.804 5.23926 li
193.473 5.08105 li
190.7 5.06006 li
190.7 5.06006 li
190.7 168.14 mo
195.356 168.007 li
199.831 167.627 li
204.28 167.001 li
208.457 166.183 li
212.508 165.17 li
216.491 163.953 li
220.433 162.525 li
224.34 160.877 li
228.213 158.999 li
232.046 156.88 li
235.614 154.655 li
239.149 152.186 li
242.447 149.616 li
245.701 146.796 li
248.729 143.883 li
251.695 140.715 li
254.436 137.458 li
256.96 134.122 li
259.394 130.531 li
261.604 126.867 li
263.596 123.138 li
265.374 119.35 li
267.017 115.315 li
268.431 111.231 li
269.619 107.105 li
270.585 102.944 li
271.329 98.7559 li
271.852 94.5474 li
272.155 90.3247 li
272.238 86.0967 li
272.103 81.8691 li
271.747 77.6494 li
271.172 73.4443 li
270.375 69.2617 li
269.356 65.1089 li
268.114 60.9922 li
266.646 56.9194 li
265.035 53.0889 li
263.214 49.311 li
261.179 45.5938 li
258.925 41.9443 li
256.446 38.3691 li
253.877 35.0493 li
251.09 31.811 li
248.075 28.6621 li
244.998 25.7686 li
241.691 22.9707 li
238.34 20.4243 li
234.745 17.979 li
231.113 15.7798 li
227.461 13.8169 li
223.528 11.9604 li
219.553 10.3354 li
215.53 8.93262 li
211.447 7.74365 li
207.264 6.75977 li
202.893 5.97656 li
198.69 5.45215 li
194.544 5.15039 li
190.7 5.06006 li
190.7 5.06006 li
190.7 168.14 mo
193.028 168.007 li
195.266 167.627 li
197.49 167.001 li
199.578 166.183 li
201.777 165.072 li
203.91 163.741 li
205.998 162.182 li
208.182 160.264 li
210.313 158.086 li
212.392 155.641 li
214.418 152.923 li
216.479 149.77 li
218.461 146.317 li
220.354 142.56 li
222.146 138.496 li
223.83 134.122 li
225.39 129.439 li
226.812 124.45 li
228.079 119.158 li
229.141 113.765 li
230.028 108.091 li
230.702 102.348 li
231.178 96.353 li
231.428 90.3247 li
231.453 84.2842 li
231.256 78.251 li
230.833 72.2471 li
230.211 66.4893 li
229.375 60.7974 li
228.323 55.1895 li
227.101 49.874 li
225.723 44.8584 li
224.207 40.147 li
222.498 35.5684 li
220.665 31.3076 li
218.803 27.5259 li
216.853 24.0469 li
214.824 20.8662 li
212.723 17.979 li
210.552 15.3794 li
208.442 13.1855 li
206.282 11.2505 li
204.066 9.56641 li
201.949 8.22559 li
199.772 7.10449 li
197.713 6.27539 li
195.537 5.63574 li
193.401 5.23926 li
191.624 5.08105 li
190.7 5.06006 li
190.7 5.06006 li
190.7 168.14 mo
190.7 5.06006 li
190.7 5.06006 li
0 0 0 .31 cmyk
@
grestore
.8 lw
1 lj
190.7 86.6001 mo
190.7 90.1001 li
190.7 86.6001 mo
190.7 90.1001 li
149.93 86.6001 mo
149.909 90.1001 li
149.93 86.6001 mo
149.909 90.1001 li
109.16 86.6001 mo
109.117 90.0996 li
109.16 86.6001 mo
109.117 90.0996 li
68.3901 86.6001 mo
68.3257 90.0996 li
68.3901 86.6001 mo
68.3257 90.0996 li
313.01 86.6001 mo
313.074 90.0996 li
313.01 86.6001 mo
313.074 90.0996 li
272.24 86.6001 mo
272.283 90.0996 li
272.24 86.6001 mo
272.283 90.0996 li
231.47 86.6001 mo
231.491 90.1001 li
231.47 86.6001 mo
231.491 90.1001 li
0 0 0 1 cmyk
@
57.5098 94.0801 mo
60.1401 94.0801 li
60.1401 94.8799 li
57.5098 94.8799 li
57.5098 94.0801 li
57.5098 94.0801 li
cp
ef
61.8599 96.3901 mo
63.4702 96.3901 li
63.4702 90.8301 li
61.7202 91.1802 li
61.7202 90.2798 li
63.46 89.9302 li
64.4502 89.9302 li
64.4502 96.3901 li
66.0601 96.3901 li
66.0601 97.2197 li
61.8599 97.2197 li
61.8599 96.3901 li
61.8599 96.3901 li
cp
ef
71.1602 93.29 mo
71.6299 93.3901 72 93.6001 72.2598 93.9199 cv
72.52 94.2397 72.6602 94.6401 72.6602 95.1001 cv
72.6602 95.8198 72.4102 96.3799 71.9199 96.77 cv
71.4199 97.1602 70.7202 97.3501 69.8101 97.3501 cv
69.5 97.3501 69.1802 97.3198 68.8599 97.2598 cv
68.54 97.21 68.2002 97.1201 67.8599 97 cv
67.8599 96.0498 li
68.1299 96.21 68.4302 96.3301 68.7598 96.4102 cv
69.0801 96.4897 69.4199 96.5298 69.7798 96.5298 cv
70.3999 96.5298 70.8701 96.4102 71.1899 96.1699 cv
71.5098 95.9302 71.6802 95.5698 71.6802 95.1001 cv
71.6802 94.6802 71.5298 94.3398 71.23 94.1001 cv
70.9302 93.8599 70.5098 93.73 69.9702 93.73 cv
69.1201 93.73 li
69.1201 92.9199 li
70.0098 92.9199 li
70.4902 92.9199 70.8599 92.8301 71.1201 92.6299 cv
71.3799 92.4399 71.5098 92.1602 71.5098 91.79 cv
71.5098 91.4199 71.3701 91.1299 71.1099 90.9302 cv
70.8398 90.73 70.46 90.6299 69.9702 90.6299 cv
69.7002 90.6299 69.4102 90.6602 69.1001 90.7197 cv
68.79 90.7798 68.4502 90.8701 68.0801 90.9897 cv
68.0801 90.1099 li
68.4502 90.0098 68.7998 89.9302 69.1299 89.8799 cv
69.4502 89.8301 69.7598 89.7998 70.0601 89.7998 cv
70.7998 89.7998 71.3901 89.9697 71.8301 90.3101 cv
72.27 90.6499 72.4902 91.1099 72.4902 91.6899 cv
72.4902 92.0898 72.3701 92.4302 72.1401 92.71 cv
71.9102 92.9897 71.5801 93.1899 71.1602 93.29 cv
71.1602 93.29 li
cp
ef
74.4199 89.9302 mo
78.29 89.9302 li
78.29 90.7598 li
75.3198 90.7598 li
75.3198 92.5498 li
75.46 92.5 75.6099 92.46 75.75 92.4399 cv
75.8901 92.4199 76.04 92.3999 76.1802 92.3999 cv
76.9902 92.3999 77.6299 92.6299 78.1099 93.0698 cv
78.5898 93.52 78.8301 94.1201 78.8301 94.8799 cv
78.8301 95.6699 78.5801 96.2798 78.0898 96.71 cv
77.6001 97.1401 76.9102 97.3501 76.0298 97.3501 cv
75.7202 97.3501 75.4102 97.3198 75.0898 97.2798 cv
74.77 97.23 74.4502 97.1602 74.1099 97.0498 cv
74.1099 96.0601 li
74.3999 96.2197 74.7002 96.3398 75.02 96.4199 cv
75.3301 96.5 75.6602 96.5298 76.0098 96.5298 cv
76.5698 96.5298 77.02 96.3901 77.3501 96.0898 cv
77.6699 95.79 77.8398 95.3901 77.8398 94.8799 cv
77.8398 94.3799 77.6699 93.98 77.3501 93.6802 cv
77.02 93.3799 76.5698 93.23 76.0098 93.23 cv
75.75 93.23 75.48 93.2598 75.2202 93.3198 cv
74.96 93.3799 74.6899 93.4697 74.4199 93.5898 cv
74.4199 89.9302 li
74.4199 89.9302 li
cp
ef
101.43 94.0801 mo
104.06 94.0801 li
104.06 94.8799 li
101.43 94.8799 li
101.43 94.0801 li
101.43 94.0801 li
cp
ef
107.6 93.98 mo
108.04 93.98 108.39 93.8301 108.65 93.5298 cv
108.91 93.23 109.04 92.8101 109.04 92.2798 cv
109.04 91.7598 108.91 91.3398 108.65 91.04 cv
108.39 90.7397 108.04 90.5801 107.6 90.5801 cv
107.16 90.5801 106.81 90.7397 106.55 91.04 cv
106.29 91.3398 106.16 91.7598 106.16 92.2798 cv
106.16 92.8101 106.29 93.23 106.55 93.5298 cv
106.81 93.8301 107.16 93.98 107.6 93.98 cv
107.6 93.98 li
cp
105.64 97.0698 mo
105.64 96.1699 li
105.88 96.29 106.13 96.3799 106.39 96.4399 cv
106.64 96.5 106.89 96.5298 107.14 96.5298 cv
107.78 96.5298 108.28 96.3198 108.62 95.8799 cv
108.96 95.4399 109.16 94.7798 109.22 93.8799 cv
109.02 94.1602 108.78 94.3799 108.5 94.5298 cv
108.21 94.6802 107.89 94.75 107.54 94.75 cv
106.8 94.75 106.22 94.5298 105.8 94.0898 cv
105.38 93.6499 105.17 93.0498 105.17 92.2798 cv
105.17 91.54 105.39 90.9399 105.83 90.48 cv
106.27 90.0298 106.86 89.7998 107.6 89.7998 cv
108.44 89.7998 109.09 90.1299 109.53 90.77 cv
109.97 91.4199 110.2 92.3599 110.2 93.5801 cv
110.2 94.7397 109.92 95.6499 109.38 96.3301 cv
108.83 97.0098 108.1 97.3501 107.18 97.3501 cv
106.93 97.3501 106.68 97.3198 106.43 97.2798 cv
106.17 97.2397 105.91 97.1699 105.64 97.0698 cv
ef
114.2 89.7998 mo
115.01 89.7998 115.63 90.1299 116.07 90.77 cv
116.5 91.4199 116.72 92.3599 116.72 93.5801 cv
116.72 94.8101 116.5 95.75 116.07 96.3901 cv
115.63 97.0298 115.01 97.3501 114.2 97.3501 cv
113.38 97.3501 112.75 97.0298 112.32 96.3901 cv
111.89 95.75 111.68 94.8101 111.68 93.5801 cv
111.68 92.3599 111.89 91.4199 112.32 90.77 cv
112.75 90.1299 113.38 89.7998 114.2 89.7998 cv
114.2 89.7998 li
cp
114.2 90.5801 mo
113.69 90.5801 113.31 90.8301 113.05 91.3301 cv
112.79 91.8301 112.67 92.5801 112.67 93.5801 cv
112.67 94.5801 112.79 95.3301 113.05 95.8301 cv
113.31 96.3301 113.69 96.5801 114.2 96.5801 cv
114.71 96.5801 115.09 96.3301 115.35 95.8301 cv
115.6 95.3301 115.73 94.5801 115.73 93.5801 cv
115.73 92.5801 115.6 91.8301 115.35 91.3301 cv
115.09 90.8301 114.71 90.5801 114.2 90.5801 cv
ef
142.23 94.0801 mo
144.86 94.0801 li
144.86 94.8799 li
142.23 94.8799 li
142.23 94.0801 li
142.23 94.0801 li
cp
ef
148.86 89.9302 mo
150.1 89.9302 li
150.1 94.6802 li
151.14 94.6802 li
151.14 95.5 li
150.1 95.5 li
150.1 97.2197 li
149.12 97.2197 li
149.12 95.5 li
145.83 95.5 li
145.83 94.5498 li
148.86 89.9302 li
148.86 89.9302 li
cp
149.12 90.79 mo
146.63 94.6802 li
149.12 94.6802 li
149.12 90.79 li
ef
152.9 89.9302 mo
156.77 89.9302 li
156.77 90.7598 li
153.8 90.7598 li
153.8 92.5498 li
153.94 92.5 154.09 92.46 154.23 92.4399 cv
154.37 92.4199 154.52 92.3999 154.66 92.3999 cv
155.47 92.3999 156.11 92.6299 156.59 93.0698 cv
157.07 93.52 157.31 94.1201 157.31 94.8799 cv
157.31 95.6699 157.06 96.2798 156.57 96.71 cv
156.08 97.1401 155.39 97.3501 154.51 97.3501 cv
154.2 97.3501 153.89 97.3198 153.57 97.2798 cv
153.25 97.23 152.93 97.1602 152.59 97.0498 cv
152.59 96.0601 li
152.88 96.2197 153.18 96.3398 153.5 96.4199 cv
153.81 96.5 154.14 96.5298 154.49 96.5298 cv
155.05 96.5298 155.5 96.3901 155.83 96.0898 cv
156.15 95.79 156.32 95.3901 156.32 94.8799 cv
156.32 94.3799 156.15 93.98 155.83 93.6802 cv
155.5 93.3799 155.05 93.23 154.49 93.23 cv
154.23 93.23 153.96 93.2598 153.7 93.3198 cv
153.44 93.3799 153.17 93.4697 152.9 93.5898 cv
152.9 89.9302 li
152.9 89.9302 li
cp
ef
190.76 89.7998 mo
191.57 89.7998 192.19 90.1299 192.63 90.77 cv
193.06 91.4199 193.28 92.3599 193.28 93.5801 cv
193.28 94.8101 193.06 95.75 192.63 96.3901 cv
192.19 97.0298 191.57 97.3501 190.76 97.3501 cv
189.94 97.3501 189.31 97.0298 188.88 96.3901 cv
188.45 95.75 188.24 94.8101 188.24 93.5801 cv
188.24 92.3599 188.45 91.4199 188.88 90.77 cv
189.31 90.1299 189.94 89.7998 190.76 89.7998 cv
190.76 89.7998 li
cp
190.76 90.5801 mo
190.25 90.5801 189.87 90.8301 189.61 91.3301 cv
189.35 91.8301 189.23 92.5801 189.23 93.5801 cv
189.23 94.5801 189.35 95.3301 189.61 95.8301 cv
189.87 96.3301 190.25 96.5801 190.76 96.5801 cv
191.27 96.5801 191.65 96.3301 191.91 95.8301 cv
192.16 95.3301 192.29 94.5801 192.29 93.5801 cv
192.29 92.5801 192.16 91.8301 191.91 91.3301 cv
191.65 90.8301 191.27 90.5801 190.76 90.5801 cv
ef
228.54 89.9302 mo
229.78 89.9302 li
229.78 94.6802 li
230.82 94.6802 li
230.82 95.5 li
229.78 95.5 li
229.78 97.2197 li
228.8 97.2197 li
228.8 95.5 li
225.51 95.5 li
225.51 94.5498 li
228.54 89.9302 li
228.54 89.9302 li
cp
228.8 90.79 mo
226.31 94.6802 li
228.8 94.6802 li
228.8 90.79 li
ef
232.58 89.9302 mo
236.45 89.9302 li
236.45 90.7598 li
233.48 90.7598 li
233.48 92.5498 li
233.62 92.5 233.77 92.46 233.91 92.4399 cv
234.05 92.4199 234.2 92.3999 234.34 92.3999 cv
235.15 92.3999 235.79 92.6299 236.27 93.0698 cv
236.75 93.52 236.99 94.1201 236.99 94.8799 cv
236.99 95.6699 236.74 96.2798 236.25 96.71 cv
235.76 97.1401 235.07 97.3501 234.19 97.3501 cv
233.88 97.3501 233.57 97.3198 233.25 97.2798 cv
232.93 97.23 232.61 97.1602 232.27 97.0498 cv
232.27 96.0601 li
232.56 96.2197 232.86 96.3398 233.18 96.4199 cv
233.49 96.5 233.82 96.5298 234.17 96.5298 cv
234.73 96.5298 235.18 96.3901 235.51 96.0898 cv
235.83 95.79 236 95.3901 236 94.8799 cv
236 94.3799 235.83 93.98 235.51 93.6802 cv
235.18 93.3799 234.73 93.23 234.17 93.23 cv
233.91 93.23 233.64 93.2598 233.38 93.3198 cv
233.12 93.3799 232.85 93.4697 232.58 93.5898 cv
232.58 89.9302 li
232.58 89.9302 li
cp
ef
268.88 93.98 mo
269.32 93.98 269.67 93.8301 269.93 93.5298 cv
270.19 93.23 270.32 92.8101 270.32 92.2798 cv
270.32 91.7598 270.19 91.3398 269.93 91.04 cv
269.67 90.7397 269.32 90.5801 268.88 90.5801 cv
268.44 90.5801 268.09 90.7397 267.83 91.04 cv
267.57 91.3398 267.44 91.7598 267.44 92.2798 cv
267.44 92.8101 267.57 93.23 267.83 93.5298 cv
268.09 93.8301 268.44 93.98 268.88 93.98 cv
268.88 93.98 li
cp
266.92 97.0698 mo
266.92 96.1699 li
267.16 96.29 267.41 96.3799 267.67 96.4399 cv
267.92 96.5 268.17 96.5298 268.42 96.5298 cv
269.06 96.5298 269.56 96.3198 269.9 95.8799 cv
270.24 95.4399 270.44 94.7798 270.5 93.8799 cv
270.3 94.1602 270.06 94.3799 269.78 94.5298 cv
269.49 94.6802 269.17 94.75 268.82 94.75 cv
268.08 94.75 267.5 94.5298 267.08 94.0898 cv
266.66 93.6499 266.45 93.0498 266.45 92.2798 cv
266.45 91.54 266.67 90.9399 267.11 90.48 cv
267.55 90.0298 268.14 89.7998 268.88 89.7998 cv
269.72 89.7998 270.37 90.1299 270.81 90.77 cv
271.25 91.4199 271.48 92.3599 271.48 93.5801 cv
271.48 94.7397 271.2 95.6499 270.66 96.3301 cv
270.11 97.0098 269.38 97.3501 268.46 97.3501 cv
268.21 97.3501 267.96 97.3198 267.71 97.2798 cv
267.45 97.2397 267.19 97.1699 266.92 97.0698 cv
ef
275.48 89.7998 mo
276.29 89.7998 276.91 90.1299 277.35 90.77 cv
277.78 91.4199 278 92.3599 278 93.5801 cv
278 94.8101 277.78 95.75 277.35 96.3901 cv
276.91 97.0298 276.29 97.3501 275.48 97.3501 cv
274.66 97.3501 274.03 97.0298 273.6 96.3901 cv
273.17 95.75 272.96 94.8101 272.96 93.5801 cv
272.96 92.3599 273.17 91.4199 273.6 90.77 cv
274.03 90.1299 274.66 89.7998 275.48 89.7998 cv
275.48 89.7998 li
cp
275.48 90.5801 mo
274.97 90.5801 274.59 90.8301 274.33 91.3301 cv
274.07 91.8301 273.95 92.5801 273.95 93.5801 cv
273.95 94.5801 274.07 95.3301 274.33 95.8301 cv
274.59 96.3301 274.97 96.5801 275.48 96.5801 cv
275.99 96.5801 276.37 96.3301 276.63 95.8301 cv
276.88 95.3301 277.01 94.5801 277.01 93.5801 cv
277.01 92.5801 276.88 91.8301 276.63 91.3301 cv
276.37 90.8301 275.99 90.5801 275.48 90.5801 cv
ef
304.74 96.3901 mo
306.35 96.3901 li
306.35 90.8301 li
304.6 91.1802 li
304.6 90.2798 li
306.34 89.9302 li
307.33 89.9302 li
307.33 96.3901 li
308.94 96.3901 li
308.94 97.2197 li
304.74 97.2197 li
304.74 96.3901 li
304.74 96.3901 li
cp
ef
313.8 93.29 mo
314.27 93.3901 314.64 93.6001 314.9 93.9199 cv
315.16 94.2397 315.3 94.6401 315.3 95.1001 cv
315.3 95.8198 315.05 96.3799 314.56 96.77 cv
314.06 97.1602 313.36 97.3501 312.45 97.3501 cv
312.14 97.3501 311.82 97.3198 311.5 97.2598 cv
311.18 97.21 310.84 97.1201 310.5 97 cv
310.5 96.0498 li
310.77 96.21 311.07 96.3301 311.4 96.4102 cv
311.72 96.4897 312.06 96.5298 312.42 96.5298 cv
313.04 96.5298 313.51 96.4102 313.83 96.1699 cv
314.15 95.9302 314.32 95.5698 314.32 95.1001 cv
314.32 94.6802 314.17 94.3398 313.87 94.1001 cv
313.57 93.8599 313.15 93.73 312.61 93.73 cv
311.76 93.73 li
311.76 92.9199 li
312.65 92.9199 li
313.13 92.9199 313.5 92.8301 313.76 92.6299 cv
314.02 92.4399 314.15 92.1602 314.15 91.79 cv
314.15 91.4199 314.01 91.1299 313.75 90.9302 cv
313.48 90.73 313.1 90.6299 312.61 90.6299 cv
312.34 90.6299 312.05 90.6602 311.74 90.7197 cv
311.43 90.7798 311.09 90.8701 310.72 90.9897 cv
310.72 90.1099 li
311.09 90.0098 311.44 89.9302 311.77 89.8799 cv
312.09 89.8301 312.4 89.7998 312.7 89.7998 cv
313.44 89.7998 314.03 89.9697 314.47 90.3101 cv
314.91 90.6499 315.13 91.1099 315.13 91.6899 cv
315.13 92.0898 315.01 92.4302 314.78 92.71 cv
314.55 92.9897 314.22 93.1899 313.8 93.29 cv
313.8 93.29 li
cp
ef
317.3 89.9302 mo
321.17 89.9302 li
321.17 90.7598 li
318.2 90.7598 li
318.2 92.5498 li
318.34 92.5 318.49 92.46 318.63 92.4399 cv
318.77 92.4199 318.92 92.3999 319.06 92.3999 cv
319.87 92.3999 320.51 92.6299 320.99 93.0698 cv
321.47 93.52 321.71 94.1201 321.71 94.8799 cv
321.71 95.6699 321.46 96.2798 320.97 96.71 cv
320.48 97.1401 319.79 97.3501 318.91 97.3501 cv
318.6 97.3501 318.29 97.3198 317.97 97.2798 cv
317.65 97.23 317.33 97.1602 316.99 97.0498 cv
316.99 96.0601 li
317.28 96.2197 317.58 96.3398 317.9 96.4199 cv
318.21 96.5 318.54 96.5298 318.89 96.5298 cv
319.45 96.5298 319.9 96.3901 320.23 96.0898 cv
320.55 95.79 320.72 95.3901 320.72 94.8799 cv
320.72 94.3799 320.55 93.98 320.23 93.6802 cv
319.9 93.3799 319.45 93.23 318.89 93.23 cv
318.63 93.23 318.36 93.2598 318.1 93.3198 cv
317.84 93.3799 317.57 93.4697 317.3 93.5898 cv
317.3 89.9302 li
317.3 89.9302 li
cp
ef
359.24 75.1602 mo
360.05 75.1602 360.67 75.4897 361.11 76.1299 cv
361.54 76.7798 361.76 77.7197 361.76 78.9399 cv
361.76 80.1699 361.54 81.1099 361.11 81.75 cv
360.67 82.3901 360.05 82.71 359.24 82.71 cv
358.42 82.71 357.79 82.3901 357.36 81.75 cv
356.93 81.1099 356.72 80.1699 356.72 78.9399 cv
356.72 77.7197 356.93 76.7798 357.36 76.1299 cv
357.79 75.4897 358.42 75.1602 359.24 75.1602 cv
359.24 75.1602 li
cp
359.24 75.9399 mo
358.73 75.9399 358.35 76.1899 358.09 76.6899 cv
357.83 77.1899 357.71 77.9399 357.71 78.9399 cv
357.71 79.9399 357.83 80.6899 358.09 81.1899 cv
358.35 81.6899 358.73 81.9399 359.24 81.9399 cv
359.75 81.9399 360.13 81.6899 360.39 81.1899 cv
360.64 80.6899 360.77 79.9399 360.77 78.9399 cv
360.77 77.9399 360.64 77.1899 360.39 76.6899 cv
360.13 76.1899 359.75 75.9399 359.24 75.9399 cv
ef
365.04 75.1602 mo
365.24 75.1602 365.44 75.2002 365.64 75.2798 cv
365.83 75.3599 366 75.48 366.14 75.6201 cv
366.28 75.77 366.39 75.9399 366.47 76.1201 cv
366.55 76.3101 366.59 76.5098 366.59 76.7197 cv
366.59 77.1602 366.43 77.52 366.13 77.8198 cv
365.83 78.1201 365.46 78.2598 365.03 78.2598 cv
364.59 78.2598 364.22 78.1201 363.93 77.8198 cv
363.63 77.5298 363.49 77.1602 363.49 76.7197 cv
363.49 76.29 363.64 75.9199 363.94 75.6201 cv
364.24 75.3198 364.6 75.1602 365.04 75.1602 cv
365.04 75.1602 li
cp
365.04 75.79 mo
364.78 75.79 364.56 75.8799 364.38 76.0601 cv
364.2 76.2397 364.11 76.46 364.11 76.7197 cv
364.11 76.98 364.2 77.2002 364.38 77.3799 cv
364.56 77.5601 364.78 77.6401 365.04 77.6401 cv
365.3 77.6401 365.52 77.5601 365.7 77.3799 cv
365.88 77.2002 365.97 76.98 365.97 76.7197 cv
365.97 76.46 365.88 76.2397 365.7 76.0601 cv
365.52 75.8799 365.3 75.79 365.04 75.79 cv
ef
344.04 45.77 mo
344.51 45.8701 344.88 46.0801 345.14 46.3999 cv
345.4 46.7197 345.54 47.1201 345.54 47.5801 cv
345.54 48.2998 345.29 48.8599 344.8 49.25 cv
344.3 49.6401 343.6 49.8301 342.69 49.8301 cv
342.38 49.8301 342.06 49.7998 341.74 49.7397 cv
341.42 49.6899 341.08 49.6001 340.74 49.48 cv
340.74 48.5298 li
341.01 48.6899 341.31 48.8101 341.64 48.8901 cv
341.96 48.9697 342.3 49.0098 342.66 49.0098 cv
343.28 49.0098 343.75 48.8901 344.07 48.6499 cv
344.39 48.4102 344.56 48.0498 344.56 47.5801 cv
344.56 47.1602 344.41 46.8198 344.11 46.5801 cv
343.81 46.3398 343.39 46.21 342.85 46.21 cv
342 46.21 li
342 45.3999 li
342.89 45.3999 li
343.37 45.3999 343.74 45.3101 344 45.1099 cv
344.26 44.9199 344.39 44.6401 344.39 44.27 cv
344.39 43.8999 344.25 43.6099 343.99 43.4102 cv
343.72 43.21 343.34 43.1099 342.85 43.1099 cv
342.58 43.1099 342.29 43.1401 341.98 43.2002 cv
341.67 43.2598 341.33 43.3501 340.96 43.4697 cv
340.96 42.5898 li
341.33 42.4897 341.68 42.4102 342.01 42.3599 cv
342.33 42.3101 342.64 42.2798 342.94 42.2798 cv
343.68 42.2798 344.27 42.4502 344.71 42.79 cv
345.15 43.1299 345.37 43.5898 345.37 44.1699 cv
345.37 44.5698 345.25 44.9102 345.02 45.1899 cv
344.79 45.4697 344.46 45.6699 344.04 45.77 cv
344.04 45.77 li
cp
ef
349.64 42.2798 mo
350.45 42.2798 351.07 42.6099 351.51 43.25 cv
351.94 43.8999 352.16 44.8398 352.16 46.0601 cv
352.16 47.29 351.94 48.23 351.51 48.8701 cv
351.07 49.5098 350.45 49.8301 349.64 49.8301 cv
348.82 49.8301 348.19 49.5098 347.76 48.8701 cv
347.33 48.23 347.12 47.29 347.12 46.0601 cv
347.12 44.8398 347.33 43.8999 347.76 43.25 cv
348.19 42.6099 348.82 42.2798 349.64 42.2798 cv
349.64 42.2798 li
cp
349.64 43.0601 mo
349.13 43.0601 348.75 43.3101 348.49 43.8101 cv
348.23 44.3101 348.11 45.0601 348.11 46.0601 cv
348.11 47.0601 348.23 47.8101 348.49 48.3101 cv
348.75 48.8101 349.13 49.0601 349.64 49.0601 cv
350.15 49.0601 350.53 48.8101 350.79 48.3101 cv
351.04 47.8101 351.17 47.0601 351.17 46.0601 cv
351.17 45.0601 351.04 44.3101 350.79 43.8101 cv
350.53 43.3101 350.15 43.0601 349.64 43.0601 cv
ef
355.2 42.2798 mo
355.4 42.2798 355.6 42.3198 355.8 42.3999 cv
355.99 42.48 356.16 42.6001 356.3 42.7397 cv
356.44 42.8901 356.55 43.0601 356.63 43.2397 cv
356.71 43.4302 356.75 43.6299 356.75 43.8398 cv
356.75 44.2798 356.59 44.6401 356.29 44.9399 cv
355.99 45.2397 355.62 45.3799 355.19 45.3799 cv
354.75 45.3799 354.38 45.2397 354.09 44.9399 cv
353.79 44.6499 353.65 44.2798 353.65 43.8398 cv
353.65 43.4102 353.8 43.04 354.1 42.7397 cv
354.4 42.4399 354.76 42.2798 355.2 42.2798 cv
355.2 42.2798 li
cp
355.2 42.9102 mo
354.94 42.9102 354.72 43 354.54 43.1802 cv
354.36 43.3599 354.27 43.5801 354.27 43.8398 cv
354.27 44.1001 354.36 44.3198 354.54 44.5 cv
354.72 44.6802 354.94 44.7598 355.2 44.7598 cv
355.46 44.7598 355.68 44.6802 355.86 44.5 cv
356.04 44.3198 356.13 44.1001 356.13 43.8398 cv
356.13 43.5801 356.04 43.3599 355.86 43.1802 cv
355.68 43 355.46 42.9102 355.2 42.9102 cv
ef
297.96 12.8101 mo
297.96 13.71 li
297.71 13.5898 297.46 13.5 297.21 13.4399 cv
296.95 13.3799 296.7 13.3501 296.46 13.3501 cv
295.8 13.3501 295.3 13.5698 294.96 14.0098 cv
294.62 14.4502 294.42 15.1201 294.38 16 cv
294.57 15.7197 294.81 15.5 295.1 15.3501 cv
295.39 15.2002 295.71 15.1201 296.06 15.1201 cv
296.79 15.1201 297.37 15.3501 297.79 15.79 cv
298.21 16.23 298.43 16.8398 298.43 17.6001 cv
298.43 18.3501 298.2 18.9502 297.76 19.3999 cv
297.32 19.8501 296.73 20.0698 296 20.0698 cv
295.16 20.0698 294.51 19.75 294.07 19.1099 cv
293.62 18.4697 293.4 17.5298 293.4 16.2998 cv
293.4 15.1499 293.67 14.23 294.22 13.5498 cv
294.76 12.8701 295.5 12.52 296.42 12.52 cv
296.66 12.52 296.91 12.5498 297.17 12.5898 cv
297.42 12.6401 297.68 12.71 297.96 12.8101 cv
297.96 12.8101 li
cp
296 15.8999 mo
295.56 15.8999 295.21 16.0601 294.95 16.3599 cv
294.69 16.6602 294.56 17.0801 294.56 17.6001 cv
294.56 18.1299 294.69 18.5498 294.95 18.8501 cv
295.21 19.1499 295.56 19.2998 296 19.2998 cv
296.44 19.2998 296.79 19.1499 297.05 18.8501 cv
297.31 18.5498 297.44 18.1299 297.44 17.6001 cv
297.44 17.0801 297.31 16.6602 297.05 16.3599 cv
296.79 16.0601 296.44 15.8999 296 15.8999 cv
ef
302.12 12.52 mo
302.93 12.52 303.55 12.8501 303.99 13.4897 cv
304.42 14.1401 304.64 15.0801 304.64 16.2998 cv
304.64 17.5298 304.42 18.4697 303.99 19.1099 cv
303.55 19.75 302.93 20.0698 302.12 20.0698 cv
301.3 20.0698 300.67 19.75 300.24 19.1099 cv
299.81 18.4697 299.6 17.5298 299.6 16.2998 cv
299.6 15.0801 299.81 14.1401 300.24 13.4897 cv
300.67 12.8501 301.3 12.52 302.12 12.52 cv
302.12 12.52 li
cp
302.12 13.2998 mo
301.61 13.2998 301.23 13.5498 300.97 14.0498 cv
300.71 14.5498 300.59 15.2998 300.59 16.2998 cv
300.59 17.2998 300.71 18.0498 300.97 18.5498 cv
301.23 19.0498 301.61 19.2998 302.12 19.2998 cv
302.63 19.2998 303.01 19.0498 303.27 18.5498 cv
303.52 18.0498 303.65 17.2998 303.65 16.2998 cv
303.65 15.2998 303.52 14.5498 303.27 14.0498 cv
303.01 13.5498 302.63 13.2998 302.12 13.2998 cv
ef
307.92 12.52 mo
308.12 12.52 308.32 12.5601 308.52 12.6401 cv
308.71 12.7197 308.88 12.8398 309.02 12.98 cv
309.16 13.1299 309.27 13.2998 309.35 13.48 cv
309.43 13.6699 309.47 13.8701 309.47 14.0801 cv
309.47 14.52 309.31 14.8799 309.01 15.1802 cv
308.71 15.48 308.34 15.6201 307.91 15.6201 cv
307.47 15.6201 307.1 15.48 306.81 15.1802 cv
306.51 14.8901 306.37 14.52 306.37 14.0801 cv
306.37 13.6499 306.52 13.2798 306.82 12.98 cv
307.12 12.6802 307.48 12.52 307.92 12.52 cv
307.92 12.52 li
cp
307.92 13.1499 mo
307.66 13.1499 307.44 13.2397 307.26 13.4199 cv
307.08 13.6001 306.99 13.8198 306.99 14.0801 cv
306.99 14.3398 307.08 14.5601 307.26 14.7397 cv
307.44 14.9199 307.66 15 307.92 15 cv
308.18 15 308.4 14.9199 308.58 14.7397 cv
308.76 14.5601 308.85 14.3398 308.85 14.0801 cv
308.85 13.8198 308.76 13.6001 308.58 13.4199 cv
308.4 13.2397 308.18 13.1499 307.92 13.1499 cv
ef
292.23 155.52 mo
294.86 155.52 li
294.86 156.32 li
292.23 156.32 li
292.23 155.52 li
292.23 155.52 li
cp
ef
300.6 151.53 mo
300.6 152.43 li
300.35 152.31 300.1 152.22 299.85 152.16 cv
299.59 152.1 299.34 152.07 299.1 152.07 cv
298.44 152.07 297.94 152.29 297.6 152.73 cv
297.26 153.17 297.06 153.84 297.02 154.72 cv
297.21 154.44 297.45 154.22 297.74 154.07 cv
298.03 153.92 298.35 153.84 298.7 153.84 cv
299.43 153.84 300.01 154.07 300.43 154.51 cv
300.85 154.95 301.07 155.56 301.07 156.32 cv
301.07 157.07 300.84 157.67 300.4 158.12 cv
299.96 158.57 299.37 158.79 298.64 158.79 cv
297.8 158.79 297.15 158.47 296.71 157.83 cv
296.26 157.19 296.04 156.25 296.04 155.02 cv
296.04 153.87 296.31 152.95 296.86 152.27 cv
297.4 151.59 298.14 151.24 299.06 151.24 cv
299.3 151.24 299.55 151.27 299.81 151.31 cv
300.06 151.36 300.32 151.43 300.6 151.53 cv
300.6 151.53 li
cp
298.64 154.62 mo
298.2 154.62 297.85 154.78 297.59 155.08 cv
297.33 155.38 297.2 155.8 297.2 156.32 cv
297.2 156.85 297.33 157.27 297.59 157.57 cv
297.85 157.87 298.2 158.02 298.64 158.02 cv
299.08 158.02 299.43 157.87 299.69 157.57 cv
299.95 157.27 300.08 156.85 300.08 156.32 cv
300.08 155.8 299.95 155.38 299.69 155.08 cv
299.43 154.78 299.08 154.62 298.64 154.62 cv
ef
304.76 151.24 mo
305.57 151.24 306.19 151.57 306.63 152.21 cv
307.06 152.86 307.28 153.8 307.28 155.02 cv
307.28 156.25 307.06 157.19 306.63 157.83 cv
306.19 158.47 305.57 158.79 304.76 158.79 cv
303.94 158.79 303.31 158.47 302.88 157.83 cv
302.45 157.19 302.24 156.25 302.24 155.02 cv
302.24 153.8 302.45 152.86 302.88 152.21 cv
303.31 151.57 303.94 151.24 304.76 151.24 cv
304.76 151.24 li
cp
304.76 152.02 mo
304.25 152.02 303.87 152.27 303.61 152.77 cv
303.35 153.27 303.23 154.02 303.23 155.02 cv
303.23 156.02 303.35 156.77 303.61 157.27 cv
303.87 157.77 304.25 158.02 304.76 158.02 cv
305.27 158.02 305.65 157.77 305.91 157.27 cv
306.16 156.77 306.29 156.02 306.29 155.02 cv
306.29 154.02 306.16 153.27 305.91 152.77 cv
305.65 152.27 305.27 152.02 304.76 152.02 cv
ef
310.56 151.24 mo
310.76 151.24 310.96 151.28 311.16 151.36 cv
311.35 151.44 311.52 151.56 311.66 151.7 cv
311.8 151.85 311.91 152.02 311.99 152.2 cv
312.07 152.39 312.11 152.59 312.11 152.8 cv
312.11 153.24 311.95 153.6 311.65 153.9 cv
311.35 154.2 310.98 154.34 310.55 154.34 cv
310.11 154.34 309.74 154.2 309.45 153.9 cv
309.15 153.61 309.01 153.24 309.01 152.8 cv
309.01 152.37 309.16 152 309.46 151.7 cv
309.76 151.4 310.12 151.24 310.56 151.24 cv
310.56 151.24 li
cp
310.56 151.87 mo
310.3 151.87 310.08 151.96 309.9 152.14 cv
309.72 152.32 309.63 152.54 309.63 152.8 cv
309.63 153.06 309.72 153.28 309.9 153.46 cv
310.08 153.64 310.3 153.72 310.56 153.72 cv
310.82 153.72 311.04 153.64 311.22 153.46 cv
311.4 153.28 311.49 153.06 311.49 152.8 cv
311.49 152.54 311.4 152.32 311.22 152.14 cv
311.04 151.96 310.82 151.87 310.56 151.87 cv
ef
343.35 123.12 mo
345.98 123.12 li
345.98 123.92 li
343.35 123.92 li
343.35 123.12 li
343.35 123.12 li
cp
ef
350.52 122.33 mo
350.99 122.43 351.36 122.64 351.62 122.96 cv
351.88 123.28 352.02 123.68 352.02 124.14 cv
352.02 124.86 351.77 125.42 351.28 125.81 cv
350.78 126.2 350.08 126.39 349.17 126.39 cv
348.86 126.39 348.54 126.36 348.22 126.3 cv
347.9 126.25 347.56 126.16 347.22 126.04 cv
347.22 125.09 li
347.49 125.25 347.79 125.37 348.12 125.45 cv
348.44 125.53 348.78 125.57 349.14 125.57 cv
349.76 125.57 350.23 125.45 350.55 125.21 cv
350.87 124.97 351.04 124.61 351.04 124.14 cv
351.04 123.72 350.89 123.38 350.59 123.14 cv
350.29 122.9 349.87 122.77 349.33 122.77 cv
348.48 122.77 li
348.48 121.96 li
349.37 121.96 li
349.85 121.96 350.22 121.87 350.48 121.67 cv
350.74 121.48 350.87 121.2 350.87 120.83 cv
350.87 120.46 350.73 120.17 350.47 119.97 cv
350.2 119.77 349.82 119.67 349.33 119.67 cv
349.06 119.67 348.77 119.7 348.46 119.76 cv
348.15 119.82 347.81 119.91 347.44 120.03 cv
347.44 119.15 li
347.81 119.05 348.16 118.97 348.49 118.92 cv
348.81 118.87 349.12 118.84 349.42 118.84 cv
350.16 118.84 350.75 119.01 351.19 119.35 cv
351.63 119.69 351.85 120.15 351.85 120.73 cv
351.85 121.13 351.73 121.47 351.5 121.75 cv
351.27 122.03 350.94 122.23 350.52 122.33 cv
350.52 122.33 li
cp
ef
355.88 118.84 mo
356.69 118.84 357.31 119.17 357.75 119.81 cv
358.18 120.46 358.4 121.4 358.4 122.62 cv
358.4 123.85 358.18 124.79 357.75 125.43 cv
357.31 126.07 356.69 126.39 355.88 126.39 cv
355.06 126.39 354.43 126.07 354 125.43 cv
353.57 124.79 353.36 123.85 353.36 122.62 cv
353.36 121.4 353.57 120.46 354 119.81 cv
354.43 119.17 355.06 118.84 355.88 118.84 cv
355.88 118.84 li
cp
355.88 119.62 mo
355.37 119.62 354.99 119.87 354.73 120.37 cv
354.47 120.87 354.35 121.62 354.35 122.62 cv
354.35 123.62 354.47 124.37 354.73 124.87 cv
354.99 125.37 355.37 125.62 355.88 125.62 cv
356.39 125.62 356.77 125.37 357.03 124.87 cv
357.28 124.37 357.41 123.62 357.41 122.62 cv
357.41 121.62 357.28 120.87 357.03 120.37 cv
356.77 119.87 356.39 119.62 355.88 119.62 cv
ef
361.68 118.84 mo
361.88 118.84 362.08 118.88 362.28 118.96 cv
362.47 119.04 362.64 119.16 362.78 119.3 cv
362.92 119.45 363.03 119.62 363.11 119.8 cv
363.19 119.99 363.23 120.19 363.23 120.4 cv
363.23 120.84 363.07 121.2 362.77 121.5 cv
362.47 121.8 362.1 121.94 361.67 121.94 cv
361.23 121.94 360.86 121.8 360.57 121.5 cv
360.27 121.21 360.13 120.84 360.13 120.4 cv
360.13 119.97 360.28 119.6 360.58 119.3 cv
360.88 119 361.24 118.84 361.68 118.84 cv
361.68 118.84 li
cp
361.68 119.47 mo
361.42 119.47 361.2 119.56 361.02 119.74 cv
360.84 119.92 360.75 120.14 360.75 120.4 cv
360.75 120.66 360.84 120.88 361.02 121.06 cv
361.2 121.24 361.42 121.32 361.68 121.32 cv
361.94 121.32 362.16 121.24 362.34 121.06 cv
362.52 120.88 362.61 120.66 362.61 120.4 cv
362.61 120.14 362.52 119.92 362.34 119.74 cv
362.16 119.56 361.94 119.47 361.68 119.47 cv
ef
1 lw
2 lc
353.78 86.6001 mo
353.664 83.5234 li
353.315 80.4517 li
352.736 77.3887 li
351.926 74.3384 li
350.886 71.3057 li
349.617 68.2949 li
348.123 65.3101 li
346.404 62.3555 li
344.465 59.4355 li
342.306 56.5547 li
339.931 53.7158 li
336.891 50.4639 li
333.568 47.2817 li
329.969 44.1758 li
326.1 41.1523 li
321.968 38.2168 li
317.582 35.375 li
312.95 32.6323 li
308.081 29.9946 li
302.984 27.4663 li
297.671 25.0527 li
291.345 22.4404 li
284.764 19.9907 li
277.944 17.7095 li
270.904 15.6025 li
263.661 13.6758 li
256.233 11.9331 li
248.64 10.3799 li
240.899 9.01904 li
233.032 7.85498 li
225.058 6.89014 li
216.996 6.12695 li
208.868 5.56738 li
200.694 5.21338 li
192.495 5.06494 li
184.291 5.12305 li
176.104 5.38721 li
167.953 5.85693 li
159.86 6.53125 li
151.845 7.4082 li
143.928 8.48535 li
136.13 9.76074 li
128.47 11.23 li
120.967 12.8906 li
113.641 14.7373 li
106.51 16.7661 li
99.5918 18.9717 li
92.9043 21.3481 li
86.4648 23.8901 li
80.2886 26.5908 li
75.1133 29.0786 li
70.1621 31.6777 li
65.4443 34.3838 li
60.9697 37.1909 li
56.7461 40.0933 li
52.7822 43.0864 li
49.0854 46.1636 li
45.6636 49.3193 li
42.5225 52.5469 li
39.6685 55.8408 li
37.4551 58.7119 li
35.4595 61.6221 li
33.6855 64.5684 li
32.1348 67.5459 li
30.8101 70.5508 li
29.7129 73.5786 li
28.8447 76.6245 li
28.2075 79.6851 li
27.8013 82.7549 li
27.6274 85.8306 li
27.6855 88.9072 li
27.9756 91.981 li
28.4976 95.0469 li
29.25 98.1006 li
30.2329 101.138 li
31.4443 104.155 li
32.8823 107.146 li
34.5449 110.109 li
36.4297 113.038 li
38.5347 115.929 li
40.856 118.778 li
43.3906 121.582 li
46.6128 124.79 li
50.1138 127.924 li
53.8877 130.978 li
57.9268 133.945 li
62.2227 136.821 li
66.7681 139.6 li
71.5532 142.275 li
76.5693 144.844 li
81.8071 147.299 li
88.0503 149.96 li
94.5537 152.462 li
101.3 154.796 li
108.273 156.958 li
115.455 158.941 li
122.827 160.742 li
130.371 162.355 li
138.067 163.776 li
145.897 165.002 li
153.84 166.03 li
161.876 166.856 li
169.986 167.479 li
178.148 167.898 li
186.342 168.111 li
194.546 168.117 li
202.741 167.917 li
210.905 167.512 li
219.019 166.901 li
227.061 166.088 li
235.01 165.072 li
242.847 163.859 li
250.553 162.45 li
258.106 160.849 li
265.49 159.06 li
272.684 157.087 li
279.67 154.937 li
286.432 152.612 li
292.95 150.121 li
299.211 147.47 li
305.196 144.664 li
310.196 142.088 li
314.965 139.404 li
319.492 136.619 li
323.771 133.736 li
327.791 130.763 li
331.545 127.703 li
335.026 124.563 li
338.229 121.351 li
341.145 118.07 li
343.412 115.21 li
345.462 112.309 li
347.292 109.371 li
348.898 106.401 li
350.28 103.402 li
351.435 100.38 li
352.359 97.3384 li
353.055 94.2813 li
353.519 91.2129 li
353.751 88.1387 li
353.78 86.6001 li
353.78 86.6001 li
@
gsave
34.5 205.51 mo
347 205.51 li
347 189.89 li
34.5 189.89 li
34.5 205.51 li
cp
clp
34.46 205.508 mo
35.6807 205.508 li
345.72 205.508 li
346.939 205.508 li
346.939 189.884 li
345.72 189.884 li
35.6807 189.884 li
34.46 189.884 li
34.46 205.508 li
cp
0 0 0 0 cmyk
f
.01 lw
0 lc
0 lj
34.46 205.508 mo
35.6807 205.508 li
345.72 205.508 li
346.939 205.508 li
346.939 189.884 li
345.72 189.884 li
35.6807 189.884 li
34.46 189.884 li
34.46 205.508 li
cp
@
grestore
34.5 189.5 mo
34.5 205.5 li
346.5 205.5 li
346.5 189.5 li
cp
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 258 ]ct
[312 0 0 16 34.5 52.5 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 312 
/H 16 
/M[312 0 0 -16 0 16 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 312 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 312 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 312 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 312 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
r;ciuL]HQ;r;liu3<K?d"U,)8#RLeF$k3[W%hK<c'GM8t(Dn#-)B0Y:*?H:F+sS<X,pjue-n$Mo.k</'
/M8Y/0JP?^1BKBj2Z5T63<M<'4$<L*!'^BHs$6TMrBgNO"@GRG77R5Gr^_'$8kM`M9MJ5V:JXhc;cHas
<`iL/>?kKB@Us"]C2@d*E-$,FH$OacIXls"Je&G.(E4;6+XAEb.P3;/2)R?T5!VG$7nHBN:fC@r>$YEB
A7fLgCMn-6G'8.YIY!'&L5CeINK96fQ^XA6TV8-UVPk*+XKJ_1ZF%'K\@K8d^V@V%`W!n3ai_iPc-Oec
eC<%#f\,$6gtprHi8WeXjlY^hl0@U#m-a?3naZ2Ao_/"Rq>1!dr;-Birm^tOs8N#sr?hI?qYKsYna>`/
l/q'dio&YJg"4j+daHLhcd*LP,qCZ'2*4)o9/K:<<Eig;@qTUtGB\@_KSYGDOd)6'S=cRQW2Qf$Za@3N
\\#Vl^r"%2b0.uRd*gIqf%JdVh%&?#io9"YjQ>Ugkiq?sl1sZElMg&HkQ9o/jo+6>ir7p:hu;I6gt^W_
fETpXeC)dmci2/lb0%fF`=Bl)_nj.)_8!h$^:q@r^AbeH]"@sPs0r$:rj2R.riZ4$r2KapqPO:grhKFd
rM0@d"JMWeUSIga$_sSqVl$>iVlH_rWrB(1YHP18Yd1UA[C<ZW]">Ykrk\oYaN;TIcHjo;eH=LYhVJRq
ioT=gn*flAqYp@8rr<#rr;$*ZnF5c+iSE/=f$_mhc-+2K`50:)]tCth]",'GW;uSlquZg!rWN0'rs&H-
rs8T1!"*6E$OdFQ%M'*^&J>]j'bqK#(`F>4*$$.F+X/3Z-RgJo/M8\01,CgI3]]Ae5sdn,84cHM:Jk%k
=]ns8@V'1bC2Im1F*DqYJ:iK/M2[OXPEqW,T:_jTW2lu$Yd(RE\%0/brkAHKr;ciunGn.@quHZrr;nt]
!sAc2"pYD?#n%.N%M'']&J>cl'c%T&)&X>3*$$%@+!;aP,:"Q^-RU;j.4Qhu/1rM,/h\n51B''21c72i
2uYf>3]]>br]L6Fr]gEJs$?TMr^-cU77B]E8,c$c8P2TJ9MA/T:/?13;,U=l<E3(%=^,*8?=75QA7fRm
DJjE7FE`"UH[^EoJ:W:_&JZ*$)]^(I-RpSt0/>CB3'0;h6:+169MePa<ENF1?"%8UBP;1!EHHAIH$k'l
JV/]6MN*UVP*MB&R[p+FUSF]bWN<8*Yd1XE[^`l\^;%G!_SuMp!6Hn:bg"DYdF-Ooe^rI,gY:N?hr*GP
j5f=ak32'plg*p*n*ol;o(2MIpA"I[qu$BgrVZZ/s2G$;rr2jYr;?Efp[n"Dlg*ftjPo1Wh;$]8f@A<t
d*U+b)B^=V0JG@G5t=R@:fU_,?Xm_bEHcVQItWW6NKKHmS0"2mUSXofXKSt;\$ro[^VIY%`5p*EbKeJ_
e^i=)gA]n<hr*MRj5]4_k32$nl0@O/li-2Kl2BfIk2te(j8\-<iW%g7h?)KfgA]_/f%/@!da?D?bnJ7B
aMu3<_o'=+_83n&^V7Fs^:sT["1l+T\HKIP\$iaEZi.0.Y5PI"WW8snVZ3IkU]$qcU]-tjTqnKZU].%s
USalcVP^;iWi<"uri?X6YHY:9ZEpmF\%'#\]=l#Z_?\$#ai_cOcdDaB!SQ3+h?`-&k3ML)oCi%[q[!3$
s8;fjp[mqlnE]5qh:UB2da-1_bK.`B_83n"]Xtee\XNT6!;-Bj!rW6#"T8N(#6"l-#lY,G$4@4M$k3[W
&.fEd&el&q()If+)]Kbl*?ZLK+seQ`.4H_u/h\k51H%0Q3]oSl6:++38P;iT;,^Lu=^,3AAS5XjD/XK:
GC"[fK7eo8N0'-bQC488T;&3]X/iA,Z*_!L\\,WT^Au(J!<3)S!0[E]!W<'*!s8Z0"U52;#quYn$k3[W
%hK<c'GM8t(Dn#-)B0Y:*?H:F+sS<X,pjue-n$Mo.k</'/M8Y/0JP?^1BKBj2Z5T63<M<'4$<L*!'^BH
s$6TMrBgKN"%5RH7f>jV80:Dq8kViO9heAY:Jk"g<)lq!=BSj4>[CfIA7T:eCi3d$E-$,FH$OacIXls"
Je&G.(E4;6+XAEb.P3;/2)R?T5!VG$7nHBN:fC@r>$YEBA7fLgCMn-6G'8.YIY!'&L5CeINK96fQ^XA6
TV8-UVPpJqY-,"7['mEQ\\,Yk^VRe+rl5erb08,TcdC1jeCE1'g"Y9:hV[8Lio:p;jlY^hl0@U#m-a?3
naZ2Ao_/"Rq>1!dr;-Biri#kOs8N#srDNRkqYKsYna>`/l/q'dio&YJg"4j+daHLhcd*LP,qCZ'2*4)o
91r)]>@1`IB5DR3GC"alLkq%QPaIu2T;/6]W3!2/[(!NT]>).s_SjO<b6Z;:d*gIqf%JdVh%&?#io9"Y
jQ>Ugkiq?sl1sZElMg&HkQ9o/jo+6>ir7p:hu;I6gt^W_fETpXeC)dmci20&b0%fF`Poa4_8*n'^VR\!
^;%Crrk/?D]DfA@\,Wo9Zi.0.Y5PI$WWK3#Vu!:jV#I.fUA^kdU'.0cUna^aU^NrpV5L2fW2HYpWiH'"
&$N1@Z*:O?ZaI9P]"5Me_#D1U`5p'Cb0J>\rm_&&gA]q7ioT=gn*flAqYp@5rr<#rr;$*ZnF5c+iSE/=
f$_mhc-+2K`50:)]tCrY]=PP,!7_)B!W3#t"9&H%"oef+#QG)/#qQDk$OdFQ%M'*^&J>]j'bqK#(`F>4
*$$.F+X/3Z-RgJo/M8\01,CgI3]]A_5!_M%77^!C:JXhd<`rR0?=IJYB52:%F)uPOI=Qs&L5CkNOHYuu
S=cFJVPpPrXg#(;\$ro\^&GbH_#495!Q>&<!;urs!ZhFG"9er5#7(VB$OdIS%hB3`&el#p()If*)&aG6
*?#q>+!;aP,:"Q^-RU;j.4Qhu/1rM,/h\n51B''21c72i2uYf>3]]>br]L6Fr]gEJs$?TMr^-cU77B]E
8,c%28P2TJ9MA/T:/=Y_;H$Op<E<4)>?b?=?t*YWAnl."DK'Z=GBnI\IXZftJV$o5&JZ*$)]^(I-RpSt
0/>CB3'0;h6:+169MePa<ENF1?"%8UBP;1!EHHAIH$k'lJV/]6MN*UVP*MB&R[p+FUSF]bWN<8*Yd1XE
[^`l\^;%G!_SuMp,g"3Qc-=S^daZdsf@\d2gYCZCi8EVTjQ5OdkiqBulg4'.nF6nVo(2MIpA"I[qu$Bg
rVZY`s69R_rr2k#r;?Efp[n"Dlg*ftjPo1Wh;$]8f@A<td*U+b)B^=V0JG@G5t=R@:fU_,?Xm_bEHcVQ
ItWW6NKKHmS=H4HV5U>oYHtUF\%0,c^qdh*aND]LcHt"if%/O.rnRV4i!eW)j5]4_k32$nl0@O/li-2K
l2BfIk2te(j8\-<iW%g7h?)KfgA]_/f%/@!da?D?bnJ7BaMu3<_o'=+_83n&^V7Fs^:sT[!P5oB\c9/=
[f3W3Z2Up)XSf'uVu!:jV#R1iU]$qcU]-tjTqnKZU].%sUSalcVP^;iWi<"uri?X6YHY:9ZEpmF\%'#\
]=l#Z_?\$#ai_cOcdDaB!SQ3+h?`-&k3ML)oCi%[q]Yt=s8;fjp[mtElfR0^f\"d'ccs_XaN)68_8![r
]=YYbp&K[EirJ`QquZg!rWN0'rs&H-rs8T13XQ6&$k*RT%hK9a&eYln'c%T&)B0V8*?ZLK+seQ`.4H_u
/h\k51H%0Q3]oSl6:++38P;iT;,^Lu.Tot^@V'1bC2Im1F*DqYJ:iK/M2[OXPEqW,T:_jTW2lu$Yd(RE
\%0/brkAHKr;ciu[fEl;r;liu/->tW"U,)8#RLeF$k3[W%hK<c'GM8t(Dn#-)B0Y:*?H:F+sS<X,pjue
-n#KQ.P!##/hJ\.0/,+9r\FU42)bClr]('A3]fJ'4TI\F5Q="K62a.L6N]_F77R5Gr^]CJ8kM`M9MJ5V
:JXhc;cHas<`iL/>?kKB@Us"]C2@d*E-$,FH$OacIXls"Je&G.(E4;6+XAEb.P3;/2)R?T5!VG"6:XU@
:f((j=B]!9@:Wt`BPVL*FEVhQI"$WtK8,5?NK'!^Q'[r.SY2[OUSauhXKJ_1ZF%'K\@K8d^V@V%`W!n3
ai_iPc-OeceC<%#f\,$6gtprHi8WeXjlY^hl0@U#m-a?3naZ2Ao_/"Rq>1!dr;-Bkrr;tNs8W,urr2k#
r;?Efp[n"Dlg*ftjPo1Wh;$]8f@A<td*U+b)B^=V0JG@G5t=R@:fU_,?Xm_bEHcVQItWW6NKKHmS=H4H
V5U>oYHtUF\%0,c^qdh*aND]LcHt"if%/O.rnS(Ai8WbVj5f@bkih9qlKS-1!:'ULrosCF!p8Y,rT!q;
ro*n7rn[_3gtMb[#1hATdaHOhrll,!b/hTA`P]U0^qmk%_8!^u^V7G]]`G^Vrji'<s0hp5rNZ@)rN,ps
!2o[js.oXhrM'7crh9OhUnjc\rhKRiV?s)sVP^;iWi<"uri?X6YHY:9ZEpmF\%'#\]=l#Z_?\$#ai_cO
cdDaB!SQ3+h?`-&k3ML)oCi%[q]Yt=s8;fjp[mtElfR0^f\"d'ccs_XaN)68_8![r]=YYbhuJ?/q#L'g
quZg!rWN0'rs&H-rs8T1:^RR<$k*RT%hK9a&eYln'c%T&)B0V8*?ZLK+seQ`.4H_u/h\k51H%0Q3]oSl
6:++38P;iT;,^Lu=^,3AAS5XjD/XK:GC"[fK7eo8N0"a8PEqW,T:_jTW2lu$Yd(RE\%0/brkAHKr;ciu
T`E=;r;liu3<K?d"U,)8#RLeF$k3[W%hK<c'GM8t(Dn#-)B0Y:*?H:F+sS<X,pjue-n$Mo.k</'/M8Y/
0JP?^1BKBj2Z>W82uYf>3]]>br]L6Fr]gEJs$?TMr^-cU77B]E8,c%^8P2TJ9MA/T:/=Y_;H$Op<E<4)
>?b?=?t*YWAnl."DK'Z=GBnI\IXZftJV"CE'c.f.*?c[U.Om#'1,UpK4$Gnr6:XU@:f((j=B]!9@:Wt`
BPVL*FET-WH$k'lJV/]6MN*UVP*MB&R[p+FUSF]bWN<8*Yd1XE[^`l\^;%G!_SuMp0ZhJ]c-=S^daZds
f@\d2gYCZCi8EVTjQ5OdkiqBulg4'.nF?&>oCVbMq"ad`r;?Eir;Q*`QN-s`rr!<(r;-9ao^VA8lfmQm
i_AFjh;$]8f@A<td*U+b)B^=V0JG@G5t=R@:fU_,?Xm_bEHcVQItWW6NKKHmS=H4HV5U>oYHtUF\%0,c
^qdh*aND]LcHt"if%/O.rnS(Ai8WbVj5f@bkih9qlKS-1rp'LIrTF=Fk2lR%s5O%:!8de6rn[_3gtMb[
#1hATdaHOhrll,!b/hTA`P]U0^qmk%_8!^u^V7G]]`G^Vrji'<s0hp5rNZ@)rN,ps!2o[js.oXhrM'7c
rh9OhUnjc\rhKpsVPU2fVPpDmWN)utX9c#5Yd(F<Za7%D\%'#\]=l#Z_?\$#ai_cOcdDaB!SQ3+h?`-&
k3ML)oCi%[q]Yt=s8;fjp[mtElfR0^f\"d'ccs_XaN)68_8![r]=YYbaoIM'o`>'orW<$#rWN0'rs&H-
rs8T1AdSnR$k*RT%hK9a&eYln'c%T&)B0V8*?ZLK+seQ`.4H_u/h\k51H%0Q3]oSl6:++38P;iT;,^Lu
=^,3AAS5XjD/XK:GC"[fK7eo8N0'-bQC488T;&3]X/iA,Z*_!L\\,Vj!l)Lcr;ciuMZDc;r;liu3<K?d
"U,)8#RLeF$k3[W%hK<c'GM8t(Dn#-)B0Y:*?H:F+sS<X,pjue-n$Mo.k</'/M8Y/0JP?^1BKBj2Z5T6
3<M<'4$<L*!'^BHs$6TMr^$TOr^-cU77B]E8,c%t8P2TJ9MA/T:/=Y_;H$Op<E<4)>?b?=?t*YWAnl."
DK'Z=GBnI\IXZftJV"CE'c.f.*?c[U.Om#'1,UpK4$Gnr6:XU@:f((j=B]!9@:Wt`BPVL*FEVhQI"$Wt
K8,5?NK'!^Q'[r.SY2[O'VhP(WN<8*Yd1XE[^`l\^;%G!_SuMp0ZhJ]c-=S^daZdsf@\d2gYCZCi8EVT
jQ5OdkiqBulg4'.nF?&>oCVbMq"ad`r;?Eir;P=JXT/;!rr!f6r;-9ao^VA8lfmQmio8nPgtC<2e^Dmm
d*L$&)B^=V0JG@G5t=R@:fU_,?Xm_bEHcVQItWW6NKKHmS=H4HV5U>oYHtUF\%0,c^qdh*aND]LcHt"i
f%/O.rnS(Ai8WbVj5f@bkih9qlKS-1rp'LIrTF=Fk2lR%s5O%:s53h4!o2Sbrn%>(f$r+Lda?D?bnJ7B
aMu3<_o'=+_83n&^V7Fs^:sT[!P5oB\c9/=[f3W3Z2Up)XSf'uVu!:jV#I.fUA^kdU'.0cUna^aU^Nrp
V5L2fW2HYpWiH'"&$N1@Z*:O?ZaI9P]"5Me_#D1Q`5p'C"3Sp8dJhYsg"QG^#iat.lgO<6pA4dc+o_NA
r;?Bbo^MA9k2G.Kf[eKsc-=GQa2Gg1^V.:l]=PPc!1j2`!W3#t"9&H%"oef+#QG)/$"XGO$OdFQ%M'*^
&J>]j'bqK#(`F>4*$$.F+X/3Z-RgJo/M8\01,CgI3]]Ae5sdn,84cHM:Jk%k=]ns8@V'1bC2Im1F*DqY
J:iK/M2[OXPEqW,T:_jTW2lu$Yd(RE\%0/brkAHKr;ciuquD<KnGrLgr;nt]!sAc2"pYD?#n%.N%M'']
&J>cl'c%T&)&X>3*$$%@+!;aP,:"Q^-RU;j.4Qhu/1rM,/h\n51B''21c72i2uYf>3]]>br]L6Fr]gEJ
s$?TMr^-cU77B]E8,l,/84cEG92&#R9hnJ[;,U=l<E3(%=^,*8?=75QA7fRmDJjE7FE`"UH[^EoJ:W:_
&JZ*$)]^(I-RpSt0/>CB3'0;h6:+169MePa<ENF1?"%8UBP;1!EHHAIH$k'lJV/]6MN*UVP*MB&R[p+F
USF]bWN<8*Yd1XE[^`jP]Y;.q_8=1ja"YWXbg"DYdF-Ooe^rI,gY:N?hr*GPj5f=ak32'plg*p*n*ol;
o(2MIpA"I[qu$BgrVZZ:s1870rr2jNr;?Efp[n"Dlg*ftjPo1Wh;$]8f@A<td*U+b)B^=V0JG@G5t=R@
:fU_,?Xm_bEH`jUH@LU(LlIO]R%0\=USXofXKSt;\$ro[^VIY%`5p*EbKeJ_e^i=)gA]n<hr*MRj5]4_
k32$nl0@O/li-2Kl2BfIk2te(j8\-<iW%g7h?)KfgA]_/f%/@!da?D?bn%t>aMu3<_o'=+_83n&^V0fa
^V7G]]`G^Vrji'<s0hp5rNZ@)rN,ps!2o[js.oXhrM'7crh9OhUnjc\rhKpsVPU2fVPpDmWN)utX:MM<
Yd(F<Za7'K\@T8`]tjWa#K4^*b0&#UdJhYsg"QG^$0((/lgO<6pA4Y2qtpBms8;fjp[mtElfR0^f\"d'
ccs_XaN)68_8![r]=YYbV?!t'o`=slr<*$%r<<3*rWiH/rWrr>$O[@O%1Wm[&.oOX&el&q()If+)]Kb;
+<_mP,pjug.4Qo%0/#(:2E*ZX4?c%t6:FF:92A>\;c[%(>@(cMB4ksrDf]uDH@:<rK8,5AOH>ZlR@KnA
U8FliX0&V2[(!NT]Y4<Z!5SO5rrM6^L]IASrrP7`!WrN-"U,)8#RLeF$k3[W%hK<c'GM8t(Dn#-)B0Y:
*?H:F+sS<X,pjue-n$Mo.k</'/M8Y/0JP?^1BKBj2Z5T63<M<'4$<L*!'^BHs$6TMrBgKN"%5RH7f>jV
8/+Wf8kViO9heAY:Jk"g<)lq!=BSjH>?kKB@Us"]C2@d*E-$,FH$OacIXls"Je&G.(E4;6+XAEb.P3;/
2)R?T5!VG$7nHBN:fC@r>$YEBA7fLgCMn-6G'8.YIY!'&L5CeINK96fQ^XA6TV8-UVPpJqY-,"7['mEQ
\\,Yk^VRe+rl5Dgb08,TcdC1jeCE.rf\,$6gtprHi8WeXjlY^hl0@U#m-a?3naZ2Ao_/"Rq>1!dr;-Bi
rj2XOs8N#srC?e`qYKsYna>`/l/q'dio&YJg"4j+daHLhcd*LP,qCZ'2*4)o91r)]>@1`IB5DR3GC"al
Lkq%QPaIu2T;/6]W3!2/['p^X\\#Vl^r"%2b0.uRd*gIqf%JdVh%&?#io9"YjQ>Ugkiq?sl1sZElMg&H
kQ9o/jo+6>ir7p:hu;I6gt^W_fETpXeC)dmci20&b0%fF`Poa4_8*n'^VR\!^;%Crrk/?D]DfA@\,Wo9
Zi730Z2Up)XSf'uVu!:jV#I.fUA^kdU'.0cUna^aU^NrpV5L2fW2HYpWiH'"&$N1@Z*:O?ZaI9P]"5Me
_#D1U`5p'Cb0J>\rm_&&gA]q7ioT=gn*flAqYp@*rr<#rr;$*ZnF5c+iSE/=f$_mh%F*);a2Gg1^V.:l
]=PP7!6P<7!W3#t"9&H%"oef+#QG)/#pBW`$OdFQ%M'*^&J>]j'bqK#(`F>4*$$.F+X/3Z-RgJo6S0oD
0/>=A2``u^5!_M%77^!C:JXhd<`rR0?=IJYB52:%F)uPOI=Qs&L5CkNOHYuuS=cFJVPpPrXg#(;\$ro\
^&GbH_#495!RLh<!;urs!YYY<"9er5#7(VB$OdIS%hB3`&elW+'c%T&)&X>3*$$%@+!;aP,:"Q^-RU;j
.4Qhu/1rM,/h\n51B''21c72i2uYf>3]]>br]L6Fr]gEJs$?TMr^-cU77B]E8,c%/8P2TJ9MA/T:/=Y_
;H$Op<E<4)>?b?=?t*YWAnl."DK'Z=GBnI\IXZfMJ:W:_&JZ*$)]^(I-RpSt0/>CB3'0;h6:+169MePa
<ENF1?"%8UBP;1!EHHAIH$k'lJV/]6MN*UVP*MB&R[p+FUSF]bWN<8*Yd1XE[^`l\^;%G!_SuMp+j%mN
c-=S^daZdsf@\d2gYCZCi8EVTjQ5OdkiqBulg4$Ln*ol;o(2MIpA"I[qu$BgrVZYcs5s@\rr2k%r;?Ef
p[n"Dlg*ftjPo1Wh;$]8f@A<td*U+b)B^=V0JG@G5t=R@:fU_,?Xm_bEHcVQItWW6NKKHmS=H4HV5U>o
YHtUF\%0,c^qdh*aND]LcHt"if%/O.h;&Uthr*MRj5]4_k32$nl0@O/li-2Kl2BfIk2te(j8\-<iW%g7
h?)KfgA]_/f%/@!da?D?bnJ7BaMu3<_o'=+_83n&^V7Fs^:sT[!P5oB\c9/=[f3W3Z2Up)XSf'uVu!7j
U]@4iU]$qcU]-tjTqnKZU].%sUSalcVP^;iWi<"uri?X6YHY:9ZEpmF\%'#\]=l#Z_?\$#ai_cOcdDaB
!SQ3+h?`-&k3ML)oCi%[q]Yt=s8;fjp[mtElfR0^f\"d'ccs_XaN)68_8![r]=YYbJcOF'o`=slr<*$%
r<<3*rWiH/rWt4b$O[@O%1Wm[&.oNf'GV>u(Dn&0)]Tk@+X&$U-7:5k.P38+0/>=A2``u^5!_Lm6:FF:
92A>\;c[%(>@(cMB4ksrDf]uDH@:<rK8,5AOH>ZlR@KnAU8FliX0&V2[(!NT]Y4<Z!5SO5rrKt:X8r2"
r;n,E!sAc2"pYD?#n%.N%M'']&J>cl'c%T&)&X>3*$$%@*u?%D,9nH[-7:/h-n-Vr.kE;)/hSe20f&_a
!]2bmrAX^9"$/J)4T7JD55meH5lX.K6N0=S6q'O6rC?iX3(Z_792&#R9hnJ[;,U=l<E3(%=^,*8?=75Q
A7fRmDJjE7FE`"UH[^EoJ:W:_&JZ*$)]^(I-Rqb=/MAk:2)mZ]5XIe-8PDrW;cQq'?!UlLAnYjnDK0cA
G'SIaJUrH.M2I:PO-5cpR[Te?TqeB[W2Zl$Y->4=[^N]V]Y;.q_8=1ja"PQWbg"DYdF-Ooe^rI,gY:N?
hr*GPj5f=ak32'plg*p*n*ol;o(2MIpA"I[qtpHlqYg?kO8nkPrr2oq>Q"EqqY0XPmd'3'k2bO]i8*2A
f@SR$da6@ecPdoP.kiY74$cA092JVm?XI;UCiOZCH@LU(LlIO]R%0\=USXofXKSt;\$ro[^VIY%`5p*E
bKeJ_e^i=)gA]n:hr*MRj5]4_k32$nklL)6q<S%FrosCF!p8Y,rT!q;ro*n7rn[_3gtMb[#1hATdaHOh
rll,!b/hTA`P]U0^qmk%_8!^u^V7G]]`G^Vrji'<s0hp5rNZ@)rN,ps!2o[js.oXhrM'7cs.T[kTqnKZ
U].%sUSalcVP^;iWi<"uri?X6YHY:9ZEpmF\%'#\]=l#Z_?\$#ai_cOcdDaB!SQ3+h?`-&k3ML)oCi%[
q]Yt=s8;fjp[mtElfR0^f\"d'ccs_XaN)68_8![r]=YYblMuM:mJun\quZg!rWN0'rs&H-rs8T171'D1
$k*RT%hK9a&eYln'c%T&)B0V8*?ZLK+seQ`.4H_u/h\k51H%0Q3]oSl6:++38P;iT;,^Lu=^,3AAS5Xj
D/XJ;F*DqYJ:iK/M2[OXPEqW,T:_jTW2lu$Yd(RE\%0/brkAHKr;ciuX8p*;r;liu2Zj-b"U,)8#RLeF
$k3[W%hK<c'GM8t(Dn#-)B0Y:*?H:F+sS<X,pjue-n$Mo.k</'/M8Y/0EEm`r\FU42)bClr]('A3]fJ'
4TI\F5Q="K62a.L6N]_F77R5Gr^]dU8kM`M9MJ5V:JXhc;cHas<`iL/>?kKB@Us"]C2@d*E-$,FH$Oac
IXls"Je&G.(E4;6+XAEb.P3;/2)R?T5!VG$7nHBN:fC@r>$X!k@:Wt`BPVL*FEVhQI"$WtK8,5?NK'!^
Q'[r.SY2[OUSauhXKJ_1ZF%'K\@K8d^V@V%`W!n3ai_iPc-OeceC<%#f\,$6gtprHi8WeXjlY^hl0@U#
m-a?3naZ2Ao_/"Rq>1!dr;-BirqQMOs8N#sr;uopqH3Ugo^VA8lfmQmio8nPgtC<2e^Dmmd*L#V+=/Nl
0JtpX7nZKO<Eig;@qTUtGB\@_KSYGDOd)6'S=cRQW2Qf$Za@3N\\#Vl^r"%2b0.uRd*gIqf%JdVh%&?#
io9"YjQ>Ugkiq?sl1sZElMg&Hkl9cFjo+6>ir7p:hu;I6gt^W_fETpXeC)dmci20&b0%fF`Poa4_8*n'
^VR\!^;%Crrk/?D]DfA@\,Wo9Zi.0.Y5PI"WW8snVZ3IkU]$qcU]-tjTqnKZU].%tUSalcVP^;iWi<"u
X:_P8YHP18Yd1UA[C<ZW]">Ykrk\oYaN;TIcHjo;eH+@Wrn[q?jlYmtn+68Lrqdl<s8W#pq=jONnE]5q
h:UB2da-1_bK.`B_83n"]Xtee\^^\6!<*#o!W3#t"9&H%"oef+#QG)/$!R`E$OdFQ%M'*^&J>]j'bqK#
(`F>4*$$.F+X/3Z-RgJo/M8\01,CgI3]]Ae5sdn,84cHM:Jk%k=]ns8@V'1bC2Im1F*DqYJ:iK/M2[OX
PEqW,T:_jTW2g6*Xg#(;\$ro\^&GbH_#495!L<`<!;urs!]^>b"9er5#7(VB$OdIS%hB3`&el#p()If*
)&aG6*??1C+<i$T,UFcb-R^Al.P!##/hJ\.0/,+9r\FU42)bClr]('A3]fJ'4TI\F5Q="K62a.L6N]_F
77R5Gr^^Qk8kM`M9MJ5V:JXhc;cHas<`iL/>?kKB@Us"]C2@d*E-$,FH$OacIXls"Je&G.(E4;6+XAEb
.P3;/2)R?T5!VG$7nHBN:fC@r>$YEBA7fLgCMn-6G'8.YIY!'&L5CeI+,u>EQ'[r.SY2[OUSauhXKJ_1
ZF%'K\@K8d^V@V%`W!n3ai_iPc-OeceC<%#f\,$6gtprHi8WeXjlY^hl0@U#m-a?3naZ2Ao_/"Rq>1!d
r;-Biro3sOs8N#sr>>J1qYKsYna>`/l/q'dio&YJg"4j+daHK/d*L#V+=/Nl0JtpX7nZKO<Eig;@qTUt
GB\@_KSYGDOd)6'S=cRQW2Qf$Za@3N\\#Vl^r"%2b0.uRd*gIqf%JdVh%&?#io9"YjQ>Ugkiq?sl1sZE
lMg&HkQ9o/jo+6>ir7p:hu;I6gt^W_fDsJ+f$r-rdEhg:'?\J=`l5p7_nj.)_8!h$^:q@r^AbeH]"@sP
s0r$:rj2R.riZ4$r2KapqPO:grhKFdrM0@d"JMWeUSIga$_sSqVl$>iVlH_rWrB(1YHP18Yd1UA[C<ZW
]">Ykrk\ZR#0=p/b0J>\rm_&&gA]q7ioT=gn*flAqYp@8rr<#rr;$*ZnF5c+iSE/=f$_mhc-+2K`50:)
]tCth]",QURfN*^quZg!rWE3)rWW<+rWiH/rX!-C$O[@O%1Wm[&.oNf'GV>u(Dn&0)]Tk@+X&$U-7:5k
.P38+0/>=A2``u^5!_M%77^!C:JXhd<`rR0?=IJYB52:%F)uPOI=Qs&L5CkNOHYuuS=cFJVPpPrXg#(;
\$ro\^&GbH_#495!Jga<!;urs!]^>b"9er5#7(VB$OdIS%hB3`&el#p()If*)&aG6*??1C+<i$T,UFcb
-R^Al.P!##/hJ\.0/,+9r\FU42)bClr]('A3]fJ'4TI\F5Q="K62a.M6NfbE77B]E8,c&"8P2TJ9MA/T
:/=Y_;H$Op<E<4)>?b?=?t*YWAnl."DK'Z=GBnI\IXZftJV"CE'c.f.*?c[U.Om#'1,UpK4$Gnr6:XU@
:f((j=B]!9@:Wt`BPVL*FEVhQI"$WtK8,5?NK'!^Q'[r.SY2[OUSat%WN<8*Yd1XE[^`l\^;%G!_SuMp
0ZhJ]c-=S^daZdsf@\d2gYCZCi8EVTjQ5OdkiqBulg4'.nF?&>oCVbMq"ad`r;?Eir;P4GYQ+V$rr"2A
r;-9ao^VA8lfmQmio8nPgtC<2e^Dmmd*L#V+=/Nl0JtpX7nY[3:fU_,?Xm_bEHcVQItWW6NKKHmS=H4H
V5U>oYHtUF\%0,c^qdh*aND]LcHt"if%/O.rnS(Ai8WbVj5f@bkih9qlKS-1rp'LIrTF=Fk2lR%s5O%:
s53h4!o2Sbrn%G+f$r-rdEhg:"Nnm.`l/G,_o'=+_83n&^V7Fs^:sT[!P5oB\c9/=[f3W3Z2Up)XSf'u
Vu!:jV#I.fUA^kdU'.0cUna^aU^NrpV5L2fW2HYpWiH'"&$N1@Z*:O?ZaI9P]"5Me_#D1U`5p'Cb0J>\
rm_,(g>:ZmhW!YZlgO<6pA4dc+o_NAr;?Bbo^MA9k2G.Kf[eKsc-=GQa2Gg1^V.:l]=PPX!3#tk!W3#t
"9&H%"oef+#QG)/#lk<C$O[@O%1Wm[&.oNf'GV>u(Dn&0)]Tk@+X&$U-7:5k.P38+0/>=A2``u^5!_M%
77^!C:JXhd<`rR0?=IJYB52:%F)uPOI=Qs&L5CkNOHYuuS=cFJVPpPrXg#(;\$ro\^&GbH_#495!V$/A
!;liq!W<'[!s8Z0"U52;#mgtJ%1WmZ&.oNh'GVB"(`=20)]Tk=*ZlLK,9nH[-7:/h-n-Vr.kE;)/hSe2
0f&_a!]2bmrAX^9"$/J)4T7JD55meH5lX.K6N0=S6q'O6rC?iX#t[`]92&#R9hnK1:Jk"g<)lq!=BSj4
>[CfIA7T:eCi4-0F*)VOH$b!hJ:N3&%hTNm)]Ke@,UY&k/MAk:2)mZ]5XIe-8PDrW;cQq'?!UlLAnYjn
DK0cAG'SIaJUrH.M2I:PO-5cpR[Te?TqeB[W2Zl$Y->4=[^N]V]Y;.q_8=1j`rO47b08,TcdC1jeCE1'
g"Y9:hV[8LioB+]k2tmllKdd&mdKZ8nac;Dp@e:WqYU3gqYg?k^Al1Prr2oq4T,-RqY0XPmd'3'k2bO]
i8*2Af@SR$da6@ecPdoP.kiY74$cA092JVm?XI;UCiOZCH@LU(LlIO]R%,4fT;/6]W3!2/[(!NT]>).s
_SjO<bKJ2Xdacq"g"QG]%c?4(ioB([k2tmkl07Ktq<S%FrosCF!p8Y,rT!q;ro*n7rn[_3gtMb[#1hAT
daHOhrll,!b/hTA`P]U0^qmk%_8!^u^V7G]]`YjX\[_jR\$rfSrj2R.riZ4$r2KapqPO:grhKFdrM0@d
"JMWeUSIga$_sSqVl$>iVlH_rWrB(1YHP18Yd1UA[C<ZW]">Ykrk\oYaN;TIcHjo;eH+@Wrn[q?jlYmt
n+68Lrqd!#s8W#pq=jON)"?kRiSE/=f$_mhc-+2K`50:)]tCth]"+:1^B!p-quZg!rWN0'rs&H-rs8T1
(((EW$k*RT%hK9a&eYln'c%T&)B0V8:)tH#+X/3Z-RgJo/M8\01,CgI3]]Ae5sdn,84cHM:Jk%k=]ns8
@V'1bC2Im1F*DqYJ:iK/M2[OXPEqW,T:_jTW2lu$Yd(RE\%0/brkAHKr;ciugAmE;r;liu#Qk/3"U,)8
#RN0k$OdIS%hB3`&el#p()If*)&aG6*??1C+<i$T,UFcb-R^Al.P!##/hJ\.0/,+9r\FU42)bClr]('A
3]fJ'4TI\F5Q="K62a.L6N]_F77R5Gr^\,&8kM`M9MJ5V:JXhc;cHas<`iL/>?kKB@Us"]C2@cuDK'Z=
GBnI\IXZftJV"CE'c.f.*?c[U.Om#'1,UpK4$Gnr6:XU@:f((j=B]!9@:Wt`BPVL*FEVhQI"$WtK8,5?
NK'!^Q'[r.SY2[OUSauhXKJ_1ZF%'K\@K8d^V@V%`W!mnai_iPc-OeceC<%#f\,$6gtprHi8Wc7jQ5Od
kiqBulg4'.nF?&>oCVbMq"ad`r;?Eir;NYpg].9Prr#amr;-9ao^VA8lfmQmio8nPgtC<2e^Dmmd*L#V
+=/Nl0JtpX7nZKO<Eig;@qTUtGB\@_KSYGDOd)6'S=cRQW2Qf$Za@3N\\#Vl^r"%2b0((6cHt"if%/O.
rnS(Ai8WbVj5f@bkih9qlKS-1rp'LIrTF=Fk2lR%s5O%:s53h4!o2Sbrn%G+f$r-rdEhg:'?\J=`l5p7
_nj.)_8!h$^:q@r^AbeH]"@sPs0r$:rj2R.riZ4$ri-%"Wi,]js.oXhrM'7crh9OhUnjc\rhKpsVPU2f
VPpDmWN)utX:MM<Yd(F<Za7'K\@T8`]tjWa#K4^*b0&#UdJhYsg"QG^#iat.lgO<6pA4dc*rc3>r;?Bb
o^MA9k2G.Kf[eKsc-=GQa2Gg1^V.:l!kZ%SK`KX'o`=slr<*$%r<<3*rWiH/rWt+_$O[@O%1Wm[&.oNf
'GV>u(Dn&0)]Tk@+X&$U-7:5k.P38+0/>=A2``u^3'KVp6:FF:92A>\;c[%(>@(cMB4ksrDf]uDH@:<r
K8,5AOH>ZlR@KnAU8FliX0&V2[(!NT]Y4<Z!5O*~>

%%EndBinary
grestore
np
34.46 205.508 mo
34.46 209.008 li
0 0 0 1 cmyk
f
.8 lw
0 lc
34.46 205.508 mo
34.46 209.008 li
@
18.9922 212.832 mo
20.126 212.832 20.9941 213.294 21.6099 214.19 cv
22.2119 215.1 22.52 216.416 22.52 218.124 cv
22.52 219.846 22.2119 221.162 21.6099 222.058 cv
20.9941 222.954 20.126 223.402 18.9922 223.402 cv
17.8438 223.402 16.9619 222.954 16.3599 222.058 cv
15.7578 221.162 15.4639 219.846 15.4639 218.124 cv
15.4639 216.416 15.7578 215.1 16.3599 214.19 cv
16.9619 213.294 17.8438 212.832 18.9922 212.832 cv
18.9922 212.832 li
cp
18.9922 213.924 mo
18.2778 213.924 17.7461 214.274 17.3818 214.974 cv
17.0181 215.674 16.8501 216.724 16.8501 218.124 cv
16.8501 219.524 17.0181 220.574 17.3818 221.274 cv
17.7461 221.974 18.2778 222.324 18.9922 222.324 cv
19.7061 222.324 20.2378 221.974 20.6021 221.274 cv
20.9521 220.574 21.1338 219.524 21.1338 218.124 cv
21.1338 216.724 20.9521 215.674 20.6021 214.974 cv
20.2378 214.274 19.7061 213.924 18.9922 213.924 cv
ef
24.918 221.484 mo
26.3599 221.484 li
26.3599 223.22 li
24.918 223.22 li
24.918 221.484 li
24.918 221.484 li
cp
ef
32.1919 212.832 mo
33.3262 212.832 34.1938 213.294 34.8101 214.19 cv
35.4121 215.1 35.7202 216.416 35.7202 218.124 cv
35.7202 219.846 35.4121 221.162 34.8101 222.058 cv
34.1938 222.954 33.3262 223.402 32.1919 223.402 cv
31.0439 223.402 30.1621 222.954 29.5601 222.058 cv
28.958 221.162 28.6641 219.846 28.6641 218.124 cv
28.6641 216.416 28.958 215.1 29.5601 214.19 cv
30.1621 213.294 31.0439 212.832 32.1919 212.832 cv
32.1919 212.832 li
cp
32.1919 213.924 mo
31.478 213.924 30.9458 214.274 30.582 214.974 cv
30.2178 215.674 30.0498 216.724 30.0498 218.124 cv
30.0498 219.524 30.2178 220.574 30.582 221.274 cv
30.9458 221.974 31.478 222.324 32.1919 222.324 cv
32.9063 222.324 33.438 221.974 33.8018 221.274 cv
34.1519 220.574 34.334 219.524 34.334 218.124 cv
34.334 216.724 34.1519 215.674 33.8018 214.974 cv
33.438 214.274 32.9063 213.924 32.1919 213.924 cv
ef
41.0718 212.832 mo
42.2061 212.832 43.0742 213.294 43.6899 214.19 cv
44.292 215.1 44.6001 216.416 44.6001 218.124 cv
44.6001 219.846 44.292 221.162 43.6899 222.058 cv
43.0742 222.954 42.2061 223.402 41.0718 223.402 cv
39.9238 223.402 39.042 222.954 38.4399 222.058 cv
37.8379 221.162 37.5439 219.846 37.5439 218.124 cv
37.5439 216.416 37.8379 215.1 38.4399 214.19 cv
39.042 213.294 39.9238 212.832 41.0718 212.832 cv
41.0718 212.832 li
cp
41.0718 213.924 mo
40.3579 213.924 39.8262 214.274 39.4619 214.974 cv
39.0981 215.674 38.9302 216.724 38.9302 218.124 cv
38.9302 219.524 39.0981 220.574 39.4619 221.274 cv
39.8262 221.974 40.3579 222.324 41.0718 222.324 cv
41.7861 222.324 42.3179 221.974 42.6821 221.274 cv
43.0322 220.574 43.2139 219.524 43.2139 218.124 cv
43.2139 216.724 43.0322 215.674 42.6821 214.974 cv
42.3179 214.274 41.7861 213.924 41.0718 213.924 cv
ef
49.9521 212.832 mo
51.0859 212.832 51.9541 213.294 52.5698 214.19 cv
53.1719 215.1 53.48 216.416 53.48 218.124 cv
53.48 219.846 53.1719 221.162 52.5698 222.058 cv
51.9541 222.954 51.0859 223.402 49.9521 223.402 cv
48.8042 223.402 47.9219 222.954 47.3198 222.058 cv
46.7178 221.162 46.4238 219.846 46.4238 218.124 cv
46.4238 216.416 46.7178 215.1 47.3198 214.19 cv
47.9219 213.294 48.8042 212.832 49.9521 212.832 cv
49.9521 212.832 li
cp
49.9521 213.924 mo
49.2378 213.924 48.7061 214.274 48.3418 214.974 cv
47.978 215.674 47.8101 216.724 47.8101 218.124 cv
47.8101 219.524 47.978 220.574 48.3418 221.274 cv
48.7061 221.974 49.2378 222.324 49.9521 222.324 cv
50.666 222.324 51.1982 221.974 51.562 221.274 cv
51.9121 220.574 52.0938 219.524 52.0938 218.124 cv
52.0938 216.724 51.9121 215.674 51.562 214.974 cv
51.1982 214.274 50.666 213.924 49.9521 213.924 cv
ef
98.8911 205.508 mo
98.8911 209.008 li
f
98.8911 205.508 mo
98.8911 209.008 li
@
83.312 212.832 mo
84.4458 212.832 85.314 213.294 85.9302 214.19 cv
86.5322 215.1 86.8398 216.416 86.8398 218.124 cv
86.8398 219.846 86.5322 221.162 85.9302 222.058 cv
85.314 222.954 84.4458 223.402 83.312 223.402 cv
82.1641 223.402 81.2822 222.954 80.6802 222.058 cv
80.0781 221.162 79.7842 219.846 79.7842 218.124 cv
79.7842 216.416 80.0781 215.1 80.6802 214.19 cv
81.2822 213.294 82.1641 212.832 83.312 212.832 cv
83.312 212.832 li
cp
83.312 213.924 mo
82.5981 213.924 82.0659 214.274 81.7021 214.974 cv
81.3379 215.674 81.1699 216.724 81.1699 218.124 cv
81.1699 219.524 81.3379 220.574 81.7021 221.274 cv
82.0659 221.974 82.5981 222.324 83.312 222.324 cv
84.0259 222.324 84.5581 221.974 84.9219 221.274 cv
85.272 220.574 85.4541 219.524 85.4541 218.124 cv
85.4541 216.724 85.272 215.674 84.9219 214.974 cv
84.5581 214.274 84.0259 213.924 83.312 213.924 cv
ef
89.2378 221.484 mo
90.6802 221.484 li
90.6802 223.22 li
89.2378 223.22 li
89.2378 221.484 li
89.2378 221.484 li
cp
ef
96.752 212.832 mo
97.8857 212.832 98.7539 213.294 99.3701 214.19 cv
99.9722 215.1 100.28 216.416 100.28 218.124 cv
100.28 219.846 99.9722 221.162 99.3701 222.058 cv
98.7539 222.954 97.8857 223.402 96.752 223.402 cv
95.604 223.402 94.7222 222.954 94.1201 222.058 cv
93.5181 221.162 93.2241 219.846 93.2241 218.124 cv
93.2241 216.416 93.5181 215.1 94.1201 214.19 cv
94.7222 213.294 95.604 212.832 96.752 212.832 cv
96.752 212.832 li
cp
96.752 213.924 mo
96.0381 213.924 95.5059 214.274 95.1421 214.974 cv
94.7778 215.674 94.6099 216.724 94.6099 218.124 cv
94.6099 219.524 94.7778 220.574 95.1421 221.274 cv
95.5059 221.974 96.0381 222.324 96.752 222.324 cv
97.4658 222.324 97.998 221.974 98.3618 221.274 cv
98.7119 220.574 98.894 219.524 98.894 218.124 cv
98.894 216.724 98.7119 215.674 98.3618 214.974 cv
97.998 214.274 97.4658 213.924 96.752 213.924 cv
ef
105.632 212.832 mo
106.766 212.832 107.634 213.294 108.25 214.19 cv
108.852 215.1 109.16 216.416 109.16 218.124 cv
109.16 219.846 108.852 221.162 108.25 222.058 cv
107.634 222.954 106.766 223.402 105.632 223.402 cv
104.484 223.402 103.602 222.954 103 222.058 cv
102.398 221.162 102.104 219.846 102.104 218.124 cv
102.104 216.416 102.398 215.1 103 214.19 cv
103.602 213.294 104.484 212.832 105.632 212.832 cv
105.632 212.832 li
cp
105.632 213.924 mo
104.918 213.924 104.386 214.274 104.022 214.974 cv
103.658 215.674 103.49 216.724 103.49 218.124 cv
103.49 219.524 103.658 220.574 104.022 221.274 cv
104.386 221.974 104.918 222.324 105.632 222.324 cv
106.346 222.324 106.878 221.974 107.242 221.274 cv
107.592 220.574 107.774 219.524 107.774 218.124 cv
107.774 216.724 107.592 215.674 107.242 214.974 cv
106.878 214.274 106.346 213.924 105.632 213.924 cv
ef
111.572 213.014 mo
116.99 213.014 li
116.99 214.176 li
112.832 214.176 li
112.832 216.682 li
113.028 216.612 113.238 216.556 113.434 216.528 cv
113.63 216.5 113.84 216.472 114.036 216.472 cv
115.17 216.472 116.066 216.794 116.738 217.41 cv
117.41 218.04 117.746 218.88 117.746 219.944 cv
117.746 221.05 117.396 221.904 116.71 222.506 cv
116.024 223.108 115.058 223.402 113.826 223.402 cv
113.392 223.402 112.958 223.36 112.51 223.304 cv
112.062 223.234 111.614 223.136 111.138 222.982 cv
111.138 221.596 li
111.544 221.82 111.964 221.988 112.412 222.1 cv
112.846 222.212 113.308 222.254 113.798 222.254 cv
114.582 222.254 115.212 222.058 115.674 221.638 cv
116.122 221.218 116.36 220.658 116.36 219.944 cv
116.36 219.244 116.122 218.684 115.674 218.264 cv
115.212 217.844 114.582 217.634 113.798 217.634 cv
113.434 217.634 113.056 217.676 112.692 217.76 cv
112.328 217.844 111.95 217.97 111.572 218.138 cv
111.572 213.014 li
111.572 213.014 li
cp
ef
163.322 205.508 mo
163.322 209.008 li
f
163.322 205.508 mo
163.322 209.008 li
@
147.632 212.832 mo
148.766 212.832 149.634 213.294 150.25 214.19 cv
150.852 215.1 151.16 216.416 151.16 218.124 cv
151.16 219.846 150.852 221.162 150.25 222.058 cv
149.634 222.954 148.766 223.402 147.632 223.402 cv
146.484 223.402 145.602 222.954 145 222.058 cv
144.398 221.162 144.104 219.846 144.104 218.124 cv
144.104 216.416 144.398 215.1 145 214.19 cv
145.602 213.294 146.484 212.832 147.632 212.832 cv
147.632 212.832 li
cp
147.632 213.924 mo
146.918 213.924 146.386 214.274 146.022 214.974 cv
145.658 215.674 145.49 216.724 145.49 218.124 cv
145.49 219.524 145.658 220.574 146.022 221.274 cv
146.386 221.974 146.918 222.324 147.632 222.324 cv
148.346 222.324 148.878 221.974 149.242 221.274 cv
149.592 220.574 149.774 219.524 149.774 218.124 cv
149.774 216.724 149.592 215.674 149.242 214.974 cv
148.878 214.274 148.346 213.924 147.632 213.924 cv
ef
153.798 221.484 mo
155.24 221.484 li
155.24 223.22 li
153.798 223.22 li
153.798 221.484 li
153.798 221.484 li
cp
ef
161.072 212.832 mo
162.206 212.832 163.074 213.294 163.69 214.19 cv
164.292 215.1 164.6 216.416 164.6 218.124 cv
164.6 219.846 164.292 221.162 163.69 222.058 cv
163.074 222.954 162.206 223.402 161.072 223.402 cv
159.924 223.402 159.042 222.954 158.44 222.058 cv
157.838 221.162 157.544 219.846 157.544 218.124 cv
157.544 216.416 157.838 215.1 158.44 214.19 cv
159.042 213.294 159.924 212.832 161.072 212.832 cv
161.072 212.832 li
cp
161.072 213.924 mo
160.358 213.924 159.826 214.274 159.462 214.974 cv
159.098 215.674 158.93 216.724 158.93 218.124 cv
158.93 219.524 159.098 220.574 159.462 221.274 cv
159.826 221.974 160.358 222.324 161.072 222.324 cv
161.786 222.324 162.318 221.974 162.682 221.274 cv
163.032 220.574 163.214 219.524 163.214 218.124 cv
163.214 216.724 163.032 215.674 162.682 214.974 cv
162.318 214.274 161.786 213.924 161.072 213.924 cv
ef
167.236 222.058 mo
169.49 222.058 li
169.49 214.274 li
167.04 214.764 li
167.04 213.504 li
169.476 213.014 li
170.862 213.014 li
170.862 222.058 li
173.116 222.058 li
173.116 223.22 li
167.236 223.22 li
167.236 222.058 li
167.236 222.058 li
cp
ef
178.832 212.832 mo
179.966 212.832 180.834 213.294 181.45 214.19 cv
182.052 215.1 182.36 216.416 182.36 218.124 cv
182.36 219.846 182.052 221.162 181.45 222.058 cv
180.834 222.954 179.966 223.402 178.832 223.402 cv
177.684 223.402 176.802 222.954 176.2 222.058 cv
175.598 221.162 175.304 219.846 175.304 218.124 cv
175.304 216.416 175.598 215.1 176.2 214.19 cv
176.802 213.294 177.684 212.832 178.832 212.832 cv
178.832 212.832 li
cp
178.832 213.924 mo
178.118 213.924 177.586 214.274 177.222 214.974 cv
176.858 215.674 176.69 216.724 176.69 218.124 cv
176.69 219.524 176.858 220.574 177.222 221.274 cv
177.586 221.974 178.118 222.324 178.832 222.324 cv
179.546 222.324 180.078 221.974 180.442 221.274 cv
180.792 220.574 180.974 219.524 180.974 218.124 cv
180.974 216.724 180.792 215.674 180.442 214.974 cv
180.078 214.274 179.546 213.924 178.832 213.924 cv
ef
227.753 205.508 mo
227.753 209.008 li
f
227.753 205.508 mo
227.753 209.008 li
@
212.192 212.832 mo
213.326 212.832 214.194 213.294 214.81 214.19 cv
215.412 215.1 215.72 216.416 215.72 218.124 cv
215.72 219.846 215.412 221.162 214.81 222.058 cv
214.194 222.954 213.326 223.402 212.192 223.402 cv
211.044 223.402 210.162 222.954 209.56 222.058 cv
208.958 221.162 208.664 219.846 208.664 218.124 cv
208.664 216.416 208.958 215.1 209.56 214.19 cv
210.162 213.294 211.044 212.832 212.192 212.832 cv
212.192 212.832 li
cp
212.192 213.924 mo
211.478 213.924 210.946 214.274 210.582 214.974 cv
210.218 215.674 210.05 216.724 210.05 218.124 cv
210.05 219.524 210.218 220.574 210.582 221.274 cv
210.946 221.974 211.478 222.324 212.192 222.324 cv
212.906 222.324 213.438 221.974 213.802 221.274 cv
214.152 220.574 214.334 219.524 214.334 218.124 cv
214.334 216.724 214.152 215.674 213.802 214.974 cv
213.438 214.274 212.906 213.924 212.192 213.924 cv
ef
218.118 221.484 mo
219.56 221.484 li
219.56 223.22 li
218.118 223.22 li
218.118 221.484 li
218.118 221.484 li
cp
ef
225.632 212.832 mo
226.766 212.832 227.634 213.294 228.25 214.19 cv
228.852 215.1 229.16 216.416 229.16 218.124 cv
229.16 219.846 228.852 221.162 228.25 222.058 cv
227.634 222.954 226.766 223.402 225.632 223.402 cv
224.484 223.402 223.602 222.954 223 222.058 cv
222.398 221.162 222.104 219.846 222.104 218.124 cv
222.104 216.416 222.398 215.1 223 214.19 cv
223.602 213.294 224.484 212.832 225.632 212.832 cv
225.632 212.832 li
cp
225.632 213.924 mo
224.918 213.924 224.386 214.274 224.022 214.974 cv
223.658 215.674 223.49 216.724 223.49 218.124 cv
223.49 219.524 223.658 220.574 224.022 221.274 cv
224.386 221.974 224.918 222.324 225.632 222.324 cv
226.346 222.324 226.878 221.974 227.242 221.274 cv
227.592 220.574 227.774 219.524 227.774 218.124 cv
227.774 216.724 227.592 215.674 227.242 214.974 cv
226.878 214.274 226.346 213.924 225.632 213.924 cv
ef
231.796 222.058 mo
234.05 222.058 li
234.05 214.274 li
231.6 214.764 li
231.6 213.504 li
234.036 213.014 li
235.422 213.014 li
235.422 222.058 li
237.676 222.058 li
237.676 223.22 li
231.796 223.22 li
231.796 222.058 li
231.796 222.058 li
cp
ef
240.452 213.014 mo
245.87 213.014 li
245.87 214.176 li
241.712 214.176 li
241.712 216.682 li
241.908 216.612 242.118 216.556 242.314 216.528 cv
242.51 216.5 242.72 216.472 242.916 216.472 cv
244.05 216.472 244.946 216.794 245.618 217.41 cv
246.29 218.04 246.626 218.88 246.626 219.944 cv
246.626 221.05 246.276 221.904 245.59 222.506 cv
244.904 223.108 243.938 223.402 242.706 223.402 cv
242.272 223.402 241.838 223.36 241.39 223.304 cv
240.942 223.234 240.494 223.136 240.018 222.982 cv
240.018 221.596 li
240.424 221.82 240.844 221.988 241.292 222.1 cv
241.726 222.212 242.188 222.254 242.678 222.254 cv
243.462 222.254 244.092 222.058 244.554 221.638 cv
245.002 221.218 245.24 220.658 245.24 219.944 cv
245.24 219.244 245.002 218.684 244.554 218.264 cv
244.092 217.844 243.462 217.634 242.678 217.634 cv
242.314 217.634 241.936 217.676 241.572 217.76 cv
241.208 217.844 240.83 217.97 240.452 218.138 cv
240.452 213.014 li
240.452 213.014 li
cp
ef
292.183 205.508 mo
292.183 209.008 li
f
292.183 205.508 mo
292.183 209.008 li
@
276.512 212.832 mo
277.646 212.832 278.514 213.294 279.13 214.19 cv
279.732 215.1 280.04 216.416 280.04 218.124 cv
280.04 219.846 279.732 221.162 279.13 222.058 cv
278.514 222.954 277.646 223.402 276.512 223.402 cv
275.364 223.402 274.482 222.954 273.88 222.058 cv
273.278 221.162 272.984 219.846 272.984 218.124 cv
272.984 216.416 273.278 215.1 273.88 214.19 cv
274.482 213.294 275.364 212.832 276.512 212.832 cv
276.512 212.832 li
cp
276.512 213.924 mo
275.798 213.924 275.266 214.274 274.902 214.974 cv
274.538 215.674 274.37 216.724 274.37 218.124 cv
274.37 219.524 274.538 220.574 274.902 221.274 cv
275.266 221.974 275.798 222.324 276.512 222.324 cv
277.226 222.324 277.758 221.974 278.122 221.274 cv
278.472 220.574 278.654 219.524 278.654 218.124 cv
278.654 216.724 278.472 215.674 278.122 214.974 cv
277.758 214.274 277.226 213.924 276.512 213.924 cv
ef
282.438 221.484 mo
283.88 221.484 li
283.88 223.22 li
282.438 223.22 li
282.438 221.484 li
282.438 221.484 li
cp
ef
289.952 212.832 mo
291.086 212.832 291.954 213.294 292.57 214.19 cv
293.172 215.1 293.48 216.416 293.48 218.124 cv
293.48 219.846 293.172 221.162 292.57 222.058 cv
291.954 222.954 291.086 223.402 289.952 223.402 cv
288.804 223.402 287.922 222.954 287.32 222.058 cv
286.718 221.162 286.424 219.846 286.424 218.124 cv
286.424 216.416 286.718 215.1 287.32 214.19 cv
287.922 213.294 288.804 212.832 289.952 212.832 cv
289.952 212.832 li
cp
289.952 213.924 mo
289.238 213.924 288.706 214.274 288.342 214.974 cv
287.978 215.674 287.81 216.724 287.81 218.124 cv
287.81 219.524 287.978 220.574 288.342 221.274 cv
288.706 221.974 289.238 222.324 289.952 222.324 cv
290.666 222.324 291.198 221.974 291.563 221.274 cv
291.912 220.574 292.094 219.524 292.094 218.124 cv
292.094 216.724 291.912 215.674 291.563 214.974 cv
291.198 214.274 290.666 213.924 289.952 213.924 cv
ef
297.068 222.058 mo
301.884 222.058 li
301.884 223.22 li
295.402 223.22 li
295.402 222.058 li
295.92 221.526 296.634 220.798 297.544 219.874 cv
298.44 218.964 299.014 218.376 299.252 218.11 cv
299.7 217.62 300.008 217.2 300.176 216.85 cv
300.344 216.514 300.442 216.164 300.442 215.828 cv
300.442 215.296 300.246 214.848 299.868 214.512 cv
299.49 214.176 299 213.994 298.384 213.994 cv
297.95 213.994 297.488 214.078 297.012 214.218 cv
296.536 214.372 296.018 214.596 295.472 214.904 cv
295.472 213.504 li
296.032 213.28 296.55 213.112 297.026 213 cv
297.502 212.888 297.95 212.832 298.356 212.832 cv
299.406 212.832 300.246 213.098 300.876 213.63 cv
301.506 214.162 301.828 214.862 301.828 215.744 cv
301.828 216.164 301.744 216.57 301.59 216.934 cv
301.436 217.312 301.156 217.76 300.736 218.264 cv
300.624 218.404 300.26 218.782 299.645 219.412 cv
299.028 220.042 298.174 220.924 297.068 222.058 cv
297.068 222.058 li
cp
ef
307.712 212.832 mo
308.846 212.832 309.714 213.294 310.33 214.19 cv
310.932 215.1 311.24 216.416 311.24 218.124 cv
311.24 219.846 310.932 221.162 310.33 222.058 cv
309.714 222.954 308.846 223.402 307.712 223.402 cv
306.564 223.402 305.682 222.954 305.08 222.058 cv
304.479 221.162 304.184 219.846 304.184 218.124 cv
304.184 216.416 304.479 215.1 305.08 214.19 cv
305.682 213.294 306.564 212.832 307.712 212.832 cv
307.712 212.832 li
cp
307.712 213.924 mo
306.998 213.924 306.466 214.274 306.102 214.974 cv
305.738 215.674 305.57 216.724 305.57 218.124 cv
305.57 219.524 305.738 220.574 306.102 221.274 cv
306.466 221.974 306.998 222.324 307.712 222.324 cv
308.426 222.324 308.958 221.974 309.322 221.274 cv
309.672 220.574 309.854 219.524 309.854 218.124 cv
309.854 216.724 309.672 215.674 309.322 214.974 cv
308.958 214.274 308.426 213.924 307.712 213.924 cv
ef
140.472 236.534 mo
143.594 236.534 li
144.728 236.534 145.596 236.8 146.184 237.318 cv
146.772 237.836 147.066 238.592 147.066 239.586 cv
147.066 240.594 146.772 241.364 146.184 241.868 cv
145.596 242.386 144.728 242.638 143.594 242.638 cv
141.858 242.638 li
141.858 246.74 li
140.472 246.74 li
140.472 236.534 li
140.472 236.534 li
cp
141.858 237.668 mo
141.858 241.504 li
143.594 241.504 li
144.238 241.504 144.728 241.35 145.078 241.014 cv
145.428 240.678 145.61 240.202 145.61 239.586 cv
145.61 238.97 145.428 238.508 145.078 238.172 cv
144.728 237.836 144.238 237.668 143.594 237.668 cv
141.858 237.668 li
ef
153.254 240.258 mo
153.114 240.174 152.96 240.118 152.792 240.076 cv
152.624 240.048 152.442 240.02 152.246 240.02 cv
151.532 240.02 150.986 240.258 150.608 240.72 cv
150.216 241.182 150.034 241.84 150.034 242.708 cv
150.034 246.74 li
148.774 246.74 li
148.774 239.082 li
150.034 239.082 li
150.034 240.271 li
150.286 239.81 150.636 239.46 151.056 239.236 cv
151.476 239.012 151.994 238.9 152.61 238.9 cv
152.694 238.9 152.792 238.914 152.904 238.914 cv
153.002 238.928 153.114 238.942 153.254 238.97 cv
153.254 240.258 li
153.254 240.258 li
cp
ef
157.544 238.9 mo
158.636 238.9 159.49 239.264 160.12 239.964 cv
160.736 240.678 161.058 241.658 161.058 242.918 cv
161.058 244.178 160.736 245.158 160.12 245.858 cv
159.49 246.572 158.636 246.922 157.544 246.922 cv
156.438 246.922 155.57 246.572 154.954 245.858 cv
154.338 245.158 154.03 244.178 154.03 242.918 cv
154.03 241.658 154.338 240.678 154.954 239.964 cv
155.57 239.264 156.438 238.9 157.544 238.9 cv
157.544 238.9 li
cp
157.544 239.964 mo
156.872 239.964 156.34 240.23 155.948 240.762 cv
155.556 241.294 155.36 242.008 155.36 242.918 cv
155.36 243.842 155.542 244.556 155.934 245.088 cv
156.326 245.62 156.858 245.872 157.544 245.872 cv
158.216 245.872 158.748 245.62 159.14 245.088 cv
159.532 244.556 159.728 243.842 159.728 242.918 cv
159.728 242.021 159.532 241.294 159.14 240.762 cv
158.748 240.23 158.216 239.964 157.544 239.964 cv
ef
164.434 240.244 mo
164.686 239.796 165.022 239.46 165.428 239.236 cv
165.834 239.012 166.324 238.9 166.884 238.9 cv
167.808 238.9 168.564 239.278 169.152 240.006 cv
169.726 240.748 170.02 241.714 170.02 242.918 cv
170.02 244.122 169.726 245.102 169.152 245.83 cv
168.564 246.558 167.808 246.922 166.884 246.922 cv
166.324 246.922 165.834 246.81 165.428 246.6 cv
165.022 246.39 164.686 246.054 164.434 245.592 cv
164.434 246.74 li
163.174 246.74 li
163.174 236.1 li
164.434 236.1 li
164.434 240.244 li
164.434 240.244 li
cp
168.718 242.918 mo
168.718 241.994 168.522 241.28 168.144 240.748 cv
167.752 240.216 167.234 239.95 166.576 239.95 cv
165.904 239.95 165.386 240.216 165.008 240.748 cv
164.616 241.28 164.434 241.994 164.434 242.918 cv
164.434 243.842 164.616 244.57 165.008 245.102 cv
165.386 245.634 165.904 245.886 166.576 245.886 cv
167.234 245.886 167.752 245.634 168.144 245.102 cv
168.522 244.57 168.718 243.842 168.718 242.918 cv
ef
178.088 242.372 mo
178.088 246.74 li
176.828 246.74 li
176.828 245.578 li
176.534 246.054 176.17 246.39 175.75 246.6 cv
175.33 246.81 174.798 246.922 174.182 246.922 cv
173.398 246.922 172.768 246.712 172.306 246.278 cv
171.844 245.844 171.62 245.256 171.62 244.514 cv
171.62 243.66 171.9 243.016 172.488 242.568 cv
173.062 242.134 173.916 241.91 175.064 241.91 cv
176.828 241.91 li
176.828 241.784 li
176.828 241.21 176.632 240.762 176.254 240.44 cv
175.876 240.132 175.344 239.964 174.658 239.964 cv
174.21 239.964 173.79 240.02 173.37 240.132 cv
172.95 240.244 172.558 240.398 172.18 240.594 cv
172.18 239.432 li
172.628 239.264 173.076 239.124 173.51 239.04 cv
173.944 238.956 174.364 238.9 174.784 238.9 cv
175.89 238.9 176.716 239.194 177.262 239.768 cv
177.808 240.342 178.088 241.21 178.088 242.372 cv
178.088 242.372 li
cp
175.582 242.89 mo
174.56 242.89 173.86 243.016 173.468 243.24 cv
173.076 243.478 172.88 243.87 172.88 244.43 cv
172.88 244.878 173.02 245.242 173.314 245.494 cv
173.608 245.76 174.014 245.886 174.518 245.886 cv
175.218 245.886 175.778 245.648 176.198 245.144 cv
176.618 244.654 176.828 243.996 176.828 243.17 cv
176.828 242.89 li
175.582 242.89 li
ef
181.954 240.244 mo
182.206 239.796 182.542 239.46 182.948 239.236 cv
183.354 239.012 183.844 238.9 184.404 238.9 cv
185.328 238.9 186.084 239.278 186.672 240.006 cv
187.246 240.748 187.54 241.714 187.54 242.918 cv
187.54 244.122 187.246 245.102 186.672 245.83 cv
186.084 246.558 185.328 246.922 184.404 246.922 cv
183.844 246.922 183.354 246.81 182.948 246.6 cv
182.542 246.39 182.206 246.054 181.954 245.592 cv
181.954 246.74 li
180.694 246.74 li
180.694 236.1 li
181.954 236.1 li
181.954 240.244 li
181.954 240.244 li
cp
186.238 242.918 mo
186.238 241.994 186.042 241.28 185.664 240.748 cv
185.272 240.216 184.754 239.95 184.096 239.95 cv
183.424 239.95 182.906 240.216 182.528 240.748 cv
182.136 241.28 181.954 241.994 181.954 242.918 cv
181.954 243.842 182.136 244.57 182.528 245.102 cv
182.906 245.634 183.424 245.886 184.096 245.886 cv
184.754 245.886 185.272 245.634 185.664 245.102 cv
186.042 244.57 186.238 243.842 186.238 242.918 cv
ef
189.616 236.1 mo
190.876 236.1 li
190.876 237.696 li
189.616 237.696 li
189.616 236.1 li
189.616 236.1 li
cp
189.616 239.082 mo
190.876 239.082 li
190.876 246.74 li
189.616 246.74 li
189.616 239.082 li
ef
193.456 236.1 mo
194.716 236.1 li
194.716 246.74 li
193.456 246.74 li
193.456 236.1 li
193.456 236.1 li
cp
ef
197.296 236.1 mo
198.556 236.1 li
198.556 237.696 li
197.296 237.696 li
197.296 236.1 li
197.296 236.1 li
cp
197.296 239.082 mo
198.556 239.082 li
198.556 246.74 li
197.296 246.74 li
197.296 239.082 li
ef
202.382 236.912 mo
202.382 239.082 li
204.972 239.082 li
204.972 240.062 li
202.382 240.062 li
202.382 244.22 li
202.382 244.85 202.466 245.256 202.634 245.424 cv
202.802 245.606 203.152 245.69 203.684 245.69 cv
204.972 245.69 li
204.972 246.74 li
203.684 246.74 li
202.704 246.74 202.032 246.558 201.668 246.194 cv
201.304 245.83 201.122 245.172 201.122 244.22 cv
201.122 240.062 li
200.198 240.062 li
200.198 239.082 li
201.122 239.082 li
201.122 236.912 li
202.382 236.912 li
202.382 236.912 li
cp
ef
209.848 247.44 mo
209.484 248.336 209.134 248.938 208.798 249.218 cv
208.462 249.498 208.014 249.638 207.454 249.638 cv
206.446 249.638 li
206.446 248.588 li
207.188 248.588 li
207.524 248.588 207.79 248.504 207.986 248.336 cv
208.182 248.168 208.392 247.79 208.63 247.174 cv
208.854 246.614 li
205.76 239.082 li
207.09 239.082 li
209.484 245.074 li
211.878 239.082 li
213.208 239.082 li
209.848 247.44 li
209.848 247.44 li
cp
ef
219.264 236.1 mo
222.162 236.1 li
222.162 237.08 li
220.524 237.08 li
220.524 247.594 li
222.162 247.594 li
222.162 248.574 li
219.264 248.574 li
219.264 236.1 li
219.264 236.1 li
cp
ef
226.702 236.352 mo
227.416 236.352 227.99 236.604 228.424 237.108 cv
228.844 237.612 229.068 238.284 229.068 239.124 cv
229.068 239.992 228.844 240.664 228.424 241.168 cv
228.004 241.672 227.43 241.91 226.702 241.91 cv
225.974 241.91 225.4 241.672 224.98 241.168 cv
224.56 240.664 224.35 239.992 224.35 239.124 cv
224.35 238.284 224.56 237.612 224.98 237.108 cv
225.4 236.604 225.974 236.352 226.702 236.352 cv
226.702 236.352 li
cp
232.876 236.352 mo
233.968 236.352 li
227.584 246.922 li
226.492 246.922 li
232.876 236.352 li
226.702 237.22 mo
226.31 237.22 226.002 237.402 225.778 237.738 cv
225.554 238.074 225.442 238.536 225.442 239.124 cv
225.442 239.74 225.554 240.202 225.778 240.538 cv
226.002 240.874 226.31 241.042 226.702 241.042 cv
227.094 241.042 227.416 240.874 227.64 240.538 cv
227.864 240.202 227.976 239.74 227.976 239.124 cv
227.976 238.536 227.85 238.074 227.626 237.738 cv
227.402 237.402 227.094 237.22 226.702 237.22 cv
233.758 241.378 mo
234.472 241.378 235.046 241.63 235.466 242.134 cv
235.886 242.638 236.11 243.324 236.11 244.164 cv
236.11 245.018 235.886 245.69 235.466 246.18 cv
235.046 246.684 234.472 246.922 233.758 246.922 cv
233.03 246.922 232.442 246.684 232.022 246.18 cv
231.602 245.69 231.392 245.018 231.392 244.164 cv
231.392 243.31 231.602 242.638 232.022 242.134 cv
232.442 241.63 233.03 241.378 233.758 241.378 cv
233.758 242.246 mo
233.366 242.246 233.044 242.414 232.82 242.75 cv
232.596 243.086 232.484 243.562 232.484 244.164 cv
232.484 244.752 232.596 245.228 232.82 245.564 cv
233.044 245.9 233.366 246.068 233.758 246.068 cv
234.15 246.068 234.458 245.9 234.682 245.564 cv
234.906 245.228 235.018 244.752 235.018 244.164 cv
235.018 243.576 234.906 243.1 234.682 242.764 cv
234.458 242.428 234.15 242.246 233.758 242.246 cv
ef
241.036 236.1 mo
241.036 248.574 li
238.138 248.574 li
238.138 247.594 li
239.776 247.594 li
239.776 237.08 li
238.138 237.08 li
238.138 236.1 li
241.036 236.1 li
241.036 236.1 li
cp
ef
0 lj
34.46 205.508 mo
35.6807 205.508 li
345.72 205.508 li
346.939 205.508 li
346.939 189.884 li
345.72 189.884 li
35.6807 189.884 li
34.46 189.884 li
34.46 205.508 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Thorpe, James I. \(GSFC-6630\)) ()%%Title: (goodSky.eps)%%CreationDate: 2/1/19 11:26 AM%%Canvassize: 16383%AI9_DataStream%Gb!R&k?8hJdO>%LJF5]+R4M&BfE;?\QtS/j$oSkD@uNZT&o6t/r]&MY.WeJ7b\.^A]D)-Z;6&mF:gIA+X/68Y9)J#;rpf*Ddf/uU%?;mu=C0Go3[IT&ejpHg5a-1*o>,GtB.<mdW'Aa2K-t:k5qsNj^q9h@m[-sI>DRJ;8GIjjNlJISfr'B?DXu,^9buUnDYC*1s\9l@5%b.He1rNXnS[l_oq?=$Wh$3F5pVXjH5\j(Rh^28$oo=AKX=MLOZcalph</]WO]_ca$HFn):6`&')h.O7Q`=)AKI6VTBHI-s$M$ffT%*aJ+:41L_\MRKKt.XYF.CH4G(;)D""0<V$Q7Xk@%V"sN4m<'>\a7d]c"jr`5qt7MIH0V9b"Nu425/4NE]d@16:mAU&0C^J`!"'RP%:4>Wa]5:3aS$jqbn.FFQl`p8h<P[bQj%HT3rP]U6I_9/qQ92e/a8Z2$W!5.FmsO6XXjud.]fc"m[g7$Meq<[EZUL5npX`UY7$U+=%WrL?J4uYM5boVs7]Cgog=Nrq5"dlCi`o#$9=4HBh*5+7;5.Ak;a"*1$"*6='&XCrVa2tBN%[B-*L'<7..pfQ^I-8)G-EK]q!9?s9%L8d?$4?bmAXGZH!2qsnDH[iVD/ar0JNM,J<?ESZq=(0Ul?LpU-*U'\Qi7F_P`Ih*,i:ATEad:!lU'r@V#2qgK.R5"-[77>#:f@P7%fkLFI?hq<hA>m;9Y2d-*iOeF8HaP>s\rNDoN`U?DYNe/UXk3)\^<<gdP\&f,bJI/CKr$?$?C,fG/s^K_/E=ShhX.mVb&ss'I`$@\%<NT`0C)-3=<q/eiMIl'q]NVLC(>`?#j7R_hn)5=/J%7f!,%&;Nj`OkT(%<5:iL'*T9Au9!8GO0a#iDlqNX4N^g_(9J09-@rnJ@2k%hm"NJ'A&0f_KQtYINfKHKP`J&\U?#_j2-!k;m.E>c4BW=EQhNq/E&\JaWp!*F5ONHgcG.6cB0ZoIom&uL[S=YcQJ:;YORS1-^MX>%aVe]ln@^eFI)fSR3hChKkFNn$hm!lU&)VXJR7\="gci.pB`NK4kss#:pQ)S>V&4+`00F:C4nbEC`U.]jEk]&:r519L3_>`!3kUqP%bu\n4pl;2<^2\OZ'>>:?YmcXF=-/Xuf+);N>@?`^1b<?0;B,>".>;J%Xp[7fN-F\1A"D@c]OB.JN6&8Dhm&D^SSREcq)\OqcZs(W%2=m=oDRbE^rA"9IX.A_$($'-&=-gdg:]!iAP4!bp_n1=8Ot5@\AVjuJ*jA-IPBaQt%G=h9?eI'`bBKtd6@\dP>Yu5cR`8G,:]<`?%Kn'(Ls5aTbaUnK9s(n0Sqk*fL3;hNNAD<.>/!p'hs2fbU$NKfaq(GgJeJR:qo&&"6s7S\Q:\"FOTB"_c43oGWQG<2.`hs\S_lVH>%7_N,On5XYu)LSS72>kB/r8Y2RV1d!Ar.7fnI'Z6jVefGXr(VRmn5@FfPS7Wn2:LP'k\e;@_(@/7j1Y,#R9RJQC:PfXK.dNUWaJ@8%mtQ.]-E[sGE8b#TlDb_Zm'0jV5#cMZi4\g!/,D@($=&@uUN\u<_JS4elZJ%M`i/<7:I)Ll>RpWP*EP*Pr\-GqD@%>*-hYHO*n9^t%m";:*RU%^,m\t+"EsctWIj(nOhZ@TT#Y$Ru#&kX^KR]d@J[r@Z`L:[b^Tant[AnEee!E;akjR^_[N0Rg3q.?T>,l_62p95[oi_"3%lWY3QgidATZ;_Oa&a[Z3#>8+pmL9*7GGZtUT8%P'9i_ij0t"s&XOs,2e*`0A<J/f\oe]KLSS8c#(9siU$#J=Y1Q>">U?=o$l-E3@%k<V_B$VH*o=0T`TL4X[3($^i:\2qO.22k=\I7l2[\V>.7D93OhCFH79>NiVWp!Y=6XXE_J6*Ga?R'C`I(3=\q2#[g*Rt=['8sEHD%a6-iT&8Q:O+RY9ZN7E\u'Bl@Z(bc:+8!,<P*/KV7L)7eGWTPM/O_W^9,pUsUD>R;NE_ahO9a)F;C9tTr'qsY1D]+#l,]=QL[XDkO%kmgnU/2K.&^QTq[nQ@h8_/ls0H'gAsEC]MBL,G:fMU?b84>r]s3Ifo@$,2^Z1Ca1+D/\W`l>JbDO%-N#mh;Oj%C9/8bJA10I>'P]%kUTCu%JRO88s0>ELSqUe(O?aRbb=i2j(E1-Y*an*/>'be#PTCqP".*Uj/\KAdOa_&j,/Jb=mWQCh8?>EoXbe*')^0gC!^es$sn&h%Y<H%3p).`sSh!;!8=IGp[aunuE#&mCMc#=o6!l,i?QW-H/8&i^jYP[MbU$A_Wm7nYd!YM%*m)&HNWQMfmmO=GT_2j[$dKo!n#A:i%WpEq96a'/i+1OX9CE2L)\m1dUN0J/=@FnV+#-t>8/6Yj'>"e^VD'r7!gY](;T`56?<Iqhc9f$?TL-I&ZBauPZfU(*rlY%rX'hVu=%1.<RoP(-qp-@O%FLL8fAmCkYfacFV'gTE5BZFgij*aOcYkBj-h1=,^1^A.:/ru-huE+4tqMEelBh$IOmGis#]V,o*F!q\"(Vap2d%DdF"<+YT!^O/\7RY=uGZZ]8;`gN&\1QL/ulNVJ@E<EUQ,1fpVTS6En3<3!*_\#PhKI]BU+<jdn[RFI#0;R!7V<V#G/EAM!(aa4mU%"jt@%],#+W_4=VVNHDZ!gkOu-qcH:XSNRbpGB&k5CUk1dW`ECKM8[(#CJTaPk%LVa*oc[H[F,!)D"`X)]7C\)X_Kc,e%A3%(KlL@%.iIHl=JJu*d1okD.RjTE<i&M)/:kN([PA.bjf266SXQEX0$J..XSB-EZkgGYSS8,ZKN`21L:e=_#AjURWqKSY7#-"Ui%S=jhA(PG%mM9+TS>UfBb2.Pbc9ld\HV47c.[>nNC`s6h<I_):@uP@q\J!8q=mbsYf9<l+!KLD[iiDTga]jobn_i,]>SfSKYtA8s@JDW/$IH"E%R.Woe0;UeFp<W6XiT581M*UW$_jr?+#<o6:SEd1ioWOa/.2pd*ZJ1K=aZ.UU4iPs=XKR=nKR]B>Z;Pi'?'Vi.ns99_2"9Vue<I"d%?IAF/>T]-_Q5TnK%r&A)=(f2fDu41dqB3Bqg/aZ^,thn"]_oBq2I)Mr5,f(4d!5or%sqfMqN0ESBX]Aq\##u5\5$&,P3C\#lht!b%^MY=1(@`[UIEK76C-mdL5/ap9B!+aUr7e\]KD5lCBLXC$:b'Ro(\H:sh\l;QVX=-kM=A=:/?_@N=?^X4cti!:$+1ec\pSbX#_Tag%rNANVrdDWDp1Xu![*XK>,/!B!)!@"On:,phEF@OA#4#+s4RY+"liak.RKaB8:ZBIKC.dA`9X7$>'gZg\RafZ[4cr/k&NnWKPB9=P%/(N6-YSMLCcOK8(_YPaG<a55CU.=*,.aG=i('!O%P!Kp[Y1_uq4tf3+MT0$1rb*[]SrB]qb,'i",r%8F\:\u/XUOE?=iO^r"!$'^%*dunU(`bi4L?&"3ZgP\c-'@Q)N5P_FW6Utl]GaS",OFb#k]ahuEKhMc[ud%9>n(8R*l:c=<K<sDq0*@dFqCQO&#Zu^]f#!o#\lBQ%i`#.8kjDVRr^S5=4]6@WhtIYGn=u@c\g&VrMV^8E5=n(R4E^/^.*`LpTK]%Qc;KBKFgOf/([/<';YDHflf%BP;,@*BE[%VSC1:AI%'/hQX+t3EB$R9-B.M@*8Y:8&-5ONjT3pbmO?FfQQpM2DF6f?$<&c$,2?%L)13bs(KKS/Y\S-?s$_WrCJ$[ek@<2LWg7M=foSKfQq%$8Z;aMW@<"NahWMf>gr]oVK\c([eF]-7*i[C,hB??eg5QU&5pjnmlUk_U#fk?.VN(B^f$>%cQ6nZ!+P9O-UXX@\,XGl[SGB@41&<%itpLQ^aHck2_Q\a)gp$TqE-K9?2%\C2%#sFXoRq%;fdrV$OXqeCrQG8=0B?rXL_ioMIGLWn7>Q-K3t(qrt66YLqR?f#(!JoPE%:$%4ZQN-?^45``>=bXd&2S(k_`NBcu8Joi<r.Z;4LfYKid=K4ause/'tbojZ6W0o>DI%$Y+2OA\^hK@MmJD^^L0p4g203erBBoIKb'/%>(oiap0>9"hkG;u4p*J1:\MP2`f0D7i<XC/j<soXGr.Jf0bOS8T.>T7;[LZuc(dQ(;H8dM"7/%oKU`5G7@4V2K0a``I/Ln<0f-YL%^cZEVT)>2'h?SCfHpUb`F+=H7H,`hOH!-hiCMo^?9A(/h67N]drP+*]Bu6e4IDW`tV(kfmq,?pU?FY4"oFcQEdgi&*jAuKIfR$8d%or<?.KuEL\h?aL9WYDEU^7ggEhCunkH\^1"hksITh$V84$h$E2/g9_i@m8j_<&(/`s"1Flh6uh(b>4307Kn6D/B-UT]W8jA(sc"X%Vm42\X^7?d50)i2HB'*Y?PQJfQ+uXV>`beDG,2hf]e6&@,Bn4BhY3IBAUc2o/Tm(]Qi"3*UIR0qP][:^?^LLIEs9OFG=m:9bOBqe%s!p]\b?PuV!9OV,H-EK-\[)r#+a_.)Au(\ibtLQN2h(<ZeUqke@aBtu^h[sag_9\+3"ORf^'Dddle:=O]H0rWbjf'h\&0t.IY[o'%n-Y5>Yn_YKoQRhK7g[<gS38"l+X=NDcI$.>D2[(eUkT[;j'flgo-!eCOBOK17kAU`iKfih=Eg#.nu7Fp,M)dK#0*+%5?m=q&m#-Q%rr#A>L9-5O-"l,YM%L?LZH%2qBK?lG>AB>NXq=nL_$go_NtAm*NT]&g,:oVCreb,(1'U2F]VkqI1X>)3_>5E`AHXO_i\Cq9Odd!H%P.GLMT0IX#d&P$5OBT.@^7/oU5'&CT'e:`bX@WmGCZ8>,r5EmU*(I7PGFIo/Mq<igHb;ek5_Y/U>bSCpEf\>Jr2n\%`mj.R9VXc=%Zs2o&^?0jA/#UYKgFMFhe*idD2O&Z<_(=Et+^K)*Na$F@BtMiCHej,Gg!7j/n(Y=rr9"Q%9L%U!DLXV6H40Oo!V!jp^-21Y`Q$s(%6>As^<hn-fo0p0WI`g!QGLr9JgRW!WG(snJr7,Vk?N\i)ON,Ilr_'$X3k4J8<o^%(aV3I1H2mCf\C(?sq/uS=_3LVkrI!@;4a*I2%)M=.37]6!*f4poVh<d(l1NX4MX?/(*0C\()^=%;mrlT_.[p*2#U4Bc7A#[p%#aYF-Ba%*V[f@6ERqk7%,7MN@*PUUb0>RU!D,_IV%f&K,qnbVSA0!:n8lX"@SD)ehQfk<6Mm^ld-r%l!m(m\2Ef(AS(jW75`9ZQU?qtUu![#mTOeTbrZ!pffb;oqtA6LtBuA!$AcXJGGU%Q`o>B+aSXIRb_4_n"oud(]'8$c-9Sr;eitQHJ]M/V8L;o1V]G1SN]6P_R^LOPl+BR.FJ:un0o63?hjYq!B6P0#!Z+?TCm/#cH56C%^lQ7ha%,pq)aOGG)u5-aeMee(&($5u*7]M1.ksD<T?ERolgRJu"K_Ac*/LNQ7]QjFQGZ1QD_lSqqB->q9#\dLjSBo/EdX38Y'Aca%XUR'^qbUR;Er&6s"\'X@<T-Tpb-@E8:Oo.5#V_rmd9$-K&shZ=-2AKn#(Jem+Z:70^\RWC_>[m?^);:fI=D1Qc`J"n]E2?2o6C/`%CVi,:`hMQiVt%N#`<>H:Pe-bbfXgN.?au&\0C8gQ]W:hYq\tk^?CcT?d_5IWdHSB#<HnkYK<>h:qH'Hb-HdUGRo&MV<\P='4m@]M%rBH11QhF'."(GI$];Oe>(<jj_bQ$78h*08.Q.-4P"6':aplG\7G^R?U':SnT0qkIR,1H</)n2q](;_.QX8h.4IeVF\[@dJuV>gK-%(L-hgoAHidG#J>&k]!ra5ii8_*\=RtjS4e>$g>c`;-3bsYY)Mls7K_MNW6o>T\Fe*qgY.Q!tHegq]udD[bV$L^#/b@is3h?RH=Ep%rj+_T+&,iuBf8inqX7,Mqk"o:5@8EG;#\`qPe[7I6d]apcp7U'Gi/C`AMBk:J!eGRB@)0X2'3ohAJ%gHao;E^:OMT;rRSMpdSj!B%j747edXSh9ccoeV*n6g%qr*RgO-t@RDob7DJ\h\t9N*l=qrM*Bhrs]MgPsL,rXPQXRTK*i?9=#Y'BNM"c-'km:G6*C[blE,#BmYU%'Rf>VnH#jjB9V[Faj(U2A?Z:Dc0he58Yb$UFrp[=r(),53NIO_W>V.ggh@5/dVNMIgQD1_5)qPJO/'2@.uYsk-X*2*?Dm>AI;Qd,%hYdmHGeD@H+9/7,YnoTm#L5kJE!+:0K2Y,nEnkAPS"7<_q9R<8p[VP_O1iR#A*^Do[l8`08gs!cZY85F^Ya9]G\]Duo>g6"3Sj;,%;,iEFJGc"]]CiX69AY$PluW8@E)gkY#YVTP*q*GXM\-S:ZlZgkcuYuZ,j*=6;teqT(IL&J?%@Q&AFSF,[a.^l]D;#%YO0SR5FK.Z%f>_U4"7u<cenXudXsTl*N'D\FEk0Y8P[UeG2>`d6]R8#.P#mS>Cd``(14Q,j-hCDcQ83nni7gd)TM%Jo`MgF-Yo1qp96YK]bAp@X%NL.Buh,A7Io2c1Aqo?2/!0*a(r9WP8%X<f"fJo$*%h/_2&RG)#^:tsbG"Vb3=7B3&@/I->k7rEFd5d6B!">atpsRC\J7,^Km.NL-%-Rg7'qJk,5I"dtU6h]EA=<:ksndZtM$A,a/Lg4![C>SVkM;:'nNL)_f]`KqF[6+--qgL<HQO_c`ct,(*BeO<F(\u)fl;YAggEJ)Q%':9Oe%g8GC.]@.ua'KKj57*A+p3?u]jX!eck:p%i@h*Ks0"p(Tgcm!.i3"Z<o*F(ZZ!+kU+6O'Ao^F2:9@945UHm(B*M6r_!>eL#%6@[Z56!:*OapR-cMe,?n(EXDsI+MbJ%3Ri+h'HEt/H'JD(2k:AcOF-NTuu@ehmGMa]ClUDD%HGW2nc"Wgpd("HQbQ>f[?>f@_77@%Baj2*'`8:/pT*-G+!G509$p6<f#?;.CDH]uC:k=3AM!RWEo11FStCn5H%Dt?`6s#t1[Vf**MPb?>KuO/^ngWEHh%ZCW0qY]VP<h0%T1H`u6Rf;+Y9;gH?[fEg'^Gn1qZ[`\q0:ZXFAn8o"T`2ZqtA@.`E)SC06?)Yq_`HJNc.s0.*\=lTl;:nV\9WY^!9I,lZIrfJR2t;%*UL2&1ah,shmuMnl4s5bZAsFKoSWCFf?V_99A4E9m1rQF!>"FlP=;qdlkq,8$PX'>]"X@-IP#`;/;\Uc>fhaPbR;Q"hW8MeEG4pd%Ys+:TA*:ST%Bk"6DO.5ge0_c_jHf8+Mc*3ZHiEmkKamk^gV$t=:("jF4+bGIcioZEkKS09CET80W"$lQ(l@W,Q3qpmk%i56^k(qF%[t!RV*DhVT"#q:Un!gNN$oub"j?g\C`$,g%OVO4>qkCG+ods544i?*.`(B-#YfMANIg%[Xpeoq[7]S!()H\U\HuYk3f%o44"A37n%?Fji!Kebfq/>]J@-lol9at]OtEN;B'VB\*9>aLk0Kr--(9_[pTN_5@F>cm-qbuQ<0]7!)t/%*Gko:b,IL5E#(V+9;>.:l[41>IWN%Er<j#]D^9iDfu1O;/E3c8%.HB.U\/Xb9r-hJp*I&KA3SR.4PN:kb\cZ$J`B*A&(QO:LCo]XP[@P1,/n]h0=4-4pKn&kpnWI$Nj3!%WHA-@GZr=@C#4H8dc^`']Uh@dEcc]BOT.sHmh(D2[]`JAnP+R8%a(ARdD8)X[(>"o<g,(nOF>Y\J%+$m!ep8r.A-kf'5nQGrAi#@%cg*`'Y4[sg;m4jgFM*=*c+?>cP%<Do*k2q]"UC=boK^k_dRseO5hets\Qh%k"/a.7:]S,P1jtafB;AY2om#B\5!HV9qAlBZJntdO%SV4?gWF170;p.&0Cq^+$I,sZ_T1W7Pc_Fq(k<h:Ir7*n0Ed2tK29Wk7(X^NU7mP",e`U+mob8fGV*95Ek[90Cb1Kq#1q#d5J1*[r%Gt;'T=KMDlp^1'u98_#O`B#+C45D6,YEN:dlsCurf*qM@]HbehV!]?iC@ms7;ua+NM]p,lM%<9/:IU-[1@4r/-gQ3\"Sjd^iK-m;%KgS<!G'PZ@6?j&nP?pGTmd<,JXbh;=>*mgb+84.&q/&\P/KHAoD>`\`pe<P.Hs5(6$_P(MFQ'pIn[V`#rH,N@G%OM#)RZ3[jgoY9%>?X+nISDEX4)7bFV7Ddp@;9NTl,2#fiE(5<q:?irqXLmO[IgnR3jj?S;4C`d%Q(#hFu`@CRo@jk:I\FO*^Jn':WCE%O*/.qk`5>d%HN*bLj[["$J'jO.s/NAGe#_[=S^.)cD0bsMnDiZ&gKf#H5("g1gL#s3Xj6T@V=q<Gq744??Fs,PbP$j-7A'Oc<*`WhJbJf>UuClp%MYb%K$Q/1[[,:7mhKM1O,Km\kaZ/Bjpc[q(p"m7Q^&@Ru\UUMTb=@#hSSq-p"4Z_N/Ziqe]q^/-][WO1V67.A3.KfbL7d3P\GNQI%DY1O3mGRh>I&#HiGB7p$HSMtVn$@fH\O*)p^JX<:Dn?S<k_H/5:00#hiYt$]YDm75FjY+a=7D^Hc7L->,W'98RW$DUDT+PL>[Ah$%AapnOdHUM@Pq1)4-OY]L@o_fd^XNl7[:TcdVr_qsUHb"1RBL7PUG/!!ZeI""F1\p#Mc^*hs)(r5dGqdJ#^Z1<^",>($FG&i'qWlI%T]C%Fa$XZdTmp+$=2rr[FU8sDg3odhrBi`Q;6tC%h=DTY.@HZBFM>L?S0p-s^U%8//3UGhDY]cneE@BMXF56ENZ[SBl1sb;rN6gc%B]nc<>$.0L\G?umW)@iKf)8(3Q11m#St:/_a#@a<IT,OhG"uL:3aM3g00GNF:ZEA<'pS+I\&3m(=u16ELWuTIO\V0&h:L[iCilom%]q=SJ)trFD!AnQ+jpKM@mb=""dHK]7I&'X*FT:Tq)r8)SWeX(?F]6u.g+q\,bn[h=4+Fj8e''1tRZ04OYh44pCio:5VHQ`.oP-ZP%?#=ba;5CH&K(i<Kp[4No^">eMD`6H"2L9V]o<Aq[-usdsWiDT8>r](pT&-)b4+4WPG@DLShcJQhNLk!R[Th6pXq3D?4luTAhb7^*%A)[@_QQP>A7_`cp0#faU4;jX%\LI9e,Tum9:qdru?ANOlnEAj*7IA!%Cnom6`D=u3b*W+44s)Gk]1?\DY2"F$o-(iqUWnM<<Ol=n%1^^?]ZWk1GX98Yf4&]JrQ$mPW1#:Ro0:ImGgQsDm)dV`51e0@j(V[XIhnZ8)J%+!cNqLHPafK1Ja^'irRWlojTh15YF6iEZiC8`r%m_d'_CimX7'Nu(W@_XmF4_*$9dEQPN/%fc3guucUeoCo,;s!l'*&m_r\,%h4hM&;4pH*.4TbV7LeB\KJe.m?1h/?u6rYB@Xo=2%J%)I<;@%$,MnXAX<;JK!&tcM%"3;/Cs,3cih/Dm,2+;5Ff>L[Me=Mr(@;BN4<XcCOOnbLocZrt'[fiW)cg4PRXM(jl4`1%dic]jBtM%>b,)#)r9PB\>q:cp#W/>A[[=pj#G9.m>GQ-B2uV$7lJgX^L!`bMnAi6Z&cWdR$"H+m-jRmNk55?Nk]r8h:1T7Q`X$i=*sE1G!F8o%j0.l"hf=GLV'Y^biOX/Q\@MSsQZ.*9kOGR#^(PeC3W,mL8ZFA_?u02<p#^:ks/Pb[XDtYUSoFA?r-@tQQd*TO%qGL%`@nQga%F5)%43KQ_lgo8seUqo@pY(55&:aBB"=3R,m`j<\_Y&iEc[*'r-!Yltdp@<73q69)^E$N+N>9/d#%QO+Y<;+<^\d0>\`AN#<uVt0g@V[V%:Vp6*iiq:/5&/*prDWOcC[UrbFR7PpQV[A=o2CD`EE>5m[@9t&K"h%pING[/qlae#h4mc2B=us=KKA4akO-j/\Q\@M[i_[BMhM[?%5Nli(`o-^I_W'^E`J/m:qWl"R=3olQ,pp%fm`bYWm\T:J33IS)R2oq/"YGY3`P)$2e8js;bLH+YGH`T9mQXLl?S/qL[pud0X&CNq%2kUOa4P>,:qHEb&H?6YhmJ/?#%\/kG0LmeQaOhXdl/r;TfpU:Kg?erTGgfl)mZbS9ZSS`.XW=SN@qW4j'Z')k3jSdHcYVt'cCR-%%jaOF:A)TJZdHUN%Q,H.WHGqp;B[iIO/*TKPJ)`I,C@q(D8u(->Aoa[$gRV!@;'!'&5dSb]bTH0<=uNtJ$7#=MYYjG&2Mg3cRjWbV%n)(gJnJd0_hRCc?rFR8[7V[:0Dq);09Q"s`rh+pFA[kmK*>07oCD(H=gS@:XM2e5f^9+I`Ng2Ga`(!TG3D2^-ZJR'G(ZDXe^5L48%\dZ.S2,E,J6l`qsB.A*^du:C,KTaeSCJu+nFl%#-$3>$qA+mFoO,k6BV$hK#cS&;Ph*\&gpf9i^DjM"[1$bt:m@t?1n\MMUgJ@t>%)tFN5?"kj^"P;,m4(++j=&mZ:`^p=p]%UJ?S\P1Eobp-fQ-ujJXak=G?3?)t2ja%-5_#qOl=/k!*=M+:L!TJDf=)*<2rKY/^+C=-%J\oIrrl?9m\=W-j\u^99$O(iD@L*hiU1[!Q#\m#u\,&i"JH<E%T,khqG::#Y(9'H#0?KdM7QM:K;X&15Fd_)'TBrbT>'s5!_I/9R%QM98@,G![dJi7nupbpX8rODCZ$Gd>&>N;Fn2hV,-ko8fX%gL;9nq!GM["ja_qF:h)ID;/0XR,PfIJO"T)%'LqQ(999H`iH]gjN]^%5Ni#NA>LiLXuqXH.BBR/B'4>l_L*!Q90OY_NVV=H3o4plaGR3nbN5'=le/kP^'5PG7NZ5*\\c/8pqESBIHtct<TrrYgtmB*Pd8qA%\TN>M9C38[p18W`$9DJiE4:N:oNiNl:0s1nM*oa)hs]qC270S%@oQg]$qBnO?:.:);4<K61Oi@i)@MO>i>mn-SrI&/^P9_GJ,ps8%R'#[X0uRM5AJh._V0Q<n(Y7,he$Qi;rJ/bZq3+<9bg4i8Y=VXgP=IIQ!D6ZjWN9:9b"u5g<NtaT51oO4XW:\kNTpC+):i*iWZt,R%e@e0TF1Jrkb\psne<bEc\CIM;V@th`n:]eji.C%.NhMHPoRWH%)l6p/V6rk/Lltj>,kOe-UK,%>+6*U:>a^Z#_P0sAg.PV!EaBth%!dC8Z;L*+[f!CA4f^W305qibr)+1cU^E)I:!O7k>$ou'ucJ.jB;uG@)cJMBn,7DOn)V??[3^m*GrQ1_\6$p@YP.J"Lepc0f9N:6Z%PJ)729@`i*1H7q%b<CCr:K6SAP/jQgI]fr@hQL0-CLr.bNjO7hp;Er9,aog(OM4aS!K;^mm?e^uF0qVq-9PLad'Us7j\"0Eh8,qn%28",!pQb[SfUq$s!6u0QB]Jp@_bQqPSLa=]f^ZPi:=Kmu@oY_ZB]%YrHUAXm]URY?PJ)s-NuMMa&!*:JAfor#ka$YLffjl1l:+;]%bBhcQ$;'P0__e3XG`e#jVA.dM6!PO*8#!TV82qKolt&\_N=;9*6EH!C>hg16g#TfBl++;k0dJtaBp8H?kh;W3onI6)_5X]_41s<8%Y`FG@!bU),@[D+hTfP%T"7TtTYiL9%:5AqdptcHqmjF-6A+e;:3m)L]O^@AL\j@`n7S&^RqYIR;h-]GXL^FpYA\d-;ng3,DR:MN]%hGo$)e!Cs91H0O_CV?fB4ONL-<Y?V"*!9?I6'h%NXVY-uaN)ekD],YE_;;#Ld06-&+\D8OJ=\lmhO?q3^!B'?c`X";@$"6U_'T!+%fA@l#&+:ir.d"(K2j!XO$_`W0@X/+N`q)]sfmW^[.jXm8Z4?*Y>6Z0TDLe'KT6:/N=V6jR(2Ds.1Q2hia^5/&8b1Jd.651&6_9%:%.ZL.D8m%A8MlP36jQ?jfP\DiWX.Nun`1>Du\3J)^;M-gb&FNm!_I?=PgL<MV_UVEq=>,"u))q\gYC;q7X1Ve"W]+,=3%O21#*_cY%oY$(-)i4U.mQi?8GrHXNd[c*&ISlH)b9D,riT-)ubHa;I(3L#V9B#XT(tHT>qRT=,F^[lH-9V#$"?PFA,%L&q(!Z$I_TGJRedKr/%]"\t1;o[q@<T7MXDe%3Fc!$"G$gdBmXs\$V%ac5F:Rp\fHNd;!f28/gJ0tk+c]E0#@.2-8(>^2S8r/5q#>$,3^-k[fKM?3:JbG3N%!bZ&a$hcGldjKF%01h#1pm_q]!VJ6MLpPDjNj]eBdE[L0BLs6X=;qq3B\fTMDKU+35,PXH9ckf71[ZAoA_QpJ;ADlYe*1l(r`L42%)e&-+%F<G]Hl#c.p`/[;14-3(cV<EMfr!3aSX#"YEf$BiUX4\-<t[+Kd+2X<NoK;hU+::m!3\%FK"A5l5%KJ[\i<JBUpG!]_fWmQ%=jI17*1MZ)L1.Bpp(Q-Gjm2E`&(/AoF7,*O.u^U'@*$/^2@_OISu<hl<,Z.qZC\<g+K1T.9sB-1I:,4[.jn1?O53O'b(fQbV9-Sc%iO]@g__:'6pE:`or^3u14Gs_%X8rCHj(!_<+]OcHHq]cY+j0p:)r'ORKc+XNN\AAc%.DW%Q""+?dI0H1#['-Q'`/N@hoF91.h&L,%P;Gt"Kp'>1V@U%RUgZY,@S$:"0+13!IBbFMKd5R?0B-N90.V[k;goQQU+QHEqOVA\L/:IB1>QGk`kh_814uGSGqr?bBgH@XFJ11*%OB3Tjf7l$R;TLn_bUjJ[U5Our4Djg,Q3-p'\kcZG\GY9(\nIGi(F`:'L?0-^9Z7jRFI=PC')fq/K'B_5@\b;<XsMj"QdJq3,ZJAX%>[WCi/tUL.UT>VW<N,1Y<3uejAZ4E(XK7bVL^.B?Ma'49B-9=#8BIRpgXO@Y</bRsPS/?O'S-jrJgO)-3gJhC:0Chn6l%s/?X_lc%n<ip$cXrS0RC/rYJ,MRMbddVN'kcVT/qYcXQqRuqH3RY^`mBN%FQjZbCqYk$6^OB1Q^03_9Fb?S#$j2mE:b-]oF/<9@59ibko"T*%Cr)6TkgD9NEeVWrd%tC%;09h]Ep1rp;>/HAEp1q-k^m-NEH:9k1['KU2E6IE*0?\\@J1V;D5YCh-YEKtrY__/8Y4f!GF_$NgM=:i%)=jU*>2P^0[E%_?7"f1HoE(VELP[<QhW$\h99(hJ$;^V'2Z8bMM]%_pQ81Es_L$YZPqA%[513gDB?k'1?ZFG=ac,l5B$T<e-"fCO%E.b!/WBXr(]q[qAc"5omQcjqk*K'5%/qIbn:_6t18\lP,[jJF?a0DDEa[F#U/QHrfU2C/^]7hIQLN<krq(f+n==1Z!Dqd[^Uk-X*%,DC`&\Kr@FAR@B0RLV/AYUV;qJ`ZlmQ%_T0^h2D/$LcWs,;sg@k$plPeX4'A%rhjl]t)KG%/VBYSsX%L</RZrj3*n.37t[Ca6dFC%oWb@\Cp;r=WS^Ej^E&Y+1tmu?PEVNh+.!.#YmQ>5?rt$`F^g_#^@Xo3A<+".hbK+a%`VcL:93I*[.W:qa+Q(AW7#Z,Gj&+I%(nNA%RHDhd*>AT?6lt5YqQgB<L</BoQkPZW%&"YI;;(3WA15XYq+/e))5a^D<#H?Zf)r+?TeMeF'f,D("\0LH@q!E]h<>;hlE,7TqUgT.%`5Bm9"@fZG'E+4Gq/T>MO]6nXE"XrK5HF]?@!23%Aht8Y\Lba,T5-C)fLpHYKN>XRIQ(":R"c>k[03U5J#3lu&knQ0EJF=67ZqV[%j:o)>CO\$!P.)8QA=n[:^iL4pTd*9Qfh$\SM>+B@CjMoNXa=7\l]Jf3Z=5h(-oKUHB)9.Kj0n/-Q)(:ARNNEaFcnPTiauRDI13\d%aQg5'oW^eHp#`S5fCUo3\_M^1A]7Si(FMlX1;b^X#n4t89C,P%*uWP\L@WE]F@dQLMPXn:Ab3tOMGDKZ'UR7Ekd*?/e;rFA7n0+n%?O,5*=ZeGYlJD1.;/.1/G\"HM^&_i`o>bi51?#PDe@iE_LDJp4nY81OVkFRgObq0qFT7:<+<6oP^5URho(.V+a<^QV&M\n^m5$*P%!,el3Paj<t@e6]Td<tW9eDRk,/B[PLhB[+S2pTqFLk.+3#(,>&-KEULTuBIGL*^l+1pjZEiIg28o&Y!I;s;*6oW^sN6;k8MTY.kp%@MrZ#<;3]<l_Wdpq(aQ[;g<83#US(K5GTc"ak9#RT]MTP8D#u=k0kQ\=O?.652UDoq/@;a1VbS+G!=\0cQ=)i+"f_aHIDV.@n!>.%cA*>MTfSlp39&%iYJ<I"E3W1A9oKT&2'4Fh%4/L`-CYM^oA!3ECr6!e)4hHpJUFuC]ECUu-CbS_@uDXLl_#V:e.&u[^0!OhJ25/5%7NO:SXBT:nM<p.`(iAZ4NLsO<9IOBrjM6)i,(h]?n7"Nmj*@$KGkr9-1N&49f@"Rra2bt+k%JD,%^B][ZWR+(b:mNY%o_-/'6-?s%co_1R51=9k),Wo;h"V5iXR&&pjWs?#`+?H$I5sVTBg`mFHr",f?G91qBu!\Dg+pla]i%"'/AkjIYR&9sed^5p]Up8F1p+\MCTK)b%Lm^P)6OQrFpU!C0iDRULKs6-.FIGK9a@Q7bM2]sM58273Kuta/Oa?t=!ZA!&ZoNu%eAh-sEdB=j1/ag;Z1qoR?S'Z)70`H4epJAo%,;o@.TS"S2Hs@aFOHbNt%NAr3:XiO<?g_-QX7HE?,+Dq4Ur"GKZ&,?pTft@gU*i(E&Q7SNk%1itE+A\q1T/)!B31+^$5[sld7rdG%8VN)q.SMr>0$->Dd67[.R=uADStDO9p_44")"*7M;17eO@LlGUKJVjV:4MtF"pZna(4Hhj(colX2uJcriAMLhg$$sq.FT&-9'?=g%q=XRIJurQSDN8ff,=MaJUG:aoG^r!JWH#3(/6+nq+Og=8p!^'lXe25'Q?nhpXj6[KS$gSM-T+u(<_=IKe7P-k:MUnBVk;Sp5F*kq%[XAQ1kGn35lh\:Q[m")-SWMX?!IsZc9X<F37PGVd'6\%:;'rp"S6m<Bh,g9aYk?Q3eR_XagI5T&)4o'MVI\?,Z.]MD=u1E%p:$i.%[fI@iYBk5aGcZ'tUNia26W,Pf69)k8P3d@.C4Sjl.:@8I[+AtJfaSJ5CaEZF)%.l2G16+R0sOTP^A$SGTi!q5Y@&@$IO$5Oh4u@/%c!&5KDL\,Nl8RF@*adminXu#okXc,-&,4?_)[/F6[<5L\cg!&GYX!XNVqJa8Y*Cc-e#Q*:*3Y]B8`e"PC,nY@9<7I:Q7k:-ba1du%&bW9%\JTm$9oHP((igSG?idCl6?nQiQ6F$m>ADJfjJa'X*;Ys"..P$=X5m#U#K2h'a*Dp\lblP]M`XE]p6dC?SKp.i(U!5#B-V%V%[W;U`^iRH3EIFgAa:3skS'W=!M;q5gpFTmVm_CFa4DQ&qdPHPSL7Y5"qY>-af1UJ;oCCqY?*bP:2osH0HoBfZI[K*"l/M%0h[;BB%Cq@,]](kI+N0?sPk7`eW04SVC`T>O-OnguT2KiQ*rQ*Z6&[XrIX!a-+(K]/&-\Mo!9c%HlB9UESACJNbdfa4CKX0k%Ep4c0,88.q%Mt=9.T*mT7Cq;T5]5PAX.[r'P3EHm<VMiWo$ce9&,+C2[B[c<D1n-,#9@5++O.T,_2h/BT;!MbLCq@.PMiEH0/"<]VWe"diO-!)&%XBSFTRr0X5NLW_p?PPatD:7*ZULJ&LCq;S6.l[!7]!r(q[sFe%FE&&V-D!pJ[p.8s"$^re?!K!fe9W-"Rk?=A/A*boM/9c5>e6k]%)*aTC%N1thZ6k`/QQ_Q.!nh[8\TB:`nVqGeDTp]nA,o*E(OI!l@Ur.DRu6,ek%p&oM,0PM"`"p<5-HTA9<$Xa8E\O"C)>Rm2"5&1%&<V9@MWTcaAl(%aO[-&3-R^6P4i_cH^Ists6)N,mL8(TU/oc!RDMEQ8XE]U1Ue'N".<oT>?+lq*Y-:>/ZhOCq0e<rH_Q6ZuErd_U%I*g[\3G\0*gkDAAPt`PHrg:<.%eDEmrc$FumSYgNZ6dq1H7!l_I'P`qDTi-0Hio=eS(s1cR(Fmj`K.nYpQOf<9KD;h9<M/Mm?fu'%q_h+fE2$E)h`+i/M&Z%_caeAXRol9$`p0Hqafg=aP[J1*o4-tS]^B?g`;oc,@RoGlklr,/0UP&u6p1JP''TV?roPtI(a]K-ABd_6%`)mZZ,25b4rC&.qb6_Ck,Q%(hNh6sg?2V%&P4j5V?*-*'JI9e<W7/jW6_-t-)X9.h1t7&kk2YX+Mf1lCj20GQ+]M+oj1o_iiT_:T%jFsZ\Wb:*%8@:j1G>b=-i5dONCiEj#apIF^`*2UA`IX:qs)'Do8nWW'+BDP1%Ai#0lhjkQQ74RO+M/7`q7F0S6"PfB?;m'oeCGD0%&_$f=*mum\&l4I[4r[+::H9kB@OE"eXIND4k'9$CO^XWbhgNXhd*U^pa7kMPWY<q^V\G3!>>=c!Qd;(=N`Fs]MFS[eoUNiC&)rEs%ORtqq+a80.pKHoVA=36M0Jb$81*#V54$UJ8rf"IOQ=8YWGGCd74j44V.G?bPEAr`ua4esp:<FN[Hnq=Y2j(bKUbhFn*`_R%^&.A`%Z5b\]oEf^Dc?ijbpL+Lpi@aFpbqVb#,)KSL>U.pJc(8%lR(aH"$_,>2=PK4WNHH+L0LA-pNtY'c^&A\3h*11HY.1'3]if@$Lk'du%OB@FKa?ZYF>AS7Aaj5YKL=QL!$(71#oOY!!p6ZTn)Vu5-Z*4kI$noWoCB`"397F*=8.EY%`,sIbfNM]42DC,i0-`$;fcHNI7)St4%lsQp1Wk?F6VTt@CFOQ*!m\AO%R-9qqM9.hX\=[aA7aI89o2(;fB;?<LVD2X[%'.@4Lgl1B</Uih8Og\g1/Td%\;Od:>UpW*&tdYb%qojA86@302fDr6+l])Ea/:'eGL^mss.b6U?M@S)O^G0\K+n]ZfnW/%0m?5Q6Pk@/+UKs`\@4IH5S<i4#Y?n&)^KHD/:SsO;X.@Oj%>2U+.cPuRhY#,"!^\h@6]%,IbmoZ2H<\)/$C:-sn__BBb="/A$X`4#fG:@PBgY$B..P;eq=2<n(X-A8)5-5k28L]l7\+K[f-n,JK%r3]Z%0\$[(jD_t:Epd:Y\pe!YCfIB`Y'c+B1frUVfRd78d7/V]*HS^L"r[q`M06D19AP-e,'qV,EUdiEI7!AZoR(+_>3G:.)OlBb%(aB05GlJaCF"WW1(HGbS4OU:;beIdBjF`HSrj=t?:2KRYIe20>;PVLH7ch1!cJb[Z6j,#ELKE4:NB0.p_[E6!I\K:6&p]4tVW\#.%'1nRlIBt#&mX8P)&SiuQ^>@18UTnd^jb0#V[pkRs\T$kQXhM-6;Z4P'ERHHkCiYB)/f-Oels2\gr)fD(^8cn]'snAjP2qk'5?YV:%)%\6f)CcFJ.Bs3TfRuSlY%ifE<FHtc##E\;>VlR8_plYrb]6]&0!m)S!A+*.ajIHC#"<3_37ppse;b+'W3JLn@6ujWFX^"Q1$^,A%d^)GXOZtiX'en<:4QLf[M::2>rq+7NL=oS3h7%ZX\K!R^1Hq!Q)nYs\Q$)sZ`<T&^NLS!fj0iq#-^9V_I;8nr4>=/.nbltT[jLV"%7[WeW/aFRPCH\D)3>suj22R+8@LcesI'J6'$W`Q5V3T"a('tnie_8EPfuEZ5qO"U0Qs8rp;DrP"GAp#aE'5pfNcu/B*+'LKej8lE%Y2W]0KX%moAa%5IT`B]3_,"?ml6D.Oq#,AnE#^KmbioR#1F7)dg%X]O%fG!#3lbusneUf9atEAM^W`f;';'?-5oU>XW@q"\N)[SH%^Q2+NN'-8Q3>HM7q$Z:ebcRG>9T0h6M\3Ka<b8*9r<d2hVGoJCnD@Y.2Xl*dm"<e7M(sFA(c)dTlUr&^f+.cP1.i<ief;J=7/$rn%@Mqj8q,E?L.L)ajB?C7nfcN?b0KO\T3IlYdeIf(edrRMFp;KMF!fW45U4q8B#FdP;j.*'g(`P=?0Jk()3IlN<<f-#Wk=!"6NBBNC%?uhUN^66Qd-24<U<"\M3kX50#3g":?6i"TsAc5P_o#5kh-@[H$i"OcjE@;p`aE*Q];rXKu[$*K)$$[[7aqs5pS,At-WTPL%lqkEt%k?![`-st&rJ=YCQXqNj=FI"@538miO8N[q!ch3bu-J-2-%5m"QIc6th':VII[Z*H%0AS,mP@HJu\UG-jN1B/llEd1YkPD$%Kb?!-%+j]gSQm$IL?dc9SL-=-A'.&]fY$ZKc8AK:(f"$5I1:\`NXrh:s-+S([q(h*CId'5c5JM6GF8aN_oc*,uOI1+fdK^I.TfW+^I^.@d%r`&J$cLjhk3(nK3F;R)BduP-*NriMB=QfOW$Td#'RD?@^l)4@eq#m_9F8aN]h1R3?U!NCiMjj34oc*cj^'Wl5B0Y!$]b[(8$(U=J%^7c0qkT9%p^\#ItR#KOWcLm+Q:m%[P78@J4q-:]60Y$&?IPOZ4jRa.+Y$X4Gb=,snW9=#rmaHD1"C"IXTBhgbE#m4p*W96X;#XMQ%WIB9A\Jk!C^N9V$'A:Agf.V9KSKT:Ti`s7jh;KO&iu@#-*oZ_c`m9!f5Lj]ICl\:3rR/02PG;uM44c,kPNSJ1n^$l$5Lj[-=_WNJ%1NJ2kSElNUh].V")"h.KoMb_.30/!6+H<c"pr7cMNd%M\7*ag3BM2u_H:._CI`!/E(Z@(.Sa4moC_8_Ycc[.Do3=M@]OF\0)^R"O%GVpk2`eHV-029^%rWDln7*bIp7,I7fF8`E+]oIHBT3"\*ZdD9)f5J0dX-du,7Sed5:A#!cNuZqT)ER%1m8UibVjn3=Y$V5P'5Be)%'H?RI^[sdh5+g8ZkP?L$`u0L`Q9FDFF["Q[*;a!UiU"]ach.Z#Y.dj5`eb`FT'M_<&\3iqhEg?$V(7;W:?%Z(qP>RXq@\(dF8aN_%oo%5<7QT-S9aP8LAeO;'A^t5/44c,JPL3>-;R:.o37ffh3"3mfb^?R#\o84L&oL\bqo$CdOj[g,$iLYZOlo@$ZgLbKjaP"Q9=pRJ%b;h`T5+K%uiFBmu8U1!l?"hp;56kJ#`0e4?5q#GmVEd.-B6Q1a#W'>pk-#QWVH-<1#=X'uSX"p&]:Fu5/Pdr^F?Ysj$ENXf0*c+B%[$J;<G"_53`nX><E>LR:B"q):mIh<mb4UtHo]::4FnYIN9WdgVEk4Ker:RXa.p/_HIr=VNqu);pV]U]/p6qn^H[*6qkPS;-h>;Ko%ldKA0CqFfYG(-d20Rn.B?!@#OC&U;B5$iR8o6'<`B!5,mSY,4io\$5.G-bI(.'p\F07;Tj4(!#p%d)CCbWbLUg+U+g3h;8\j/L"9%gBUY\jf#TZrm'.qlH7,X;ZHZkY&)Fk&!cOW_dAt[j2O^SmFV2>GAd6G('d#L1+h,XCb;bLLK?G];j@!QCn9<>SaOD9)-iFsbuf]G%k(WA!f=S`Mf6V_W^/eRPo8eF_Es1YUIno!ceP_CU?Y?^<-[.IUXM_"jLO2[6A*&ier@#rD^+3G.cT:N!Q,<(Up;a]cVn6`!qsM7'%nrc@KR]a,#m/;.CJLm,Ph<Fe(b#IQo)c/::E1VSn3U2:L;`2(4IM>s/h^YW>_V\PeLZV7%+<EH-\Ju/U>;N_%<;rD+Q?nIs-.fXY%<OT9*9n473h#)Hkq67MArA\&&c*`PB4*u!TrUt5CLIS:D/sj"k=jsOrqY$8$r&2;h>;!S=kBD)neZJ;@+**)#A##jZjLf<b4oKAc%d`'[mG-c8)XHXWQ<`$f^@RS-Ah@0O-Xo5&6S4sg!>05N3k/\B;8uAjY5658`D>:ZQ6pKq89dbDjYY"N36&j-#qPMSfq!b&-ZZ*=M%r;=;)Yk``tWWW4V$[-VpH26E)=:AN7(2gen(c`SGFJdoAQ\rTe%r4DC$VK?ob3\OLH/W^n7]L@p:H(Dg&f&\,\G5dligk:-,uDq]%l`,Q@Oq7r^Tn3SDcg$OuYMi9:lb<=(nEU"[`'nQN<I@EZVj2d[R0@&fa7E_''tM\^<Q08J.J28;okrrKIYqn/^0[dLVC8:aqGQS9%oLXh=T9nfB[U?4`B_bntXXFR`NhWpV$X:gB_Y;=Lb5#k8,_9M^6R<,Hhg-$-+)3@GeX%eF;54c&;(^%75:iA=mo\mg`aRR"G!F<R%C#SCB<3@A-p[Up,5I^C!jh3<SIe`!#/\Kn(ae=2ep*WP7mB!!.pk>\OX*rf(RI"^58#H(43n*:3:ibsjl8pS@D/5hb,JIk&-<=Pq%'fTJYZ,Wt9b#-Q(>%"p?4Z@:,U@'*2(ETu4eH3G[nc&MH@SC#^QF>'lG&T"AhH7Jr,q[9c5]6#DCE^K*4>%2cAh^P4(el*A0oZ_5%mDHuh;YP<dGYRS-EI8JDAg4/F$B"lYbQ\UaJd(!IRg!^*Oa+d,/9LjrR)X.Y8RNTg??bpSaW'ZULmp<QGrj05cJ=/Gp*+RF`q65r%25:WRa.%M80U1"FR`edZ+3ls\(n/M=#A2@JcW75Y>qj'DXp%+;Dg4QRT)2MSDQsc80Q%CabBllgQbPhaG+ju_<T8&j(sr(XBhc@l%e`H7C1Ve.amIQn6O/MP3BW/*L_1K-t(N=C)a;3O>!BUc)Mn4<pn%eib*$P2](9Hc:5T2^8ME0!N&L_hsc%)CeKtRi@K3@F]kG>T8%Xa?`eXPJSp.2#Z'p=Rrj_HQX(XV![,L7n;]J-/rnO$^42\(fq-TLh+]XB*%3WdP;3:4c3B>p@HOl(N!;(<U@Kmij%sQcHolb]Z-Q%Kt_oq=)f-RGNXYf1hOKFe]qk:cP7Cqi]Jpk#6gqJbeATcr[\E?e+=8JZK[LeI0fH3-`M*eWkMrI\G9^@5ro1L,0956g\sdd5tbIV%#I8Z:=U:RdlqRqrX*&TA*M(1XQf2KTH%0-QVV7juI\K3-Elh*l4a<Z4kAP!/Y(:\SmHDG/6tRrXltsnsoqm]9eN9bmd1P("N8L+d%YE+n>(^Z].;WuLI59pl#P)fb4bu6HqN)<F;SpDfpp/(gl]RROSnrOE.Cr^Q?&ptDWS"Jj+"UZ.e7j/SJFpS=?A)-EME(U<Y5t#Z)%m8k(s4;@.0.o-+.MpML.QggErnr`Q<`:hTB5_A^,#3k(6kTG]l6td&(>'p$tCHmiD;QC)M,#j\uK(+'F:^%r`4A6L;$F[+h(F/6s%k9]GOR,]tEL[IM`:+8_s,7R#@>[4GM/Si4*VI=GH^hA--B5j&74q:Gd;l+k*9Ni2&6+T`lh5P1:Sig'q?&hlQO=Ec\0_7TA$s&LU%,3F_3]dN(j<Y=[cZjNETPG`J3p$%/^ENEWS&?R-AQ_P,c]MFeHQI2`%WA4VfEb4aon#O=#94b#EHL!_Jk9XAN_'_Em@$=[[>GPLn%)G:su63b_j1mV<6!f^cfo7\<HNOIg_Z>r.$`ql_Ad+Cn,#h%@]_apN,fKM!K7=1._,#?J6Y!7b,B\i.9$5OkV0-HC`@Ud`_b,g#I%9'!r"]J$r/6)p.`&L3E:An05TaQ\X6_R9LYH#Zf?9P.Z'GI&Q"a_R54:j%8c/P57CXMFSI9WR(+85&B\?/O'?S0`R:S\"agYg-i4%HXEAAMf^UKgN-.fk)1ND=.>2=H1C9G'12nHd&s/[J'S!YPB(;-r*5d_X`.oAr7j5!'k"oPUqOC@Gi"I!b"e_pMJfTO$iU=p^ZXoe%?X!kBC<T`1jFulVImL,_4kl&7G"_f<IJ3V,=^F'c]aN`>kD>G9]sd,lK=K[=/dF!3>2J*f+uq:XHakDp+g1FoDfFZ'V4[V(fbF?H%hW1,H"g$^<_Bo7d-YFW$A$\K?1\q(kEoN:P(5a)sOP#nnJNpL1o8K\TjN/hk?g4/[%$3^F@>8#%`;,=!1g]VIM"r2uq#M.II9ih;%)B[h<5.o+1eN[jf^B;(XCeJ\RI-M)&dIpl0f1VBD_:]pD*pJ9MhCO%r5.Ss^I<2Re\[Hk"2C/Y+nj:S9,cuM*\sjI=2`&m%ehFa&%2M.`HHURjlARQY;Ss9G8hd._rmJcMTI(N;<DKY4;]=..qK%X5:D<UQF]g5YSBm_t8)HUTJ$@Z<GKZ!$<8s/#Fqil6(c#)gNMr$SP%lS/58V=.@Z%=@l!*;j5(&37LQ@S$,cV0f'fDL;N"WH?H#5-&`;^8Z5#'Kq.^!ktXUc]m?tEPAFPZ_"L?="Tkda.SLAa]kh!3U/^j%4MKmCF741Hnuf!a^"g*_SS%J7oA@5bqsNj^q9mHik"FgblL(fbes^gMqduE<14Rs5)Hd\p/f\'2S^>a/h0YC@Q.f#Xqe9^*A?A`+%WEcS2r*Ue((A+.TgsnIe"_29Fl,2#fiE(5<q:?irqXLmO[IgnR3jj?S;4C`d%Q'CgZ$YNl5L:p@mT<hukH>t.Iam-G(L=S4EPnr_%h3OC7%mOt"\_VC@kJNWq^&?J@hs+Hr<TkU,Zlqp)YC?e$hbDn)j8gi]X+O6'&cBA1>!Du#"eG[60f?_oR)\ZE`4,J>.qSYr7fDcP%eA>^2I;7m*e+M5=?-u(Q>)4jWV:jUFBJ'&84L@,sR!l^22*&-h.=C?EM]:[(.tWGf<@(]%NjhE#k33bI(d(.UEDaeAFW,Zg43O5*%X;6rBG)G.9JL)51hK<<l+=-F=k?$c!e]!%a`!nGH@<4HEAA/6Cc[*8A\FAnQqkh$1*tZDR`BuC3f^eau;F$=l&%9/WpP$k95i<N!%RdGOF+h*LHj>fk"Ec%F_,fkT8qRF+)Z;0oTj4tG'E<%42Gc;\O(Khm+X^-&-kD=dA6%udpr-?-/_KpK92+Cf;/M>,(V-TP3V4_M:%4=Z4hM!!SR^G#Mdrj(fZQ'O5d"A"]Q(ACD2Z=pb4^Ti96;MqM.<uAWj1F97Tcdl-tjg01"IoLpNH`uPWjd.VO;(G_+TIPk*UUuFS%Do59CaQl?8IW+tI"+l^oL>.n9bKR*Sg&cb>9V8X2"dGXBUqd5+<PI`[kd/#,;YmUjho+%$5+!lHq%:bFB15db<L>Y!*-s,3GBodp%"]VJ!L),l2W5Nt=hp[3$Q%6'dB76Jt"G//@mXM/SBM#LteT<\O*!R9TPg'4"S4@Jn&c(QDnsZ,Kjb8]?0l1G[b%@%#J\SLp_;S97%oZX%7nY`Rb:u`(db*OMTNHqAMRn(bCe!%[<k0dK6K.8fofF,'O)H=4"gUsGdc#$4('=3`>AsnScR[hgd7Bae[mZ5Pl9=3.Lb4+!&%\<oK'OMa5lpE\Vb_O8ak5X,d"(pR+-24%V*',s*XB.ApQYN/@=OD;M5.-Bn<`b+\=_/8DY+,_C#ai_LiDhP'k>aNEe!/6qOX<!rP%:33"\,'\l$&9'-E`1rg7Tt$K7!P:2;eag)V962/\dA(h#JlO?dDFLR-Wm5Ku"a6^(h+QQ?b64<+?JjD$qbcb"aF7*kd%.>k$[rg_%F4r06WjoPu/pgS\c3M4LLib)sK'%";qYc<NmerCX33FiCgq^3T+If#H(XJ!JrRS[08M3UJ\ES]$+*?J&ije[d,dsAao=`a4Ij5(T%*kire"jo]*j7e.GKe+/dl^,dJ=Z8\,[R!H@ot:$opa_X3.(JR+[h8kO4XX'f.kFZ7hLCk_.'A5b5`bJ.h[j"^%A7+(qPP@h$_"8A%#R*K8_s@^7p4A$=gW)?G9,TY+de3e[jo\`(D*7@`oEZnB<j<48,!uO]j(oKdY9I5f;VZSkH-*WA(7%JWKE#UEE@T9O_^Hialej+.%l7bijoRTr)P];OP9s6fuN2BU[]T?QEVlf@J`EZj,.`UX*bKC2lA>P)n-7OMN`%"*%LfRBs0V,Rb:-:OSgO+8tU;@7bOogT%<eZtC%Q2\q![3)M;P>t^@rpo>LDsp[nj[tG[3BR]/3-(+7=)KH#NMVW7P_JGa$E7%,N(N3/@XuHf>OeQ6"QIg2?PU_n_[(4P>[b!JBLDHD%BIqjFIIM"+1"HiMXJ\7(ekJ;,JJR?.^-p8(#q\N39XG<BM6)\0<*D#:,5NR*g2(G*Paf0r+($4-8liN^oRY4M0`O)Dm!g?<.ia/c%en[)JHdX(ige'C/HdX(idao9F_ObiT2GeEf&GDneY_ab%"^t1f"C(XQ,=0tG%`+`]:j6^]G-2AmKK\Q2C^df@&&Oo[#WBqV?P)q(%&8Z4@cJYns]iDUmcsPm]X!lNX+7`M/hC=[As,b!1an&Of+3WlOlMdFKh"t=W2j&!d?LEFb8@_%f+K*K@gFF$nD^s"ea-ZbEhp"nk%c1A[Os7gKDGu\qVRVBVL';><4\ToZo<u:H)@#3U&b+2l+nZMW=IVEp'cEAGUiaDe&\!CCGF4hK\q`[4T]hr[?1gF5"?)nq.iD!(h%Qf3)WYM:(E*'kA^Ef0&^JH(?G+5tC]!<"Edj:Cf_hj"%%hJn_-<3']p<>48^F/E`!^KTW`Tc3Q]987r<P!>YG'52SOV^hLpS7sKB%bu+,GY1Z7aF^;'e@CB_IbUFI1Y$qJ=ZYYP-Y%B^-AuYiOMh^Ye&u<?FKXmt[$(1"h>$fgGU1*;hKNX%%0\<`a$.C_aWC=^EA.sj&%j1SVn;.NH:eZfBjW]E"G@;@cOoV/&tXoLJBCD"e?\HRYc-4ER,MMgBV!bUa"At#kRB,M2r9P@apj\4.-$"c5u.U\!f(soCZii8#h%klu:V.U%]ZldKq`OK@2*<E3UYWbQ;PZSYN$i7:m?jo?l9=25g)2$dgYN\+YIVIEo*'#QI.bd8s]@$YNj!bU@qkm!kdoYlB<`;Te]%Z5e.nWYdF*L0@PnK?%C:?/;^jAq;cN0\`t>5-:bEVC>oMD/'3[*78E2#kS,q1N]"1d2*Y2Wu(uG>asKPMQR'1TGp?t;\WHOCa)E#%fnsAJQtbM!)((S(;uqUq2Sj4KPVC+V@6lmS1P$$XLL@Q"=9<(P1gV-Dl*?iIig^+p<g[n.7d,O4L!Dag1S?qd-C?+"B##*iQXMp#%$B1]sC*pbJ7l1TQ8#S1O3c%Za?F3uB=gm;sOJs?.-GpIee"NBlJ\8PDML\H8e:bBJ_(Z9GfHushKJ-`%ULA:!(Rgut[HLeo9/'"Y%>QM0QS21h)l'e&kl&*J7e)BD$_1IB[!AIUpQ=q'qYJFe'_&>$2N9L`fO.s27(DE+6MCT[7OlAD'B#8:1R-V8jJ>j$<f*78OldUT1%TU6./%9(+P%Hj%kW31Y"\ucSRej&g<DW1DGMKPE/!AMd&<.[,b`dP,MWrhr[kB5;d+@F2P!6Bn8!iDnW_Gjon)OH)=]6()WZrJgh%P:'29E4HPB!Kf;17fZ\h@L/@`\6'/O8Cb6u3d1p>Ye4cQdp3,2MKB!g&.GK;3"<\4f9@u,VCih''mTtNa?G.\J>-J&>b,&OM[%!;%MhqUFYXF!qE-226-C=jm:GE/f>E11@MM6rl<jegq"9G3c2XiVX=V`5'@%s1O%1UktnQCO](KJ6b_n^G$lmGLQX@$)T#/L_#R1cZH%@dH5WYbZh4!)"FJFH%XQfR^*@TFkd?We<+hCfjT<`Ds`82NW)u,^c0iA4&<g2IO_VGQb67Tk]/sY%A'/$ET7qY/ZCN^nlg]Z=0%-%gD2Js7K>-s(A35p6gE3="1l?i'KE@-+_q2tE+rOl1`N];S).[#B1MBK0Z,^m9X/$e#]hO4?Q^d+$e_lrCsZSs#uUseZ9^1fAb>5s%"HY*Li6;UO%u$<A.'Pkn$3CaV2\uQ>k6dU%?$65>U)_T>d\;`\M.mP*Xb4+"MIm!A3&Z:_&BN@GW^2g&fM@0G/\mf@f&P[djR**7%M":U;EcOtuC_mdEh#YZ@%9pXC:/iI*.A2D^4;D7a`NoZ(N(j`'d>F[-!)cW53QOBAC)#/Ah,U]oW"pkHPD1JRE=O\Y@6Uh;P)u47%%)fA%?pma"9XW.of*k\$&8!C=;4XRoT/;-[TSj)CC=n%_#O9[(HYT#-Fo\jN.FD,J'51^N<gpm4FU-L%`f*VZ[EPo^B%bD!<5=?#%^_Agf:mfN^^kkf'&/#sk[Lgje,>F#')CS8Z6]CQRJsm"Ih]eG]fn:(TA@&;G"CnNc;@5`(mf\ME=B5Js[AakCFIPas,-sY&%58?Y%HnS0OMB^B#)-0m.WA($!A:VM5EWceB'-O`cF+7Wr"ptMMab3g%,&%*d+?ZTm!]&RsAIDnSTi.ouX;k+p>Zf9<5u\D,.*2Jo.uus"%ehiAE=cS"U\&H;r0Gi5DJft<5\6KlD_IHDmA5&)>#d[KB71(enUcX*Xbd7LH+WfYFT2Jh[-m4*mPXR2;'GH@u#XSP/W)>S^_f]+6%lX2.iY/rAfD4Cua!V&/QK@)`[6SQ\1X<:3aO9,FER^?$&(K;soVGDt#Ut[(%W_m_(!=U=*,+*r*>:5g*&sG%T?)Xc*Z)'6M__nP/%$oAcTH#mbr.a@>^Fn;\#7kI@I0U=IHWm*HMP_%oW+>X'9:bJ"8,1KlH-(&9-e3>'jK@D:ceHMC"d,%ned9T_T7=B[reD(Y5]6pY&%Ltb@>J\)/fhbe?d\L=:FW#EHG5UeP\L4YA@6(ib=0F@r6!oaQS@KVT6b]Lh+Upi/(@0$W3!F"(D?FU$'!l9s+"%tnHB%%(g)2'"f%#mSjS,I<*>7$t*>M$7,glm#RXR&fiFU*'O!%Uc5?3^a,o`(36aR#Vpg_DJ,4KRrhkirF@>]/kLN38?(W*[lbNY"^CJJL2<[h>lhB%D.:rug-;6P&kocZdK$/[Z6L4M+agJQ,I\!!;eD^(Ai%BU/V\iQV,OG1?SlaMZ5V=AR'%ij!*$*e*@D\3P4(i-TXb339V)[Bp)N@g%JWiAmL_N:u+IMKc;F;`D\d1"RJEbK15T'ai:*<geEFtRt5;'h^;QC4*2Do4aW(lIFK+_l83Z!tf#W,$7+d[6Z@Mkb:5V3=<2k\#r%U.%f'V&nY@ji*0n*tgNLTF%?'<:Mf1mfd#hh*Z<[-Sbdd6#+,bR[_.$fet:7"tF>s64a@M8b`FjbiIGC/h(N;+p.li(iXAI$%j1*%R\1?^B4V`b\jI[Z5h/Jmj$GF&?m#TV=G@Zc09LO?0O&+;Un_Wi6NpeiP.:T3+2Dub@'7ZHJf\IfKI3?LQ!=L.*<7CG:,%rYZ@S<+%lL>//fL.RCCS27/!6fHX?<s9GB:ZX91Z?\33`:)V8=q&/F;WO6;qRjq0N`nU4`[a9-H"JP1se%rPQEu&i%Ae'9,iP8N^9TF<<Zns%[ioi$6UT\Sd0N4A1;XIn=qJn$lPr:ud&M_HEJobUcp5A^Z5DRT$d`imQl<eoQ=HT!JO53$2UA+TCeNl1YhZ/sW#K4-!R)h^"b\M?%$jc"baAa=!&15U66Ufbb1`9op$:RBM;n9qVY&M"G\%*:KKi!=S&>X!>+:L46NL#e5PM:U_&>h^0:c*m\!;+^QL`k=12@RDSOd;B:%dSph"@Qd53(hTLc.mVkkZ4^6F"H9F'A7;8EEiU,9$8TP]pSoc[J6tC<`D$>\E.+Yq$Ns:U;%VEH,sWfB6<Qh4%Dd/GN$qJ=3>Z)q%CBR!n<u:I<.t"NL`;hs,8Dulu_dY7V8j<XH17FRPe[-3kU#IP0WlFeM@Wm"#MFH5F.W-@4\<t-Z"KI$WCj6Q%(6KgkPp$)09Hb$6%,o-&$?5S\G@),e`PLlaM'-BJn=\(l0WJ"g3^O_B%`Fk:"6?Sm^MAE0;mNk;l(Ri06T8X4ZiC*olaS1:*E,G$$Y1'2?L#XaU%2_:F%OA/j4L2%@i6<d*lCbDUs`M;Na\q3Fi#_TNY9--&44#YHAe.#Ti2B+U]6_dUn:2!ck_dG2<.c1VU6)+G5Xm:RKP1kXE(knZ&3Ctd_%jA`[[cpZ9O-\i\HI<L@>.mRa`Ddf!35'/BD-4:d5:`5!=M(i\L:5(BSQm^!$gYlblhD,oP;Lj[>Lh%96Jo!$/$^Fpr/VRW3'0@bj%,Ya\?DHJrV;9*,STI7je*#?#`5pJ`MPiFGk\;87ZV.qRB@3oqS:QmQ]YibdI5$1/B"7'J7#WYpd5\X&"L;D<b>ZNh#2YbAJB,Red%JFMVX'_Y:b!orifJ>fmcKjgFc*lr(]RSGP5hJ"l5=HhT.*6->CAg-,8"LCd2hrmo`.i`!7@?98IQ\?/f9=B@!/:rDig:Wd^r9CM\%kHJtm^1*W]*en?jclbQZCU900/MITeL;N%/P;*R\>h;Lo#**P^SV_f7ic`9?1bu)XLCP4=lbB))n@b.7<`Cp(WQR=PnIDVFWl;@H%lZ+#s`*M6<^`<O3;&k1m:DW[CaP&n@JQb+O<47MmVQmC^0ZC7uf2iY-)#>K(4CD46aO?5r3c%QY9ZS,-$*l^Vg%&6BUkARmR)5Qt%"?($Q`5MmY#*Ee+A/,-3;OOS9814!F@@Bb3>t7tKX0>"r#,s([$<oT*ht(Z"3+oft0QJH_%%Wr`*&)XZ#4MiNA-#9\ZH]SR_QQ>T%_dp=Y5qi(i8ge`ljLh69C`%bSk$(\r)Jj'gnX9MKg]V&]OWb.b(]'%pJ"`jO*meEV)JgQ@9Ll3`,FE'5iWIkPX+Yc._.*+j:'AUF%QuMsH%$W31$ujt\fgRiO7W&?2(bGMSK:lGbN"Ik&U;B42T;tQ8ZB!.rr-88ufqG5e;`%d7OWMFpdZ76X\dB)m)@ZmZR:R[r:j5sM%R)[DoSW"_U*?W-&da?tsT,GFtWf/W0aq1F1$9,$VU-^m+)D8LmYW!2'(;!d-=#eA8VV/mg&4Yt-jg!"/NeUTDJs\kBbmkQ779dT=%B96_gW7TBHi/eVt7TQGo(jS58QBUK1_g-EA/uCAA?p,Qb]45%"-lV",W?DA8'OZTF)QaZHAXd$oV[]ab:]bHgjL5><"Cbb7Rd^Mq%J0.V5<.ZQrAI02%LH7H]`-.K%DC^Wm=pCGSKG8NQR5A#O+r"HN;B!B);dVm^Rn8FV/KTVh_8<IU?(`:!N$SoRI(%>W8g4$BL?m(R%r)+GVMS'XrN``a3GG7OMmSI>b+@njq5&)LQl&.6hRitHbOu.8Zd!A)EKPG3&L5gd+@r!P]J5-ODY.N*iYG!2m[Fc;^C>9E6N&-/A%;^2LMOfK>4B"#UW42Vc!4S,-n#J)kK8u*7P/sjJDVfpJ]<"&fV5SG<.iUA6\8$^JlKJ4R$&Om_YW'Crt&I.NmB!H\'<&9708YJ'M%[44Z[pZc5N#]ENB9OkaC2(dDl@tT&H/9_&W;2[+Cq6N[I<@<,2'PkLiA(,UQXk3\Ceh;V_lr4Df4ig,'bf\jEEF5.-p2&6'R(.-S%)"f6*gK\b$+GdCF"S(oR7XHrrmujp@+$h0M;7Y`S)pQ7U!1X@380as3@o&"PgGbp:+NtN.%s:..'GZ9M2Jr'</9;@,McR\[Xr.;<%34ula]!RTmiLUj&kMs9097;fn`b7^JgK1mfFOT8R`;Nr3aV2/;BHkh#j"NB2CD4)b<%2ZE$rmiG^n@li3o&^^FB[bEdfbWbOed=B%jRgi=a,i7>@!t)K5#IY'FbYHZC^QP]p'E4EY"A>?AiaCZ(6qjSM&Tj<O>VV=]MSq9)l/M>qi2feFTI*u6m0p`&;27Gi*B%800kn=%3Xc+Vjp7?3S,K;C>3qFS(<ek/#U<\*_gnP*g1;#+M#4ir_&KSZJq/$aT`_4sgSTM*lPC[/Q425F5LQMS7hm`C-GjkY=eMbc%%saS%fcBKrC+es;K6HDbR&/.^1JEkOCY$Gs@I[)N9KA/,'k5]],ui[#MMMamJaAQ]a='A<RiJdDj,HV)+uW%N<4TuN]rOb]@:<CEIaNBT%j.8Gh7%cI+Z6c^5=#<;V-7jV!Oma/FFB>OE"-#VS+E5sW@2SB@)7\Ks2?G_Rj$B%U&:dU`a@B'hGM06S0G2H8Yr@MJ.[%F&\aVJV%)7d@FgPM5HfsFV0qS&q%)"T9\m:4-9^d&i:.@NV]2a[_W+A?UjB\4gl-.!"g7VgtK.`9mGdE#mTbfrBp1p7Sq<CP\O^b&K.^*$*J%kuO/Z+f,3/DK(7H/G*@9%daVgk[\in!CQ6N7t$A.Kjf#k"'QE"KOL66@MZ'SLNt36*n(<)m\/@3Ck6eWFL9LKfn)i'XclAoD&BqU%K.pSMD;9E6XXu4s*8N-cqj=muWepR+!/C=Y2lIG@KJ6'J)5d#V%`1oH3QQ)XR9efOfd93R#p#(7kW2%?`jTE#`'AH%\SPQ''V%T4%\%i-C!08rgL2"4GHV?INRQ%[Pa<'pk!19Y9Z6uZ/.iD#%Yl80/<(#Wc0sJ]/)aNj3F=,4"L++*a-6+62Qn:7:!r&Dt;qu=2()q[q%^/ufVbYXohN8W'Qd+A>qE86A4"&2ni6!OF!WmcPJ"g^hB=qC(8C$GV%d/7RGYlFW8e1aq@Rgbm+9kBZ3O=Y@GfC?q6a[\_ie5/MC%"pUL=2RZDAWlqQJ+PEb)].ATq%5:0$jjN'uJ/c@Wl$:GU@"p.hnZ"oc:9fFe%j8IAZec$h:"HS%$X*/2,Q.eLinh0i(HaJX2#1sm%DC#B^L%@.BB5fNW@_(Lg,;93?P@]Be[oD/81.(=:/ONI%m#p%pWj8fja=^K3;p%52WhSNI&;B&VMT^@g5pf>*CTeR2F)kSj'#mTe%SVXpSjN.VuqOn*5'Hu\:1\IuN5u3siX;"7i0=/$ikTW6Y',GS$HjZ_u"X,q/*HA-EQfO097!WefpYshYp#Rj<PZ4h+b@re22<HB[%4@dGRc8*M*qm\q+n4NEH"5M\=`4]'05Z`t_9-&]Y%J8DbL=ALk00p\>.O;UP?dP/tH-aX^Elc$R>UQHYTn,ka:'$ml@>`tc;R\uf%f+OC5eA2]n)N*&%8680Rf<R^m*J.7Wf;$^jcjlqgc^(aWP&5#-h3.D$1leDI0(hqll0M=<oMRH3"k?6D'k+\K3W_cs/fMt#d.Pms%"A.-1Wm,3E]5C`a7[U0]9dnP2KIM(H>t;Mq!fpO!>#2T8-0c0/5MFi"KTM=H&E2K/[KIN&ZjYd^9b)j@VB%Edd.hca(1#@A6(%.e%HDV1h'\*Y\6tiBcEY-*.6C9UpUk+4h\qmidlnC3M:!4,&1=slpG;N`'$*t+M@`qAIIq6e3`\!0<K[DtSbI8c0->??2S7LWc@4+cJ%"GuUlc\+^pT;&,c^8[#E-tWc&RD`e5P=qY3S'D;7D:k.m@O"S.bp^mPf>r@_mM.'1q$2R).SY9^"\@0K\c<:R\EnO'XoeIZKKKTD%hQiQ;8^@LUTFZd-Ob\PB@V-c()$hGNglh(8NEc]^T$f&SK+V^ZFIjUK'?,Wc"`Yd#'>bK:+B's8l*3Mk8&u"G%cWnhqCUV#K.sO\%\1Z_c_Kg2_C;Fs<+cN-->JAPm@DHD"N1<g;)H))V-PjQ-Ru(E3]+?;I_*+\5P+$6l_(M9k7$>!rc8acndjSO037!76%]S+oqODZ]%&_4M1UF;XZ\2pEX,$f^)1EGVtdSkrU8]K2RW3P5'jEX.\Bc&!(-,RT4^?<VV<UNsu]Y`]c0FEsKGX`:BEcAMN5t+NmE9_^PM7YGD%nN=)_UO`,ik8(Un#fZI!]YqXrP]-^L,jI!OFsn,`k>ioF.GVnZqhuXllj69;2=ar]#kOS>`.C#9a7FR$N;!/N^2\fT3q(<b+$-]Q%S"h#e?TZ+QKH]9;8!n8:HG4_?,nqaAnF7_sDS!s'!/-2b&T>tqV3T46'lS!k@5d9VGZt_)kqq8pP$8Y,UN"DlQ3KrVLPI$s4qJu;%3kQIGK^#iN]T!U..:TnaDRc@LFqh4U,;s-FAf?&t.6@dQkQmR.k<YI@T_J/4:e@m.d6"UO7(S$u?t+Hh@2`n_hDQ(b-pg,%>t+UI%CUs8V[MH_F2rX]mZ2KA1&anuPP*&N#nhu*T9gdaY&Xt:kduEuKQB$!(%REE#oX=6#-J*t,l6DS=B'dVk6%mp#>>&iS,)d:`@#GV*%clU*C<[>P8S`jonZ:\hd[Pe^%c'nID"t7?AL?NK=+q2K5ona,Xc-OT&2I9PJ[<U/$\5*\`ioIb3>_JLTnPO5B(L[Lu/)J9"_C,mQ%Y^oIt3I@7/NFp\q"Y]L+Ue.%g&aX@>,:pFBNA*+e>5guN_DFXP7;S>9%$WF5Ze/A-CP0$>DZ_%h[UY%MlH)r_W(OUmO!*#a]j6,n%EEN(ZhuEmoX:T_5":.p/nmng&>#?pH9njpT@E"H^,8Uo%1EjpA#6^G7:$2[H+H/.>Q6.eHk+%71Ob"5Q",iY$1.2*H=b8^'7*7b(%KILA':rIF:&ZLU67+_a]*#V0hU-m!%eO@E4La#-PE/]%h-=jcp?KO\Q+NtC*,Vj\"$t#%lp7bdt`nId9%>-?/B-NO:1Ls"65T^kL%K.p+Y3P%[Ji=JZrpPNW)ZHG\C,,b`4,(IW@rZRZS<$?mIaNPIm,kaa]o&g8[)01Ba&XMg<-5"J[-j:L*6nlI;AZ-8f(H;WI$]-'p%i6!fs$=SNuAV:eL"Kfa9/:qk\NJuI5O::dp@9j"76no;Q7D99BB(3[UfH7sQ&PY_;M^&Bocl%Hqn5@9'0oSKsA5!TQ3'pW"\hT.?%m"NAtX5pe\6Kbk&)Mcdu&3GL61jYj?1c!?,og8?X`h"M1[#\T7W\,Lr$0::i!@T,qBe!)B]p01`"Ck$]733)c#mDa*Chl-?)9>?&%m]_Xo,_G$k)D<S'?mZ,Db32Ek:Y+O=-qf/K=CrG18`[$WI'8@[,a]gf-_`\:WL,e')$NXU9QXE,M\:tS"^Y.W/Q'^RJ5d,/8kW;p%<!K<7)\@F[_6!"h;Rr;'H6nsEKS!]jeMnOP/q[ho,r&p&Jo-?efco'L"Q^8SF#]ao#4E0PjCiTPj%BfEeH%<7Ql)mIW0[P&`0=7k%M[V-`k05%o?2ubVfN?\q!gSW2o;7chcqNH8%E1Jo@*oh71-1k/E?$mu78]7FiqR:$CJDZ>`/i'.CkS4B'8kTmfr0dT7>s1B*"d'A%A&1afErMjN1JV7=:)ERib=QlX0)(ANd)iO?K%sq13l3Fk89k7'UbXXUpB'4ak-A:Z"j!IM+]=E85^Mu$MC<ZdE)5a,;h0hM-`8(7%,C/hV#SRu8(Zg^HPjlG5f`:(]A.?K#)F0Z5igFA$!BCZZ8r1\X5a\>"SERc1$E+LcJl6,S"8NU5\ajb_&8$`KH^Q*E5":`glYTF[%6KZK3;s%>X@]OJ-\<i]$IRd.#O?"9d'CHhnf)oHOQgLW&+@o7^9H?E!>bbS/0>iIUPG6)Q&HuUY)7V_iY_"Rch=U8AaC-Og(M*@M%_PC"kBeft#6qk?hV]d^j,%)V^"q;HTMrUYs+A@XoRDsk594W^sF<?1H69N>r+S'`fgcq2jUe,^9jeit>ba'\M+ruMfTOJ)HZmCB>%X@[[$9aEOdMNUM_,/5OQn\'#nZq+3AiBE1,.YR>HUmHKu^/C*/0!hnrk47AhQd%tu;bi=;8RD`9R])PmL+nCh,ePBXEiCfiQFUT5%P0(Nq,n4;"+SAXaKU7sFa@(b%_Yu38D]YuaG1D?gs5?1Yf;kVq':$Mt)i&<R\'W[Yj4RZ.d-C&NJ,m\V'*YVM)A'VYJ0`-B6bpMH%0c5^5(i;Wj@"lZ=MC9/Ub7%u>Al?FM#r,gAKhZAgFqU/?Ac:2epNPN6`e6l,lse@ghn&!@4g)3E][b!gR;fs@C!&6of_/Lo1[?5X%l&s>+)0ir"HG/D(YrO^7Y-DR0!CrT9j:uF\+)mN;DqT\XU(*8fB3BnMKmq9<e8.K1gWCu)3JfHfBR5R!/cq@r!Duc8JNCa'ii/$D%2d,R\V+^rgJ`!&&ajs`Pl[&scls-!=jJeT`AarlI8uGd=MkkH0k%EaQ)U^jn&-Yh(M`d2fc+n@sHc@LNGd0nY$r'D!8e\TaI?cD%%@N=ko=5`^aolO<oNn3Bp=VrN=[]-765]LiEP_':5At<&$/o7/-kY);r^faeF9Di@bZD\(q*Xl!`1Q?#Z"4s!;AQuSt>F?"M:3)MK%W`nc+;O:f7jq8,%MDH3C[7#kJ63HCFBZ`._c`tUA=_9O1;mnPr@)MQZeMa9uD;\%52Dh1u/_!@L@T_bO9[kQ-H%n:tlj9+9a^M!r%O<2_-#HhgRQC/6#oe&-IcX6uQUJ!_u*Oqu2C`2cIB!ZSA''FgDgRmZ\_ns["oQoTWZdjDh9P;Q#LQQpZ=q8?.9^%UZ`j'ao4*Zjr%ZoA'0i2V!J&HUh>R,u9k?lEZ(i-H(`!026%'e3U8*_bT41Z_%8J.k#Ef0Y"qI$^'LYF30AFAYcF[K:CdMJFLT?pJ?;\fR+TfVkrA%"0A4!N9Y-'B9aQhZ_b);&MUSm?/I/(7*\*LB!pV$%.,3^.osK\@cW2PW@)-Y/7<kWQj59d+U33PH`S=o%._#`RX<j!i&%CWlYAm`%)EnkSAN4(mcV\IgBXnW21l',pHGFEjNl0"cE;:%&R[spg-A673;M2cbM#c)5VL__fJLOsk%9RH[?mM+hPV>BWJ+:Q)GT'bsUcOKu%-oe67cA.`]5ut+QSZreXn,[XQ0)&6paFpeo035@^Bs>a=]sN^YA4X=9!=$*9>"qK0`#qEI/4s5B#)T7_=WJE[3J3Po;&`#B)L)dE%XGrLL6+3\gTR3N)rNKt';%\R^0B7?>*2G(WDE+W*!\Zo*XI>/Ki^$b7D@*N!6b$T*B<8BLC^gIo'nF.RDVscZ;@qoFIMbh;'bF,'%@&*9(8J5Hm<jbIJ'LB=_m4g&#7)FXX-LcUW@1\;47Y8Df\eS5.!_OVoC$BpnZikG>dc+)(O=?F)R$2'u_o@i;>q,7WWhgeu6;Xn5%N+,O[0Ijlogo^(29PHaO5e$Sl;Lf*\OJYI=XADp\UUZF$ZjLcBpiB@.$5/<YN/n$C&Oti!cUf93(fF<ooR^;#dppqoEfj0cK&g)1%Y)&>4C^%\Ob#_8cWd6D(Lje[p_PCi^CbV%E3f8hapsb"'H4_pbAL-JW.TT##;^-NW9f"_\9r60Dg<X*g9M2*$<aO_`;JOg-??G?D%mc99:OOA32^$baIc^Ll\^$M#&I+,.RE9EpM0>b\,O5G6FUTaZmf3Q)dAWOUiii/:$H%d'3dtkJP!S\PtJj0<2>eih=?Te!9s+X&6%(OOs:QSosNO8&2K5-s-lhuW8qUT]'o/"]6@m6pepT"=e(:VZo#$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9q%Y[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s%=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt%/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu%(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`SWHP_.uSUbp22\mrHnGaP_S:C40:VZh:nD?[g$Pr[."X.NVBS'Uf%iC2?+(Ar%RVe%(5T7?b&msaHaSSqH"IkU(nYi'^5bX_9^qgQo\c[>'C-i_WZa1pU*@paTZOfuTNl/..>8meC-@)71LbiDGF1=>P$%]_V2$5Nh[0T<7T'T7R"TL@@UqoF*l3FM14l_1MDT+H!&FR0`N`^?"pp:HuPSFf.15s64TsGP^;H:1+":pc&03M]Os.j43D]T8t4d%kaKf_AOB\+i&qP31\r,14akWmJt.[B5I6nepX&0B+#pt+62^JB&"`d=_l&QFqWTg$kpp+iqY!^=5YcDqUA1JK"Uj1^J;DTi@W_U4%N;[l@H2=UkqLnT+4nZVT`=JT4n]XqA4MC7Cdg%[O'5>qcrCsHrq%FF7_k"<RU?_sjhK+4'Of4EkRKW($qXW+E]]&LZ:S'c?&kDP7%SpoDi5M0<?;qp,8gg9Qt[ca6j"4[;'LJFK9K%!pg%YqH]cA8X\m:0;'@"B<H7$8fd'7#&m-UMg%r?J3fSjoXLDf!c"M='`c[R\)J%HgHNs]750SiYT&Dros-he+4V@^$ut:[#(qWq^*?=<U=9U>Hm&A$StYprUWflo@3$R,/ijBc:#<0]%qeXp=uk(p93<crSouJQ[CI8%p$$naksHQ.C&V`eKmlaO4,MrbfB^(UYi+=I7+?=kP5P5f?OPTcU;ro^5Nh;2G^I7g[jSn4Hf:UO*rbg!5Bt*>#<ljKY;^CGp`HqW%s7gd3?Yn%P4o^YneUoQQM*7BSCD,H[1QX<jDBIA["i"\9m,"O7PA3e3oJ^-L^>MGaGc/_lfcDG&RY^eJ[eKTRD0p*RT%pd#gAWds%g>BS,rqEll@6Ju&J^^M".+_i!TjS-jn7EN^S>_bc^0ndh*^o_!j&P)4LoB5/rho'P:="7_5M;Y.F5,`N8q4tVaA^jeghihd&qPPW%QAMR?cM%%tpE-=-HQ%oe'%]\aJ'7.s;U=@s,3f=>hXs.3.`pQ9GUk=NhtbqJbV0!(BZa+5m9a`/f<uLoc0apXD9nmXqG#_85I:;9%Ufi3Gf"Z9Qlt<dT<!%R2KCE-pq(>'0-hS\K"Uj1H5X\=Z.hT1Ze3o[2p49,+=\^(.+<ACB=MJ@X98E1IhHiIC:"o7>\35oPrI*E6%^UUu<oS;_rZ%m9rP6=YDqcc9[`U?7F$PpCe_!TuHe9&c\cPOHj740s`]Q]ukg-F.P^"rYQgZ(]FDqU`Z/_^Y)nG^8kmQ7m*i73-#%ldVR!bgY`;(VqS>qfJ4Z8<TUIhi"WR/9ht`"FCeZs2`gMS>F\8_G3;m!E,somh:P&8U^SRgZ*d'X5CM%O=9rQ\%BDf4o-h@B:Y(W%4h]j+dsmJk?2!r@*7DI/[-$h\(paARhN]4\D^&p?7ae9nrqWd+P9Bg<&XkHqf$A^(oM@N\=8<;k_gdc#:It!SkM((:V^C*o<DPt=%kncPb$QJVhTD;M)dcVs5Be5ubYi&dk6I[%s.[aFHo+^E\q@T77IuI;dLq:bc:0[`ggC*9(`Yn`6B*(YX:WG:H!Kt.2j"iNdC_?>l%"n+p"-T)L2cnuCm$.<2M,"UXq@Bq1>r.?*0Tc>[\s)*C-m(mXeoV'``rW'f'l,g^0$CKH/PS]&M##YEsP/%kbGSbsE>`,YBNnWst%6:g$AoqA9JrG9jIlQ:[tqm?s*53bE:KmqC$34k$k?hY+"oZqjbXD6Yb)OT,Ep:d4s$S8#YYi&dk1JnfWMRcD#>=>S]Z_.+W;"pS5%0Q@bc$d^%l(cnG,o&ZNX'"geRVg"uQdB0N%U0b(^>m!FCP"&0/Z]l]0_jZ8J[sf;&Q:,^R[D2?*7!B:Z$]TY]F7GGnDbo@(MI,T>%Jd(UdE2&Y/C8jiqF@q<GS\O(]WK=0;Ef%THq&6j9S)5<].7E;dmmQprEYCIZogSm<%DCL$]3rJD"h7ED:ekc))Cck<AjjC%h*fj_%i8=@`Y_`ru$6r*dPCI(Fd3X>s=R`JE)qBIqY3G#4K"t7tpkQR',YWkbFA3m#6j`)l/UFc0hZ%o-orA*/FY?kdruDABHdR9cD)$\?%Gth99I:!&KJ'^t8Go+$)0%mOK03I]b!k2L;j6eLm?NN9Qmg%78s/h.f0#Cu"i*?F[f<]qni*s+prEEY^+1eCn_1MD<\6f`<l'MBD%QlE7XHGP4-A@OqT[t9h8\rpR>K(jY[M-B+Hrc(/^$Z],:Jd(W=0Pf5L:>3%>H]doO"huQqp*2ZhcBq&J$PrXmKc;0Z.q3&*K)_IZ%U?Dag(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl%@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9q%Y[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+`Rl@)7Eu$Pk9qY[G;!"Uc(s=Kl2LJcuMt/6K,a_1Dgu(+f6o#7irdP1RJ6d9"'HQ$8gG%im%WZ]N[RWI_Y67Dg^$7hf.bTGP]9G%pqHl@<Wdg`&mk8bO4_`[9l$ks3iSaq',/A+)p`Wr&\/\GjuCC`N/FfrO@g`*\V!*Q`9EK%inhK4]jKpOqo/61\<l(Z(Q\PB?g*h&[`#]2WA469#a\%5Q#Z1^N(TGMo;`*Z`pJG*\K<C7Wa2K@AB)%#GT?Js[8$Z&0(,&di75,?%*i1a67J]V$<2<S7^Dc]TD1NTWq(ehiX[[%i`'QHK>f_J9mBUk`NrDm:^ROr?*p@Z&>aFF.a&9S:8#KF(^-'hM(mcn&h)jTLASA>(%Ng_AQSiaf#cb"S-?.N83UET&^8"97rP]ds^UOO8=i50&@S\!7lj^+dCS7k<AhX14%N\LU%WEYqMmH$+N*&4Tm)gf7h43^AIgb);[%Y=7/Z\9m8hb?2(f/lILlTu<b:HI1a$e6RfFO*/ZjU1k$+Z,_/^oI<R2%&GE@.&@T[?IC#H.OAgda%KTsXrTM(9iRj`h8=\TLYGZY%;G!4q/osPCC6>qu.\-e2j0(Pa7IsjY1&>jJe@4.Gbb=<D*q\91jNAg^V+L,4?0S$^:%D+A/d![mC?[MG-qco`\Dpeqde_+H82TF^%G"JDWcPS?T+Il,2ldVPkACG\g8&ma8Ai_R=646+jEZ*kCFX))+&((o9,NPTrok4poPq[&DpN<GMcd<+WT=Y&DmWabhpW-M%,TbGu%OC.:,h[Qs5"3i^*1A**>]CBo;[!@4<2=mUTFnRt/VWCok+m@5q$B!R7bt.hW2K1/S+EDCS#'.]bkg-VsB,3bm4kcK>(4`A6`u,,T%8`#:U0F)!;;-N<P3'bTn/)='$+QJ!+Zq\p\ZNXMhh<IDAR&F-0AWa/n@jMqaL^^$9Ll[3S;\j'p[O`\$5[hSQ@ZA*^`%u]DJ"kcP%RVWB.1OXt'=,AhYfi#6)Z@I9A`0\BX;Z`g^oL([5J6!LWJ*s;o3SI#,;!Bae1H'4ajn&Zq1!qHZOEPp%_0-_+,"9N!.m$O>Vi@V7%DmVDZZ/?Uq#^<#HPYgUcfX":aY$h]iT!1Fp'3q@o+g.#RhoYYm[Cm0Kd#s_n%Rmd]a$R>4*Qu?=[%>bOiFr6+Tjkmh6GoEU%,m3L%L.+e(8AfCh#;sr0f<fb@dB3f"F]oA4_n_<5*YX>6[4bO)%.TdBmfHL"F!g7O*eKE\@^X%1$9"Bt8c[14Zn"bt->8X^)2Rec+r,Ct%kd7%>V'fGUV4IcPC#Ddo4*EW0B[(47K,mCQ.Jd]'o]JW_6I:i8]Zc$Q+tH!P'cd9%CGZ(?6H&tUNaO\8Fp7`\:LO`#f%in*7Ur8(%5b+3'6Dl!U"K`de\'bj4R7R@G)&\Hf!&!-mF*(e</*>kEdh,NJn3nP+*Cif[BjC;EP2]f(07o=?.N9jg)=;[/kcQCL+$r(tDF`(f%RV8ClK:1JVV;6ZeU.k_b744BT6(72T$eO+=bQ)LsSN%;CBR/q4!%5rV&MkdZ[RFhN3TFYW6H;)6UGJ]s*%+LIB^^]nc8Z[O_+*`R%F#$pYUUPEdahX>pb<4(lC/X=D^6GE8(%]?&%8gdSW[7AdA*D.Y8e"4W7B]kTRs$1hd"bg?q1cCY0sYXIh[ji<Z5B--XpT&t_`,^:%Tl&7l[h..80hc,L_L$qoE29&.1I1kmaH/fR80+A3&'!#POf1O(.i>055m=kkKNUY$k=B!VSp"^b9tqJeeqD6U/f`)`l0tO+a$J0S%80V<7NNn,Rdq5Jp4u&(R07laZ<%]>7)\L>+aA="BdM[fTK'7er;Rg5Q.?DeKC_+$No1M%_pK?2mel<ZI<@K$\)"H5c)(Is"%T.3`%!^_cP+e^BgTZc8H+pe=9+Ba:.qC$#')pN%?3JKGUiHSBo8g.5:MY9f@W$.B;)^`93R5n=%/NVO;dggD%mtXRXmGs"YJo#:f6=4/H%NmC*2(br1aBJ/77UkR=+@'Q(/+'P9ZCI[ne-ReRZ@XPbobalR'99N>n/cn*4`2VL6X7.r4a<P]Q[M58GoJpBl`.r3q&Tpq=kQ%\Q%%V=@g27Cf9+-!r!<p##FZ6+o5LMhB$peq9%OlqZ[Ai=BL"F6+'d6q_WUGSX@,fp`)5"[23=3AcI[_YIDQfi&5G#0R]W1@6OiA%1Q%66blHOe`X]%=FC.oqFQ.-g$K^a$\C=9_3Iuab[;W,'EWR7`6ptQY.0j5U9qW4NWDt]8h.6:'uhXaR5"pdO),in\JCC*;mgp>%nB9%M*(<0@\56&ZV8#sVY"Qd>Y682`lr4-XgFKO.s?QQ&hB\jX>=X/=RXbc==_KiqA:PJpLr'[<I@0d"m1!c)me*\"Msu)[P4sUB!%mG%,G@YUPZ_eCXGMNQ=g98.+?c)hUj^Vk$=#JhUk&A)?6qA"PE]c&kKT]pUN%^qIm[bK'5Eg%#,lK'N/#fR29/UH*8s:@QauXP0-iO\%#\(&/>HpM@1il1.P9iZ6Z!^S"gKGOQ)jTM'ijPY\#qh(E4`fAX$8#f4hLpg6$lq&f4!iif+$3S^9s>i&,#;X1nKr*(ikL'I'*TTt%@OH-.JNMikW%@8^fe)A"(pLCT*+YCH$AdV`g3RBO(rp$8TL;GgdYHa_b68.-$]FQ=+7YUWMl.E3::l-t`5T%.^l`RQA/mAq.\mXF%T?M_Ma.c+ti6"3g/mG>uR9!lp_NnoJZ8ht92=3QC&aMDq/kp."]I#t.G;6O:%%JE7Y03X%U8JW@7q09>I=a'^fO$;U]h-VSUbAu`%gIQBu>S=RKU+ObqdA*_Kg0(doQ!;P'K#7RHOJ).E`-j=baS;Jm&apj:DN0qROC`9;ju>%#E;%lU0ORbE3[WhofRL[]cs1`mCl$?t%1SpX')*5s<Zs5po))PHA@ig%<U/'(hY^$GYDEOpQUFN/dG]Z):ab&nJ)!K=KLd4U0-J]l(3Nt<(<r/5c9/@2'8tF)8=\e)9QE7^u%VT(\Um$ns^E53%tjbYGH]He5q:.uNq/a_"CVMo#R<[c3dR?)T)qh$>-)mXE<EFirp(B4V@-3]RXV*#-uM/>f(b`ibN6^S79\BD/i%]fh:c0O_5r0T!D`KZ]=E`*J15("THXgnisAYCiNhLqAM_diN.A(]90@T1Rgl-&tOl9\b>^c"=%KgeB=`[oqFEZsu0(HaC*&Cq$i8%9=lIB5Wt`n?+`J8pIs3CB5\4lb[A2j@<Kk+?$(U.MFlC<5sZ-$Rq5lm/;8!O@2HG0Q(!A3N3O&:Sn)-")XIbten"q3G/qO8J]j_A%+mK-ZH_2Tio^-%uhiMr&')O6F@edm1cU;'+=G\0\/F)6!,CW`A;&=;eGHgHXl:-SWiAfks=FbFf@hNo=s.R:@1.5D!592e!(3OWp%nbG8']%BcWemfJ<q#F*)dWA>&g[dBkR71C45\mXLU+Wl9M]7kYlXV`,\kYGQW,#?j8\19n0fBP62jI[m8<]hWb,4jsZ_Yd.<pM=#%@Y3h-%^VhO-VRNmJI8tJ9mU=@V+\B:A>m`E>ggTR+>UD6\mY9.Z,C]L2iF<eG>?M=@3hb"c;PnRK=hFbKj?^oi2P'2RI^o[8irW!%Eb7]^<WqafR@oI$Otfrm:Sm;#)'R3d'jRj]P;O&$'aj&5%)qLf>WRh;f_PiZ<4@R55hK7(fg7tqTslg^.&<5\;fT*s-CT_"j*SZZ%RPNA<Q?1:dMJ^s"fon9-ZsOrQ9\*$`7eGDICM8;H_8jU#L4[%A`&jAS5m#R51n-iU"4Fj%fc1?2'k+hJbb9mCCmp>I1J<g4@A.\n%6i!P"TTp[fJfu1OKH'V]i$u'k@1VJ_3i&$L&&n90!I53&-u]Df6f(6*9$DRhLZ6J\qX-%m@^NKHFZ,"%P"TKCo[t4A%Q(E.aW-1@%Y-#og,l0n1@[t]:=L=+e1RUVXd9Kf8GB5/?`fPd!HRSS[$d]jJ*fA6%p<F(n-k"%2"rRVBn=Bol`PgS7:4QG-m%K7mPJF&0[tc:Y%+j;Km4Z"2+]3C]jU$R7i6CmM;n3GBX(h\1D$bTKmS(^6G[[;RlHRP]ER[?UU4d<Gr1m0]=Lu;i!S4SMu]ND$.%U)4C-lat3WU+tr%'6R4+@=Ho,0lo)i#n[ZtM3H?BL'WRZE:*3&e+tf2G-P)\Ng"AtSFHlH/;J-[\j9cV`piA)4-4oVB&>49`Jan/Epb[fNI.7f]=d/:%C\$oK"]o7>4#qKu$%*!=N6/Vg?*ID/m1Z,/:(K#k&*GQ?r4TL%4*SN(>D+_R3-RYK4<9W,2mEi$hCtJ3^ld3rB'1f8>kV(,Eu1b`%ARoC1^p,\)3-TqS?l/7c70@mJmtj\=^f?\^L3&^#)n[qOG;6=Be2-PG8;O(L1jO:":Z4:mm+oY&7I7KZmTiLJl"5A;mp^Q1Nunj<%/0f#O3'2Aig`g#6#;9E:\Tbs-MsV2100].r@ne2l\g!cqV9T!FCg&mRNnM1*&%?ZCh?>5"ZCe[O5q=4ST*[=s.CK6#VRo"60m;^9%btN+i!Y)kKIOEs`pYjDiA-5<;PL.]-F?N"M6+-b6TU53,r@_O8MOU)d:1)BSG^9_M0R*rc*\+3_qUEdaY&D-M?cPakTNU&[UJHE)%i](h,%]0Nliq2=1DdVCZS(jq-Tq99_\?h;k:Yu-ForYa7*UjlDk@7@/Fg`^IKD3-.I4OaI\*T[?,Df`UkE-:c'.uKE+sS"_K94a0%`_t=^N3aseV4PK`.H\--,bZ9;S*3s^l>d@bMTo8.S&pF%YX<Y.l5*9%bnA1IO'2u/&K*sA:2XoNr34Dl6[.i&>7"DV$t9Ep;6dpn%7nc<1,u>T)"'eFJCl`D/L6TXITAXs<"'8+(k=G(WYKdWuU=qA*?R8rk/8P?R9+a,XhLjKDfb=K-$2aEZ4s^jD?p_*dagQr+0'`2"%`)T&b$W.>d<DQBJC(^UmN[$IXV(PM`_$P<]0SkVdMf9PL"hC2S?GWlL%:$$[hIUIH7)3c?mIhYTRDiK9gE%)"&t8%XTrDW!:fhmR%C!b)AZlbsqiuHF[*9&XVY4faab8gd:LmbVQ&&iNf$?1<3!EX#5\QQ9Vi7(arltJ,-P;tLC7dR[e$irk%:K8C*X+bE'EDQ9JOfd8a%O'Qo]A8$uhaA(/40a=u)(q=<jbH0$pAn=o&223PI_p`4#_SlOLbAlb/k^;fMWlNs2Kej&/2Ki(-.`.cO-sp27f,QS4CQZRM9K:bB%i[SK>RG]85SKJ5lW-a&j-hqt;X1MK'fgC9I/$Q1@W&P+/+ri$PdZn)YDZsU7[_&Rf!GZF7L,$??0g)H@6TsqSQ(=<gE+2<i<FenA%Z,%0t:9Hp]O<F9A\?;FSK)M7Y&<rq,k2FC6@0\cP'+cD$X>_Ds6cMDO3^<f->)q#IP+aZ?9@Wd5G'O_D3"Vu3=t6#jAIhB)/eZ%^%3>sp4Uu6G(h<k.,CPI+'/Em=U-U(:=Kgal'/iEk!5j\m;:SNR%:'"Ea.fta`^-puJeBWcX%9Sns0!"NW^]h_`cL,g(@%ZHN<EU%h%-Mh4a>cY/5M@!mfXrr/q(c>D]"(g%!'Xu!H$/%*==eOPMc\=PcA`D[cOQW&C%H1XOZRhje#nVXJRN\iNF0gdO4<J#O!%t<>.8/#r%CU3rdK4&\L(sC<XiZd>@1_srY_4QY2*8DlH>q&1^CdWp,0?Hh:%<YO*pF>#2i`9MhKrqmYQiac9'OTdE'V`hp4cG7dAW&FeYao5+%0WH,?]JXLfKd7\MS>-@RK,b+9EToi1lE)MLf\l*$a"S7Ue-3<'d(BsT<os+NP9RoN#">,;,k2-P8'['o?)B9+"Es=kM`ssVBQ8tK%1bCjq'9'S$*p`*\6J//W)4IBcLV8\\Gi3gE7hff?`&PQ',83>_EDAsX:aO7^V^S-G2C;T8&Rm^=<g0&@&.=ls[,!`&m%k_gAZ-;K%>]+9-2^(Wr;i#8'Ll?+L,=*6VF(I.^p6JN:]=u'EUBGWXi_3q^,\XgrV@^d.iDL=Q%aS^!@kIh]1n:D`G&"D68Rk,n#S4_9?$s<k%n>NE36,-4XKO^cm@M=4"L`,/pKW?;]^cN`'.H2D`AhS=okR3cHKsAJ#*Au9>*l=HL4Nl)(&OVpBaN*<?R\&HQ*I:6i:A"VF3&1QD%*Elh<14k'bkQEM.FV5IL4,+28^'9W%^I^LrQa7<%?3`[u8f+sS87L(Y;aZcEK]L@^+`KFG3MI)Nb**66;I.ZiLW10PfnWkn'g&j\%Yi=L4"Iq8F\Gb80`"]^+H[leL?"(S+<Bu4aJ--AiQc,@'4\pZl+U9G+gm7>0#aglbRiOS`YaV&))$?u.V+W@4[CDYR=uDd[K">$_%"3b797iTWmE+@iXJcfbSN<01nD\U'r?2U.e0(TCp`iH7N@p!Sk2@qaT/9*^-g;X0Cn=</g,@%Y9=b+*-Uk3i_:qO^#8F.H_Z\,!F%Xp<@;W=(_!1$'E]_V3qq'NP0Ph_)e"+P?ccP)J7GD%SoW@<-c4N?,N0CK-go18;?QbRd/J0I)t!RKWO4C)$aX^t"r+C,N=7eKHP9%4ASo?KP_-4blc3VEX,@W/6g]Mh:YV6;1*3cU%L$=Cu?KoX3>1uhuPI#I/t#g+C0!a_;XBqi-'O6j`\JJW:@s)9OnW=k84fIJICr+%/a%KjM1SHmD&*CNPn<\b>3$?m'TH?ej9SsV"(IlKW0RpfSO;?Z>Y70bCd?#nI\W]a)KYs#&g7u%4"h2Q#bOfUUt9i]l9-\k_"C%r%=.up.iaJMeLBL[Es$7&8gJ4e>BliV`E9o`uk(m7OE!>?.86jR!e_\1R\SI6$%Z+E?TGn1R#iL3J-,]pX3#K7;fm7]rGur7+^i=V@%2$`o^)i!aa;.@sV:i'lGl9]4s19$2k3@gXj6,I;ERo4e\<W[iW5$`-<8]2;p:Q-4%OC\:YlJs4O)$,l<83N4#/B=U&XL]3+AW_Wn%OfVESP1U%O1!)^>pDg7=&MF?6QYiN(R-5/Z"It;D&u`"rE=K=+O9Q$mNg<UA;Wo@23etWn?ZV_hM9V<*T(Sfb2k):=VrT,?-6(j2%j;UClZKL9l3-Piue@f'I&$+l0V[pY*&DrUqW:3$0SL-5a"p3D/`X3r^TLtru*id1U(Q#2IjLSQu8q@u.<^9Lo&Kf%G)TFXk97r&L%om7Uk7aasGj'smm/[IRWHa-`?()!7lU&Z01THn*I+e3PH2BnG`G7*m0/7"9kS2P2F$o4G#WmI.eD5_9%-pNm.`B28;nhheDYgn>F%9d9'u#"c(f;hHemq)_A7@3iPl&W@;36f:qd6&9]c)SsK!ghRBDO#a/F2eWh-1Wo%Ch#d!UP6'^4N%F1$_la\N9/lo7]6csp'S8^]%dURIN?ZVsrhQ$kG1rVn?,@fK\/cht'1mG.d>2^q3_=bFI@G,RdTO*6(eV%4;0*tkEV7I5ED\o^M9Y?(cg&r]RJ<`Z=4`HQ1[AuD<%X\&X21!Z*P?-Ra>Ibd>U-72+Qd<,N?V:-#0Xsf.S?lth*V[b(t#MnTI,RJk9R9b0fp!Fm&Q4%lDE@:9TcllbM$Zr_=YUgH1I6nN!%1INH5aY5>8F"`e*KAESQ<Y,HZZ+,VMb@]cf3=$4=0mZ3cjD]IcWHT+aW'+i[D,(j!7H_/,k](]c/S'c0i.NB6ZMFN&4tsGKY8%^b%eTY.-(IH<^oNBiQ)Y2hC001*L+ar>1.rg>(5t5>Y([@VTe@Q:AmtfH)*qJ)m`KO1g<q,K'?C8YV%qjD[*mi,AH\d7urgT.9E5GeB%q0>jJnufNRl0M/:3G+Sm,1`mf0$eeW=Vo[,ZYkmnU!Bu1NnJk_^Y'd5:F6<$jKN>ar1^F("MoX8--\gaid-=_9k-o?dA0q/>?Poe%$<Ze$l4V]]gK*+gdON;2!!eq%a`1p>$=Uhk\UcG=/J_EMOYaenD%Ma>XAH#*://ZC_$X$LH&hU5joC?L+Z#orbP/<PQ[pC4.6'BL%6s(V+@IJf#=.kJeEMRIQG89O\i&EO_RNm.23lqFsh^tLR?.0bqWO%p'I*J]"&&(L=*?qsHLWSObA%1t\Tg,%WG0Q.;XG$bS#('H^%],XiW,JC>.J1+4\LCeOH5FVq)9`p&V.o*b;Bo#c:^p#UfFD!uLK%n7W#$`]7o5oS^a>.a'#`;"`2W8i's.Y0h-&o>6N[+[O\#QeJ%TVQXq'86--U3!:(2.Bk)M'UrsM#i[Rd<<VB&=]bS>#]buX4*N_mk/61ZqC]Y9Pcs-=b#=m"giq&`+>pF!OtWFjT9arCubjKd3T,X%MR<^b)%qEe`Rs9#i-6#41]nQ'aN5Xj8\gJ:/b(2ke6h-COXLj0)Yu')Pm6%F[u7ZsrE`Md@a-n0lk!+D22AETU<aF8QXLGD?mc>Q%'O>g0K[d53LJNsTq][l_?aWEe3p583Mdjb)@),bKB>br\S$sf+\I!4+OTAN?*k;eJ$_W9MBX"`Q4e;NsF[jC$,/b:lKJ!8FR2j!c%3\Lk9%=c0U0QjT$IVA4!bR!a#83F.7,aKSJ<Q(u[9&cf-UnAdR[#?+R?7ZSG(5!A(#=ojM*6UX"A,06D/nFQ>BuiE[E`N5Ffm/q)%U)8Lq.ml`6+0#Dh-sVo^Z^[m%S9i`=pF"2i+Y'"g4a1UM(Mb:8<Qm%NaV)4-_^94pED6BlO1U3/#ed#W#K@K5\0-6do6c+IV+?Ch%]KL(a42;2uin384B6fcX:g3%*aCA($=lagfKe?@DL%:c\Qb;Z9!!>`#FCJJdSKB#O6>;7DD+S2/KB?B)0SgW3MG-CI.hFF5C/l6D%Cd;*!G8KFU<46LPW8SBGg,(H);/n@b^sSI*&f>q...8=W+`QeOPn7-Y2%j<I@e<4G,Dig+O$4'BQ.UMm91;UOKp@8.Oa:]"/i7#l%LT5q-<.lP>&rJ`h@oM'>,K[odKG\Es8(\tONJca]O=ih1_!G8#!4%S$.3]22]o"DO8*L<YN0OI)_r-&\)B=D-C%6cV[s,:)].+UW%S?bfS/^^(NVm1CVN/1H=iaSosqUW:s7"eWDKn.Vs(cZ[Q6\+1,"qI?)<Qsd!NXHh97PH=tFFJWsWTOO?m#$]F=)j%4e$7<3Zmt5<%U2e]gikIMANnB%T66kYU,JaoAPl4DmCVN-^f_I8s4kN5!bUQ8dn11h`msr>$RiB(MNqp\-faPXs<1U/\qk\NJ,Pu/[GY,jG%htYb%*;<A8"`FBA!Y%R6C84m7,asf@%,d!u4NN&9D?AUBYaag;1C#lLOr#*N>RHKIf\m4(R'm9m(VB:tpQ\ZAZ>Y[B@VC7XAmqPA/]+-L%A:&>B1HWO4p^i"/Q2H^dVo+6$FJBuYTGEs,?&Cs6c>:+AD\mI?bFT>nb@.p?Ll7)S:5U:P6#\(e(WGdg:EYaB$$/EqM7@4BUc-o]%LbY$JX'dA8#lj!KC^@1cgaC&eKS@u_Ub&0XKOjU^WkADB;OZNq6rF%5@4VRbs2'dg&W\8XCb$6*7YiI'?JUP/o-0S/-kS`VoiL6j%<U=Y>M!5^Q1pm]DM0tPtTb\?_h#o@t_?*An'nEB%m#JEP\p0g1"I&shGP3f@njk_WE('<Wa\Gj]-q%>3Z!&9'lFT>,3Y96^\in)+%&`dadcjEMfOX6Bi<+7#i7Gi`+E^a4:rXjjAiR?u*>9o&^-BH6j%RgL[ebF]rP)%Va/;`:_irFZX)N!D)MhT*GbW5fW2gIO$AXrfh%+b5V=ORHX\iZM#'AZ0'4&fbr5=LL0<U"hf;40^8qEtMR30?J1MZSM/_R/tg)i>CK8Njl++/K?`&iXnN,=I"CPi1mDnW<uD-ON8b9%0XhH0Zqq+(gQ!oZ,h2Sj*1'ge5]f/cEtpJjk=!CbO0g2+$6fXpDc(M9%MRn\3@g2MK&?mZ?Kn^E0(Ue*/Y`WUba+J&+6l_)"nD:3%kipW$#e[W,#[Fk^V@eh1i0&-JD!<jW=E5I%il?^^2<sqAUhW4dBn<%JJE,EJM5F)B]`OaWop.5s&kd?]M1/>?O)^\q#^:'lcS5Mr%:q7jp#H427/;(mY$SI_p\<s#`=;#N0JsCk&i.M:G_n$r@P>FNdV"0W@B0?QHQcLo0a/f^[]At4_;%j,B9@0(F7OHo!:7US)_]m^1%2QA0RB76a=ou^F0,9f*V3u]-tG):P`EtGY]N/tLn*.9Hb;i3ESSBg7;RT:>B_<Vc0l@3:]A!HKRH+@DrPOc@<i95$l/S+aO2V4)/%feu3XKBUrt4,.X([q"0I-76o]H_^R;8k'^c#&jhudrTOQ>RpIp:_f5*rKq:022ILC3ea:J6'"M)6HI"!Ob;SSDg=/aG[V"Wq$s6*%@j"'sV_arr03Jo_#!X:hYSB/;S8SQj[dk;_j&/LcfVPgg&1lLSYfj8_;!)R/q-mJcKlZ),'6j_FB)Au#-Hr!>Qdp&loO1-%5EVQI%Ykgr"aZ)UpV(:g.W8X7J*NU8QYa<mbIWVh8XIUGQ:d10/fg,n=FjjFZ]OZ)J9U)0MnAU4k43h3#P_)+IkOe0keDiZH@496cjQA]H%PZ]EfjT@J$X1i@i"AChr@5<Y[)mJ)hCbggf-*Yc"4jd8YJMLHJBB<#$/%C`^i51T:(5ha"1(u$_.L.]]$;,5:c,jKMi'Q9pIUcLi%8oLhE+rsLR$U(NN(V/OVp/hJder>U0Q7PNm3B#:?jA"QqQrI<CAVF92Xi[c:^"PeO*6YlhR)P`ai\8t,:cZD2B'@UTT8V=:EI!u<%+bg*>U&NY2>_cY1JOe<ZXCkhNlM"9UO.:Ki(fh9";=g+<&l>sg$\(<=NlWNNN\f2gb.$LN]*\Y1g,rZk!H&GH9I8\-%5nLBS:EDl%c4hfXko+L%H5J1#7IjJR?/m3cW9TVIFhk!"b-XCak*9qUOr-4*<6fp@-%WD9BK@NApnHE/C'p2[(V'k\%A0DkYD9+c>j?>>Qq@e#%T1osM6Zn\m(\pbD"tk]fb#RuQjo^$5<Hbe]W%Mhb4_t-GR[XT`\D5'q@&=#)7m"%*7&pB44Y.,ZEAGQ,YY]:C_CWom!>M0Of4OI/%g`fJ]2PUNg7b&hAScBT"0t"8oDTk/8VAPt`1*3dS!%/A!C=_?;bcD!l2?!SGg7!C^NC6mX/l<!o9EL6L&[-u;#rkXbET7bAL)hCK%_ubrLW*BjC(NAXBGG?"`g6"g42rbcoaeN"q2B1<na6Ter9T=%^bcgT-)=;\#GI8j!E=^Q-,)M]fJ`Ccef>CJlS8DcB-q:I'S66na%.lj5)."P<0^0<?YjfRfme`+])@\OPn0Ztk`QD/+0eAqs/P*fdG<ou$O5hmOk*!aDXQ<VYiPu(_pn1k64Vpl.!,nk0`Mnomg:u&.r%/5ja3C4-</Wue4))Z3V;_VCO'/6Kc<guckL`gRBM[W17!,ec:FTl]05/Iu9uG2P?5@C!uWVZp;5h;]ntOt,]SIc/H7B"e9'1h+CO%"ur`r(f];"!1[U`RgXgD\u;%nlDaj0Ennp9_'t9t%.eiHV(!GQ+TX2e;Rnec,1htjGF^a!E*TkXI6["a!D\O$\Glc3fG(64*oJl*%hYf_O&ru"V"C`N2a:_?il<XNEMBq+tW6!M'gkE`8.[F/IQ69#5(?_K[2DU8sBJA13\?C8$==3=Fj`n*j%C/o2kDD:U=It])d<p"#%H/c+Wb\*g]F7lfZG0'$<9+\U#h-/r%"Kk99+*TF@8*pUX?'2pJL9nHB7AN&k>arNKQ)Me*$Cj_EmO4'i?A1I?j2fD_a/b$/<LgL4%4p=^AjP5k*>\VGT33^::\?&+rbV9MGa5Kc'A/<9E^""+IOPH*;\jMp_Gr^K4EQnXqDE,.W@n#L*35U6)RLF$CF5ZbhALH!4cJ""D%na:o4c706iURj=X:"E?p5%c0W6EYY5=iZZRc[l7LMBWUY$it=Z:7fEC5`:fR<?@==MO!O=Md-8IfI[DsR2o,#B`bOD63,&haRoh+%@!,5>CFl[k\>TQ9/-(;[_'GUC$e,/o=-oT"F0H8p[0[<>!3TH=M+39)!il(J(.A:p)FcjCKU#W$b<.8.e&+&%`1g=8nWgV&O)e[!%8CJUh"'j><D2Xik4^%r9/@l%q]a=43'Fs/t^8oXBXI!_/<^ROR,l'MCr51KcY4Nh[<qCGuWIIl(J'I+5ac(0WQL1A;N0D[i*l>iT%jma,O`7BXBM8^AG`Alu%(-3aeq9h?aY[Wjb'oU">>gAY9c\9;Y*MHdXf#>.)+4K^4[XC\#K85;?4iE5UYTZq#K-aDlK?aTGJX7.A%2C/o]9Mr.uLJt.@i1rWDKu?Q`;QJA8kG3<"qq+7%(amMjTm/[TaXd%G4iUXPD%5lBS:mnH"<aJ.QCuc!6!amIgZ/s#N0BI@,7b[D%c2n]*[A0#tf0DgF<N?bXnW#>N=HZ0C19O/EWC9VRrY-g<UF[:\Z-3uCakL).(O=LWj-k-eUH=lCMN#cR5afj'b8)\P3&).m<%4#E%4X;.MUJI;BF[drRQ.^]]`I_73eeR7+%=2SjDeHnkb\ET"Q<OnPZQrt\*c0$$ld0$D%E`5tf6/[;akV_5TgYASN%[!2Xu4uk&==>N%f2DP3>@jZO[!$I2cY:IV#9^@4c0BIeTJH+eEE[WQ1ER/+/FJo:(+fi*dEucfPHZKsU?4g7iib5jHG2PY@^:RFdU?)@2P5sphpiQ^%i9XVMMZr:M<q7V$At5uJOtQ$nja;4VXZJ*Hk\So#+En2m#HiqMaog@#A.Yp4Ja^Bsd>L.Q*o_pO+F>4o>6$P'h#d"II$#FWEVXDb%P[l&#hZln6+HQ)K,\8nf=>g-u$FN"(AISX+24iL,$eT^&.3Y"2!*kG&X+VfM5Tnj)VcZ[rgCm#co%XK.[,RV=8?e)Y89"OdJlImg%F4VZ"!eTgrZtR#4Ar,8_[gM\r_Z?9rF$/%V36BA;PRsL(0e@GMU3Mp.':*(Dek,86-)(B@O(r7WH's3sn##9UYea6/(G,N=MnA2H%A8*g7<K67PF;hSsmY]K#)^mK,`UWR?i9Vkr1`e8tV&:GBmK9!8a^AgKD"$`HX((O#E%I#UO#/*>%SK[IF<n;G.Kru/&o^_:!O22C%.:]=@8=B`?haq5?;U@s%Pj0<U<X#!Q,X)$^D5E]:DHU/YFn+jD2Ab+D,rO8:^:7F.8>;[q`W[)'9>Zn6fVBuZflG>fZK,Cd8HV^&%;GURs/$%`mBndRGlJhM238i:CjV`,UHS+EKFciMB8a!Gh4Ke1Kl1L4;a6)#&\]0r[#97G-P#nSbJ&#26]k%GSM)K#^CX"&^/G*^Q%U1P@MfiCi[cUifK8(1C!G7h?\$&G&0aHb5mg>])nYW#_Q];81&Vh*`s>05?$1$a/n-5RJaCa;g,">5VQ_G`M7ip5^?AZKc!%BVaq%)5=n]X&*[X+j@`*"5GY,@De"/C1Cpd.SuS4D<\*;):fGYQKH>$2W\WFFBII]f&s,;(al^bXejSM`QA'W$8-:dF^gcMY^L7t.8T.2%cH81Mi\-dc[8sW2#6U719]K9o^i<64.GL5lb_JA03QXNd/TtR%b?X?#.$jQXQ*4V@ee09p$4WLaTdeGqA[EIYJ!WqYi21=+cG51r%fkU7bVD`B>BH*DfbnfRi756@bS*O5=Eg@jY*.*:79QCuL25J8Kc@N#s1KZH^@CWa4b*KjRS48iiVE8`k.G6K9@EiEKGU1Q:V7&V7%YD7h$=m>V#_e6%E/t("NYKpdjP*Q3S,85C!S8g)$_@@XJ/M.G41Uu`+?:7%NOOgQo&Hrb+R^F&a(+%nuKZsl>YWEAmEK-CW+pVA<%<O09>('7Pj[;t#*1I4WU-S+*![2"5@:g>Ne!!>9Gd.O?e^d`Gu)IO:#\4knRcRM-ZB1m(V,%,(c]=q@0Ln'+!c"b3((tu*j\J:ut%S8^%P7'(nB='*pU+'.Sl%.\H4=@!?4jECnfpUV6XBi(;Nf8,qRHmjlqE54r8UXmN5EZMr0%ZctLJDFP4[s@c[i0p5G<[NK:q8mBD%1W'6nBh\]13W`6oe/PXG,eur)s!V<-@/f/H8as)dI?TgO<Y>R+[FY0CdOAF+?-CMqM&#dc\n%.S.2HG\=T'$dfn)%_A]A'17<1/Z%?*+*Z>ZRsRULdnrTdgg(0.)=ie(C`3NRXIa8u\bKUG`Ro#=2"VCC(qjHYNo!=1[&qMj>4qEB*VHSla3'W`&;?PDUm[1A&Jakt!*A%Uikpfn;9B=[a(nu=Cn,/O%M60!@[;@Y2:`56&t/aiM9QV$@m<%k%'a4:m>mZ<jbIJ'LB=_m4g&#7)FXX-LcUW@1\;47Y8Df\eS5.%!_OVoC$BpnZikG>$<AEZ$8R;j(NYaUGh>!]^T/[TX/-o!6;Xn5N+,O[0Ijlogo^(29I]69*o6*k8HC;c6(/R;Z9hQbO5`W0cmlhN%im13T.nD@W1Hl.Vi=<-Fm5ZVk"[e/>LL+p-"fR?S3+W5:R+1`u?+?0eaAsEWWdMeHVlCO8_^.b-$\V+!Yc*96YG^Ah0j@rX;1o@$%)6J]ZMNuT7P_bo.e'-'E;s?**p9W@2P7hSbPo$sFPhPf$-glB7SX84/i;;qs]Qj?L\G4^7EB0g/W94H\WLt8N]Y#)O(U*_<57'Pm%4tihS3%:Aa/J@X3k"4>i.@9';'kf'8#94PSR@jJ\5DbQu;M^iQpAAW]M^ZXAe%bQ'7r$OuP&XAtn@/.&jYQE(af8?+cW8u5ro@pm%%k$.NlcDX\KVnDEl2P*`s8T>?>5=5Fn>VaoaG-L=nTCEYK91m8Aob?g<<b't.nDh[]aZp8HU$pU*211Y%;&GK[Z%grp,I$C'9:.>%R2a?%;/o0*qBoO6J*=LE@l<AIAq`Ti_bI8A-tO`C`uRM+fCLD._bHo9+86\6eBkl50nOVQQM^i>T4>-iViDQrJi7^+fpH_)7J*?o%k/sN;]-P$u@2_4eAdiSdGtW-O9)IT%*!jNSPl#0`X;G$F:]-Lo9E7P0?BD.3ic-1(/s<]`9e$A9ebOb?/M]ea0%2q7"^UB["+od=%/0):9_h"F"(M3%LINabDc=OJC%bMp3S:7=_)e7FD84I*>##"uXVPR$_i*s8hPn%YipEN-F%t7;/4A&bRl)@$bc2#s[hp<Ea-M<XW%kNpoX+si/:bRDPP-=%Y29PZWH\@)Qj.I-ojjc*NLM1>D,LU!U[W1$*.N'n0_@EXEi6,-u#6o#P%oo'2X(,1'ZS9#\)+<;g19"N-F%XMHX*`>S$j9D0-?,]qSmW4e.upEn+(5*Lf?Yh&T5bUa7CE#']hB3/AYh9IQOa:*0Q4.<hB1Qk3<X0GlYW[J#O,<[Rr[Mk@NWE5[r%#>Eo!^e^@r;X]%_8rMKBTPlj9F2"P2;><onM4Gj9i+/C'Zrn_YHJn8V$<3jRW-$$p=g^E4a=R/=or5ihi%+m@*+G<M_f[YE<VR>>%V!R;;lCLO%Q3e5$Y.VF/3,qV:Uf5i">&!G;LD=Y#qGn*7hh(Q8Du'kuVONP=l987mlksEuTJOW0H&mU+NX9bi0I'C)VWhK8krr@V%`+4mmAJ(;0os!1_c_A^OZ1Y:GP-3QdH"/(S=:teS^72^;e&@\)NiU?O`hC"n_T8U.dsG.)o7\]TZX[l!kljrg4Xp17pN;FcrplB7%&65ung:nROj\pbj#Yj!L//W]?lZ"(&%d8$p4&Rc`W,L@O_Bt?8Vh,psG-5d8JA0&7?h(Kn8RR?`FOARp%Q$hAk&c?Pml7IQ+W#ud%[%i>Y:r\iG5?t;gW6AW3.*0n'(Z]/2g:3Xh)!HG/<0;^Q2F!JnZQ^Z:,qSIjd'qNa#2CBF/0$9aHY^Ln&fM8C8$i`Chgr]XVm[_3%"Q>s+*saIhNqG@9RH-?QKm;80Q1=TfBn+AgD+@Q?jFrhTj,;j.N?IQk(q/?uoX`40\@RBKYA_CnL;O2,SVem(o8r:K-p2H9llGQO%L7@&5"nrq6K1qk>Bn0pehMc5VEWmiJ@=(b:JVuH1.XM_]N'/Q$,I*S#pRJQphbALbj;E$XiJHaGN<Cf4N$:Rn/rtnDPjY0^QUgU/%lnWRX:;N5-oe$-_5/1)#URSH#la@1"e.ee-]d!rja3R.kVXSMi*Vl&GJ/hhfpSaVgY$OLXg3+\a@?J-pFO.#+_S!2<%TQ1Z%WdBj%Z=iil9X^SQ3$e0f-q@ehEeXom-MU'jPN+pJ5IoF`oMe\JLFG5?oh@ll,XOUIhM@b^eR":]@88OL/b5LUi!<e$,=aTpU"KhhSMLq`%AU3rR3:&WI.M`ojk"Y&#6.Ydn$EE\riCn=N.CNl:rhIb'E73&l:)'8oRhU'hk:sD\9_6I:miGt2[bkmslM>^1k$m0$`ss[g%,jiC%b,(QB7/FCMe#m\L)I`OO8Pb2j%c9`/lgHo.=%)qS#*0-=JGM;R'6a;QUak-o:6KRSWNBicNqOgR=1lQek%lW.:mr$9dDrnE44Du1%Dg[;Qa1_cL)I;1.C<TdEKR#)<M>KEhHP-P=oYW]l?10R)3s.1UB#&V2(XYC+B7fXUs,J1f52V(s\$;j*r!qn,EIbX8,s="U)SHWX%L&9L2F![/@L%uUQJc%T<L^Vd;MC+$[T9'PQVEX>7Bj?B!isAunRicQ_RR?P)ca<DufAaLZ")Yn53;l;Ah*(Sj4t@r7%o[b,#ND&*%HH$%cRb/_QUZ36h)jk?LL;PIdl]B&PI[$f8'?YDlUIgWmE4rI#dH20c^=S@"3oB6S0)9^#dt;RR%4M:#nfMn5UDjH&o).R?p1>8&%<&q^AB:KHK;J;6@6(-%9lg\)0Rk&W(bN^OAni_0\@[=[b@4Or>-9XA,P-X`)q_?QHpL.1d@U<EtLk.Vu\`%(7eu`3@Gj72W]Qn?U%[$G]LX4#'J38)DjjT?M^J+FLXem!)P?9A2Op;a/A\)Fu)?Fog-=3\<p*4Os=rMl<^k!:*R;D5Mbf+$bD0nSXikdh5dR^1`=->/+`%YA%bDiSsI@/?eB^^^N""mpKDj2/0mS"[JV5<uf3JU7a[bLLr(Z4HesJXt*.RT:mdqGI,akKQY<D7;Kc>Y3Zrl\us8ZRGu8u11+D>%AmLf4!LYo#]E2S+j"W;6k?Nc5)#QO/!-##BCNb#*&XPpfjuXDRee19^G+F\f.o/.VQ$J"lhSS\8^@QBrQ)X^b;<A>m;d,4[L5Nj%%NV]_;b6mM`l;(,X18eZMH,;ss/9)_714C``mGfe=pu31:ob7@c$7Oc^d#tpqVS8))WZ:*[0brC9[JsO_?bNRM2rg[6aI#oV#-8QB%i\W1-'</R+Hp@F5hhlK`ac<6mFK6UN>aIE(;H\;]W43BdU'`5UJ;\;WFTh#/75"U]Z!tTFYr-JISr>=j!&N=J@a=2&#t*9^':6_k%L.EUZ<;Y?I9s,t:^12?,\[=?&?[qA)F0F^"4L/SYYs2*@]RAAZ4HJ'c1#(:BYp),.c,?XH0.p:Fak9$=MF6eCCD&hqa$*SoN@IE(%?iZ/@lXI^50G:$e!lfn]7Vt*u<lUIoS/H/QO_==-"Ja@[@ruALWU*G2a6J$J'^_L*fD/'NYUj]G%p.^5f?K691O<o*H#.ci7lga9%`F!9"=rT834W:YD]cJ\EF5=!:=j*KG1%"*YS[j<h#,7+5`K'K<D7FYL#C,X$T)Ha0cl`U,*Wn?NnW7GYhZS/`[I^"Cge<.0%4A>J%pJp,GBem]Q;;?obH-Dd]3(n>e31o6.?[9N!E.`?ph;rgM$TuKS0lu1TIRKl?(3o=Ql/+oN:-6QE'_.25qde..("8=0UI%c=]>XD*%58?W+<KRO$Q&iGrK2e+L[>-@oEM_umk=n&mj34$4.e)q/Z=6qoi3pc>GIT:q]2J;?0pUqoNO4s7e$@1e3`D]%)12J*-)TKd)\I6K%kN?r2%H+^e+"H\h9+dW2SI+K=%W;s>?+_D5OfOX=g]<0$?7)(q[t;m;G?G5<V&:>SfsOfAadi:@QhdU750Ss9QT3dD.er'[#t'J!%Eu@m%q!#s<2%G33j`k(lS^GB;G=G(r*#Y:^Tk4_SKUumrq\,JHjFRp)86&A#I!@9gIk30_]l)L,T8@Ain@>0UYA_Cbi.E9m%u*n"%rIf524`JpQ.rZFal@#1V<TH'KArM8&5c\8O#L4,(R.L**.o+.4'@NMQA)GB\LYmD:)+^),OjS>eEV%!<C^+sX`$V1,o.+Dn(K,d1%=:TZ3&oD+I;]!&#!o=]_6Y*VZ*2/2dYTn[8p":AAp-]so`+0Wf7GGu0/WskG7ugM,lTEY\KQ5K%)%Pcm>;BuaC1=i?6-fOZ-_%YE%%J@A78^D*2Q(+E-j&F%ZKRV-@<Duf_HuE9?[SARX@Q2FT-+(RM$Bl_>B#kpO1G_1D`uL:(6cY#^0c@92e?>A+0p6TF'^rpgPikXP%`Qk*sFlK_ZRlSp[4Um`nPl@Mq_jQJO-T3d,:U@+aH1#6CH*YN8\d;DJiMN=2PED8'/(1M<)Q\^A71Ic\B%f$S:<Msbn)u[">#WoG%e>$P)idE`L]M0$3Y@L\F*)G[)4Ol)rj2BeX2Tad%PjCKglNoAN9A]8&"9'U;UHH'#c_L6UBA7d8lZ'XJ=8/iUOAI`[K(hiP\]6ZY%qs:Y>g0nV@A>BJhRg%Qm-k:4[>5;+b[F6chB$cV!>YFZA\K9r$:"l35b&p&>\a,5=^.Gq)'f@p]aAYr]_t[+Jg5i_09ZlV[WT%r8%35`u#9>__;:F1q,Worcoo,1%DPs/bBT3(0&rERA_Ii1:ZNttG74OF6qS0r>s\hfq6C[[^;W0f(ZUh!qkqK!Qn2Hbbn[=:H,3,`8(%o]?Dn@Ir2QB63Z2)Ct/d<?+g%&f!9PB@lJHVUh2=Bs^B8KkotYrgm9*@f.),_bm:p@dT,2ZbDC?FXsCD^s,<Z\n0ib>`7@27L1Z1%'[J/uHGYXQ?G,U[dh(@Bk97M9DOTV=1r1o;95"Dd[p)PL^CBA;i\Z\ME7;Gnj'KX6MJfW[+C<?"1l[?a6gg[@Yo5F:fo3Q58<Nn&%F!i?-Mng=8Kbo0`0cJ@uiA?]6(j@@5E!FO(Z6F2lo[9R+(?lBn0/q83p-f=dT@CHoJJ3<AI``B?54`dO`tZXRHr8Eb30op&8!Bop%#Cf)>=QJ_).=r?H8(4[6A`^nR)hI6#j(\]MqBYWt7IUA"/hQ\YDTL=tQB8"WdQUVXr\cI53,/:CE7M%@]H_uioA/DM-d8r<'9:%A%rfYAU9Ujho@IAg=St=,?(Iu5?O6?:Cr)R%&7e#u-=QI!LIB+3Gf&cX`aoE*X>0%iHW;R)7Ea]$RcY-uCDm!IpM^kn=6\B3a)0;<D%UN&$fNeR)q/4aOm;s5jF2f's!oO=nUq_Ls$#Oc-kblW@eWAa\Q9aIIB_2mM[hJ=OoZ)Y_]dY3g^)cDB<&)Wps*kj_LWStJeofO1a%\.?GM4FEKBC@B7_?n:]PBb4d72uKjA;eH;&SmOPmp`I:b?BL$31:-PUk+_4<RWuWCR4o\tH\UPkPi8[p!+'(*37e.:Al[t2iRq^q%)Uska5,"H>pZaq#/?Ck"f'8P^,[`-RNPf8a7S/5s7h!9534IB<B1B9:r:#MRRV-/g#Fb]noRRt44PAdaFWIg)!MdfF>O%;YT$415%:O1I(&fra[S4KY;!N-=JeiI?2a2p>U^PAf/0l!VM0+9?O[pi7;/m043:m,n"8q;hj&ZOOkl'7Z5;95BP/nE'aQ:FTJV#[Eb(Uhb#%OdcN@.:Yq:SlRAtKQAYL8]c>iC8I,g!%rJ"&'!:so:m4Bj'h=fa$nCVYbiWkQ#VWF;j1'J"b^XY/@X!ro%G79a>2tAf'TRGj,<)J%B"+Q8(_Kdp:2LG=h<9t=cpk3-oc#,3;r+gkonfd0K?6^#-ms1:*H2qWkq,V%jt8bE%;SlQ^4>CRI!mNjI?`hAC?7e\.F?p7`ejZA%E!82sY\]1HP<gq?>Z%Le);/GED`Ym:TTN3oGPHBEhsq7enp!L9Tq;:`-&m,4\$SBIT(5'8qi[!kNn,[%MrU5*XET&iC<Gr!g7`QO%k`\SBUYh*"`oaclT$f:f%!d3K4F43bGUf;ea3@U?rGh[,QQ:1/^F)O[iOBsB;q=t:6Nq-er6_A_r[8JO\S#r9+!q:?bpK&:e#4:b%9Bk?=6ZBCI`L&[Y7l*9)54a=aNQVgI_ed$[6tTad^6"T+7Oq%^:891.ftcgPA#9hucH#<Zo"";AVYS[^q&FaBI3!4.f$u?&Gj^tN%/[4T4ReS1%1XSHApanO#;Hn=\c"2[u-g'^D8i+3uN\T+Z:sn$@!)DYGqf&fX`dp^AY@u)-eCGe%lfudFUFMBB;kL+*Cc3dA/T1sM%)UCf#/O+Y2Wq\K]B#4MB:JoG.lh0o)8*2cO]mn#aa4m%pd<jqqmCi5D(ouatC=khIGjfJ!$eJ/2jXD:,Ef]YOHnu:3l=/fS7df]t%AZ2>Xing9E4+6mYOb"qh1A1d5^J.2'[k%S@23E,$@n-OBF(Z>^fEnGXZhl.Q*g/\o];qZnT++FH0]D8X/L75@VD.6M1(Cg_BlQ7H%1@b.bDPTA%[d+fj*jP'OR#B@=4_&;E"37\iJ&c/*<'[gVQ)K*0pT`3l^bmq4b_n](OK88eN*2MBatpS9/n#i%$Yue;eL\XknkQ?V%VCXT,phIA%EcV\i)H@e!.]_cOR5k(Lc+GrCQn\"=aJE.f"G>mSCtogP&+^aP;?uK`0MPV)^f==]:oT14"bsRNMDd3oJ'.*leWdFM%C+(c9(8t>W2qm;U'Qq>sFp3V;9]`MQMKl>M0YAF%*fm71W6A^XP'@P@[AJA8jTfDlSnGlqieT!eRhJY2Me/7pk).@O#`8CV<>9cV%19^SK:U%,RZR^]f8oJO"WQ'3\8"o,b3QB[uEOOQ$8sC;sgU)Cfr:LoqmHTP/V?[ec=Am*F<Qr3/^L]TdrOhir?1ss++;+_O*%)ME%_sqQa$?]oLQk'Y\o?!(,!*/=k:=I\4jqA0?"Ol$<,*^NEJogJ7-%H]E77B7hS'fS'jt^1#:8WT=GEfc&[sTA.,E(ns\,)<l[2g1%%c'sJ'`^;1H-;[+,_t41M`2)9&"VHG4V(L74A4nFB06*E:MCP4ePrN&%dZj-Oe_s5PW!-HudGC(dkGo8AD!E8r>go3qNnnQ,3V'As%;q2;lLXn"fL*>S:N%'U[$SufO9@4;\h4\Hu1Gh.Q6TpDd(#98OP$$RUG;6kTD64)fAQ%WQ<kML&_*;G;=#X7MXAbfh;prWs8`?6T%H&B1LN%;aZH-p.-RoKSq:JFGhAZXE%qfk`tYhO@A1ZX^M42t4i-,dZm\&T;+k^1:Z9[c0tYJH"T4*C$PDlr:[NMd8EU\-8\1:^=f%LJ2%q:Pa:1o[ttJa;igP;^KaG,V@9IBY>:)?,ssr0eUARX>^'P)u#qgc=422ChC#_>GQPD<au/`.]6W0Z>er8;6([fbhmEa1hOeu%NR$QG3-gRa-!N!m>ra!KR7EnJ$ls+D:>0H6-KD),T)8&SX;]sNT%TI3:J#&UXO$lm)OKK3o_+P)6e9hU7I/9eC$Y@mNLO^,Fiui&%d&Xs)G%L$a,jmB^=%mVL33+_1e+f-\L^l!e.GU:j9':9\R68CV^u[`"YleM4d]RVb[C5Z7ersiT&asSe].q<m$mY6*+fN^TA^'0r%;5<WfTf<<O?Vjec4e48jSdD<if'iCHGVdh8=_E,.PpUqQcduj_4o?sc8e7,"I:!st+BT+,`JBJ!$lebGrd$]0"0U?mZN5suLLsQ;%`8+>"=/oCG6tLBkF'-)jTi]X2F[6LQ2YA.)2/:f)dr1j^a$d6sLt^m@boptL*-_(qQr)Y"oiV^UW)$*Gk]k_XA(n;Oh=QZjpZ"?$%BJd3,gJKG\&F>s^>?Uhc@3uTm`g&smnLUSjb8P>(?$CtJq`\%`S7kDHT&K!aF*CmFZ=@eAK>;eTDo.=u0g`fh_k@2h9\`oV)Lb=M%$t2h9$:32[']W`_3gdG5%op[T7Oo_*H]AcmB7*:1c;T'YnnR5KmLtc1patrW;)M&QVE_8/@'Xjo,Dk#jHmG[KDJgl%r\M,qO\qms%'?1:>3$5kaaf!57RjM&1jHJuEp>n8<0kUrH6g\ho#R^e0"pWd0ADt<nB`&X6&maQWpn*B>h1L'O#U@0K]:%g/Ze[=gqGtXTR:G*q%dkb_fib"B+Vf^,S^gM`)\:0W1jBttJ]&nkN,8>uM2JqXHd?!;PXNKQ=<gd?0=(nQ,dCZ&d:H)JkqA\QtoKET%9Io,KW/oTGbS)Ki%'7i>X,8eK-W&W)"R'("S-Hri(-CfQc.(:#G-JVADrFoLV]j[mjYH-(MM2qY%mF+H1g"h1pJkO*.Al(bsUVbJ3JlOJ,aT]jTi(Nbt%j*Ok)eBO^E0[0oBi49NSDAc9_9Te&4G`rj1,7g)aFHjc'+1c?Y`l,W'*[JDGT$X,^rbZbXa\]eo8Kj)^aI*\5Fp_Ueq)sqleU<*o%PFnk3'Ru/Vf`iFO*&t*?i6>TJJ:V.P/CT;I_-st)T90ekp[K9CN9MCn@ltK;g%&9McI:i+d@=%;=e=&J:]+,2G/dN6'5K^A"[9tn%\dEjaHZ<,VZM,j&\`iu5Qnc1'lf0GmP0]?#G;bfAX(fS]kL6Hd>e@gWVn\&3*&Kmup01MI`VVtGTp3AJ=1,i)h=fU+`fFf\@+9N`%-O+0$[H!4mU2rjM7Vcoh=mM?:[:Q`S_Y5pYfYaD'hg!:+=8!ZX)OT2F2>1fKil`4cH9Et2IW_1*J:2.UP-m6pV=eQH\FnU%_"k!9%h7&D'BK'\["ocZ'l5nuUY6a`WHF!,p@G*@"72t#DN=1Q2Rt*5L1`_eILL%$A1FB01EQ3jCdD!Qr46`*Mkh!GiLXG2m1B^n-)0=bh%PFko=1'tnj^H7e5%p6NR\JZoZ3BEpZOA6gf0KuQEVh6YBhgL*6jZcMhW4eWH>J!$MaN\:;ZCV">A8?`p::=;c:]>4k@<UX#JrX$k%&P43^a?"6&)fr9n9%8'bDk'2X;q[<gS>^/E4CWZ<7m.'p*X@WE$lVu$@A`i8?P_4had6!C;O8DM\Eh;**\-1OL3mFX93qK-14Le<%RpQC>9j7+cdL`g._jVQ'>"U,KFB'8i*+BWV=FZs&C;MhQ5$o=-HI/+_T[%p'CFlJLqV:d"YBiAK+)YK1mtCUSS;Og1Lqdni"V\EM%`,O>k\0)SiS\9@hcJH5<2iOiSDoU4!2j*F&hPT7^OW,k1;1ThnN)Z/rh.JOBfno1+23D4[eC;/gA%:"YT&L6b-Ve$s9-:)*Wbc&T%PdFNB,WP7<'pJYS5/gdsR&)_-r"OX&qGJ%[nZ4m=,c4mJqi^^/1"5nESBc_9a_/cNS*&1Hjg4A<pQ`;"IRBnjlkUsk6f0uGZ#Xp1%]otP#E/RZ(1"]D;WeLW)ShX#U;"#6.osF=;7I/;%'<T%CV*%e<&!H1V/-\%N0?@>OrDUqeFH=LK;aEcEpf;$VC,`OJ$'1&-pXAlt%&hI)@=Wj&hU37J[eiJn8TDL&0AZH$Z"/E3`Xf4GJR!HZj;g)Z=I2s/3eSY`Z1$D810f;'Ld:T!+$0++jEJJtu$B*nqPb^C!:H2`e%jhu!pEWMZ3PE]_!V9EB)<Fr,!XO6kX8N+4dmEG1C"urKQlH6]>=j^JA<YU7E`A2o86(*>(]5(qtb4&,9=k,-5K\.eh\%Nq0`(giC%!4-I40-;kF?Er=\(g/F+kGG/WLpN$p$;\:Ja4-gTCu=5d@N+6aoP,#M\tAi%DP>.@ih9ZS%Ed&8+L9nS0dURb^5nm$QGB7+_WO?*%dG5^W**j'Um)+"$RHM>GUV`YO)[o_r)snLZ'K&.%<U+f9rH8Z4/i4Yt3%B2L:IS-pVXIVEk..lZXtKIHE.OAMg4#*F.E4mHhs_NS%QDSs"rf#O=5*$Gh\S=JmoY9VhP*@9L+Ci`k-f&r!;e&eu2RdEVOmY2g3@U7>+P6LiS0F>Ge;b3"oC"Y-H<V'=HB4T)^"5mT@l961%7#fQ5rm6pN#CfSIees6Vj/ti4&C'Vf=!$>8Vd4$s+1m$CkJpfu3V4APH+#nt[CEbV=1>9j9r^A;BYen\CYe#tm$+hEPGq7\W6F8j%3ucLTL3COSYq(]-ie)S[D'uOmkNo\@=\LdrcL`.MD,%.;lV$+*lQOqE2YD>S/]:/fcP\0PAa'&Vnne9M+i;COem\L0qkKj&;kGFr%O)2]'k`<RCFah!*Bbn*@3mZYi?\t9<2<`Tj1=>E-A+bDpqM^D&3Jj=3dKemK8`^H;=;[9@aE\i/Cj/l4fTd^Rq7\<SP]A)52bg@A%fBCU5aO*"iPg#XXER%;_3>6%acgZV:d5AO,;uK#;:Z6li2*)\KHBreVR[u14V&slH.RnTP[c^H:+arUAb)ju_]qWr0"W"YW3V@d:%q"Pi,`A(Y6k5D!RmeILFZ/C"5F/QPSpq-e(S&3*l3)f@)SY075#k)cST?NV[Y%QPXa`-:rgMl3/>B$d.J.:@V>kqZ0eta>E6rG1e%>i:EInP$dLDIhuO/:#4.'3^4L-l?$AagX..n-ig6kW#@H1LI;R@E/&_83E;09(M?V.Uc?%NK$X=Jo>._)`H2\bX"+,RtP7R,j[iM%UR[p]hpQsSNmWT4Y\Ml$isJ!q9?FY9E9h5N`FTQ,9G[bq]C:J\[;OlYH65nh&.lD:V@.*/gS,/9re\cR>K5=WSAIg\p;_:&C>3hm%V';+QS_'J_Y]W)2lX@8cF:G%1YTNcY]$fL-)EL=i=q:okjI5j@=&:`i*l_ELjfP[l1;72ccoi[1)^6o`N7$<4\mX=dN+7mN\,+4U%*+SiE@(:>cSSh]If(##;nSNG\C0.1VR%Ksdhb=pumVs3_Icp1hb]c^05\mdn/X@;:=LF_\hr,_7;"\Yifj`uh:@dVFBeK!U6:6,>%#ksJiV=<s?HWiC@=*#]q_78f0)SN$q?!su'-j-@O<P?%BhDBuq7lBg=/0NQ=RMaMdkPh'UJl[V;N.`\F<C`(3RI[QI;`KK-rN<n(%6A;2?33NoS#kPDRYL-XLL8#!<gp/Wo1chqqH7"PYPj:+Ns.sJ46X[3]m%K"V/t/`MOj7+ueLg._/:f>jLWs^l4/PYL`7fk=NNRV!%B(Q@=mfa.E4*KA,Q6YbjcuW3HF%gPrlbMoJ.K,Eap5eoNpRjD4Q#f"TGr$DBO09!cn"CU4do0tN%f3#42uQG;R8u+iV,a^rSi^O&%TB"pU9#'FCAaRb6R0L@h;qCQF1,mg'KN.bSF>r+;0*^1GZGR1^hXG;t3:0;le5Pm6;Du71W:,?4.<F0nR7?R'9m@c;Bq9B(D$fCF%iPALA)k;,"\p0;7A=ZfOc<nMRfu^3hm:u#,?UBSE=^tWB^q*IV#pe*\JJl?D3$5e]a/4V2Rci#n1?R6c44`BQC0fZ$Ji?%<eKDmK%&7P1cj&A/(CViH!A+4uq!!o>4;\haR'u-X_")21!:4Ld"V<V:]HWTIa0NLbQHp\nh;bK\AQ+Wsl0sPoo3N7Hb7[DilGVioRdo4Dm%rC^>_i2jV0m*C$TPnKsc4(]DeK[Uh.0DQT5HdbZ7YC+'tkIr9%=)Lk%oG=FZG%2To,>r5/2Pt(+V5Wa.1uk8uK'tPA?Zr-'3ncYB%P9/uni1=M.auP[VS?CRF+&s,-l\]3&#FNE*'0[4FbV[LuSU!9)Xu`E&6Kk?:_/qlFW+Hl?7lN/]e_\1r4uA49]OV)74E[UT5/)+U%/PB$mNa.U0o$lNq[uQlr1uUhp3NB3A1.?*%<m^%/)!bF[E:]JWEo6#h\n/c-PH`5Sj2I2u\:BpLhVE/nlM\3dhO?,17VRgVMYq$e%)C'Mj[ra?3YDe^j&F?u?\`u3Dj18j7FZP/+lZLX!"#fH!g?%:>)0aY*T_V@PK!Z9'K\5`@0=3=3hMJE0UaMspjWaGul]pjobsY]4%Ab8T?7)88jMDD4KhFi7.$n]@WdA.8!MXkYF(9pIRd;/'15[&/+2U]0@Z2tnj6SL"NLSFHP,e10H^"$:Ci#@4o)<Kq&;'?L]dPCIu%f2F$,_3nf@p.dSXic'39fjX`mh:,^T6@hMj5a&&^,!)k5%%0.dp,Y#R<b5)41%U@@[G;A0nQMn">"4tnG>*oh3+UZCY4>cH-%g6`%6#N=9YaY9W\Y+"]5mrPcY2bFEeTlR``Z]P*0&U!2P#UQN'fBq:lbinKLcMD.W`o-20sHTJ(i1,?_iB_#,QG:jWN;X(miDc9'ia0A%`pD2<BdN-X\]R!k23oMIesuL:%9bim[C`4%8!@]W9l=GGDXTl1E1]!*f.P\&@p`7CY_#?`dn]@7liQ)E5Su*rEesaeL7]>RPFdCq%T#bstJcP]taVAPj3kuo%Ogc^@NRpTEMCNYE`?(9qm-6c>r!$J[RqPYBF748Y@h#rgV9sn6JA0t,b?>K(JHXsLq,Uit>"0I`*MLXS%_A6*pYcV/J5XnW2MQh;l0IgFp$I7"mK\>OM.c[1dBpP#j7F!6bRNr%c[%6)C/m[O'FTaSm$Gfsh.]t<M3j1ul;;am^S`R*L[jKG[%'nj[D8Cngn*)TPAQ,7@6-g!rSUSJ^g.O1-(o=J/k3.OZp/8]nt"baR$Li"nK\]E(S1(OUs>TYa3^I*lL[(obR"%VofP+i/k"N?(>%TOJ0C29^g8rkVF`H'\T!O!<\)A9iakrK&4K=f6tb_A/WBOJ$^j86goS5"\sK>a!A?)2OX@+p12M-@"p<qDG89jR#@IKL<SQ+;8Jr%hE(e-,I[]^9DjiG)-D9SmBc8WLcf[q@-cI\C2omR!O6bcFJr(q0JLMD-C:nW]#f-N/IuhAQRjls`Kf.;63D*Rig.+ULcH'6.A@*e%dH$<oW(F?4U1kV!E^MJL,JkTcJB:j\CP8r2A]-'ZJVHP@!?3Ou1BZOP6;p25".m\Fk"-Q:T>]O"Ve.k0[U%]qa.DDP6JNWL`'mgr%V.(\=Nl;FTM8fAp8`12?('GEnb\&[Ib(\`q&%tq=S`ITLLs8Ac.)*Y)V`i1IGI_Ys.u]ML-A2^G\8*D$-0&GTGnU?c)kGEmm?%n`%M62NG/E;VY+FFrY$up25iDS\bcBs,e]&ItLP*AL"J7]5"dY*nGS10:l]a51&3!,'Yc'!b(9k5k>>boOdb*etmZZp#CR<dr%gNr>l%<8o]]*l6]m*DeT['^$5ag8gVhZkb"A$s(BfJYL*pYIU;OSb:us,SnAdG-+rk+V6M&jAH\p!L%tJEd$p-*#'ePfd-(f50(A.mU7hV%l6k.hAX>88@Mi/]LGU%i0:*U[l])2W6kth8:e2K`jjNR7U^4:0Jk0o?Hm$=#jF[jCDd[$7j:j2V#pDek@U6r6O2/"M<n:%4Q>s9#%@hX]bQkkT&#U7-O_pQ<3Z<6f^H5\f?J42.O_ZEpDicTk*5>do+=T4=18MVYI^3)tI\>5jC&b;sPTL,IXR85*&-S>Bk]J-;#%u$Lb%en-a)Z4$2D]u[to2/D"";gdV:A$3[8/PZM=CH=nIU!D`SgMnm]o*HZZIj""*YGM8KSGrKJ`D.%%)S,WR5"qVRYl#*,O>2aSjDpb]%XlB8KEOa^7lGIHu6u:!X45M!fdDh-/T%oAEhu@@._C&]$P4^OKnd!PdWSoTDf7o*MCO@]eh"WlNs-PkiG3AOB557mfGj++EV`sIm%"#%;k53fE)?,-5=o$8,cqR*MRrQAOC`](U-%<q#mE:MH<GFnWoX$>ik=0I)+j"IuglD8]26-,Vr%u_#NQ&C]rQ&ZZfcD6eSbcQB8%Dgb+TLCS9P#1&G8MC7gSn,TrskUYQ_b%G#,Y!2]QVsaQ#e$&fLko[Y2oW.F?rQ:1nId'?&^[O0W5QB>25PJH]GJ<J:Zekt3a'2>(%op4'&I)G3h^)$45?ZZ(;Y;lKrIs_%k00+IL(BWIm"fLhg1T0^<m*g0+-K&a5Ierb64al'4Sc6bN:Oi3#!8i0PHHYVLht5XO2nfXg%orgK+h++(9i[[cRrkhN=rLnbFr*uWXJ(a)054J4,%fh"AqjkIrmcfWN4+6(_VuQV4JBr`(l#WJHqOH`?ri9\(55SK5s0A1Zj#I":%Er,D:pp>;BP]6K[rUbrm4MC7tn:kSG55ot+YCHE5hBRP8naPdQ+$P+s6`8NuFF*W/!*;rXIIr/i5Q9U*,8i])_:'nU4T/n'St:8t%oO/.Mo&/co&"[,$i9>k254E9a%sZgmrLS1YntFMG%$*VpHHF(&(I*:nd3F/X4E>c)dne;8qWZ]%Hg2$[1J[$LVf[1kcNHB%RAX]a%Vl0!]LVr@j&b&!SoLIBpO6"c>bjaKNo^A'oHe$Re3_mG^iV0b/7aOrcZi1]W^YGFZ0=GNnhqN5OYO/k's6'+2J%e)7T5DpOVq^fm%KAiG=0DNTB$iZ4SKtkq&O1#l'_sKn-[_;H;[ho'sm88IBfcL+Rm3R73Hc[oqr8RG&05Q^J^$W*)I=(nT)?.,4nXnR-pq,8oIu!!R%gCo'`]DJqhh4NBgriZb!f^Ab2G5%oC]0Ehh8amDJP<ZcEq7!d[s5s%9O#$XSp>ca&GCO;<qh#;AYhf6sgYM>UmXF&:pNs@s#ejqu%ipGJ6Ir0Q1],CV5p@riKO+$3bfQV-bq-Ouq[QXIODi]AEp>U#F?Mpq[M[9=)p;1b$?MN+="om'FI"H:nT(eQ<\US=?mPf"/q8VgT%"Q-FHlbD?Rf59nj[tETlD"Z+mjf>l_<EoBY/J.i(g\td=jdW_lr&<C-&q%gpaIh3.rhAeR5J')R"ks+^T==csT=b'Lce0rMo_(c\%5&:&5T=OnjIqnik5CInI:YYksJkt)!SPRtrlV6-)2f*toi8_<(s8)-W?#SK<DVN2c]Ooo)[;@#!D'-ad&_m#:D>Wg>qljr7&;HNi%gBVTM9=O<e)4oWl-arF4D0sC5]pRc4g\1P^Heu1oLZ-q@p8i+8FLp[XdHRCS7Al&=(S*0>?$*[AFOB?Idm^0m:)BHR3aHj=k]G5:%U=2Q/MbY(Z/im9[]'+7`l(ZWqVi+:dSLus/FLp[XdHRCS7Al&=(S*0>?$*[AFOB?Idm^0m:)BHR3aHj=k]G5:U=2Q/Mb`/pFS`cT%07!MsOHY"RW@&r]Q@<V(lq9L&(7E5?`G<.n:Z0IWG4E[PZ0/R^A&Y)h+m8d;a=;cbCY@-c"%rO1U^tFmQWadhIR9<OUCA1s>g<G=%(fAa*V9@FV]*Po'#<CjHGCV3;"i@[j(AYWhpX02//if#-4trqI=nOX@ji`,:a7VgaZD2Bce6J.H>i"pF"dEf^1j81E0]CsaFEih^%HRLMBn**b!OJ2.-Q]B7na)KnlELBH^ld]uX;egC"*A`H5.%^VAOO'+L2pJ4CC7952pp;Y4=3o$B9n0uJ4cPdC<Muj,\/RR97`]dP%UMcaS_6,`3UDp_t06HWN'VeBMfaU!W\*<&mYTcp-1T-/q$ae7e`?_N*b]h>eg[(XnJSY.WP_A`H#d+If/Z)uf';WjYlVFA#>e)lp%:mCj9cC0ZXYoIWK'Zq5f5'Pd:@r.12dJJ-8HF1)d8^opu;m$!>X)VXcY3oXa/_h'slK:^ipHT[Mei*C:'mDh$Js8+%SmK)628+8W%b3OV!Q(/ol)8e]oR59;S;0TCkHP\P.>!1Qt-qb4ulAQ-J-j18H#,r#i0>Tmkd>\YS@<u^AHEBhm`jOEN%G9$>Aq=D9HVO*1W0K)e%VdQ'6n0ZX0.D"]=9*NpNjf-jln<#`N7R+Ur1GmgSk#"/rc*d7j>*#/2k'UY9`VBYM/reQ86oV^F<S>&386Ma6O/'os:`^sJ;"WaQ%-^K<#@s4)6h>!"-VR8>2YOuU+\TN7<K!Co"?_GJ6:47R`b?RbKWcB!Dgg3I(iL*s_K'VBTNXs@dX,bUGnB]`,=^1Jk>*$[N>H`HH%DD'\or@</"$^<.O*MK%O/["(^a0[Gn.NV`>gJ#,7V^h_U*J[N]rTp1I%@tG\k^1o9A$$d51uKHr1@aKR@a\"G,c;Y)<,'7>Bbr^N%['PB+'`is$VdDd0T,S#`d8G*cY>CZ[cN`dIA&e!Xj`B?%np0fgVV0Ho9lmHXT@W,dl8\m+^Gl8cD-f(n"H85+3DLM#f,V.:LD23^%p,MHa)W\20hn9-NK,uEc"96UFe(E4=l>[d+/'pGL56`+#Oa$W3g]"M+"peV0Kq&&oKX\63i'!5H.kPf9jYPfTXo\h^U@Z#jE]CrS%%QQmS2+?8ge5n&=V,O*o0jUTX^::m3:")7[cs0H,pC*t^$I]W($>ur8Ap[$QU'@RtZ[0j88SaM9A<MPT'WPF]MpNMH3A0UO)Z,Ij%I9Uh)ObX5q@,E:q]bS8_.h4O$.ko5[\?Te@giQ%kdKZZ\=?WZ2hO#gWP2n*jA@l#[kG%N*h!ihQ8%;b$LfU/XWO-r:DfT2eTF"]7%:-Q66hD^(G!EP=;8QuR]'TrO0RHboW<Gn\Drei3X?8OWV0_:s3:+giSEC\h>/+35AouTX@oWk:YXo.G^'u4qBC+uKLG+oa$26L^e%YcFOWdZp-$gFmPY`lL`8O5;Y,=?3dEQY[ujSR+k0'BOsnk7#f,><TtJBl2k(ckL^VFLsLJOZfjF>V=W6(@-(UDVcmNV&7eM!W,$\%p(J82cAQj.6&MYkLE:>BCc0Kgo_.c0qhu,:YY!;p:9V'tE?92>R-]p7Pujc]kKUPh.T*@f9"8ZJoIa6uN)$2f-@FT3\^_qW'tTA[%c)q/QhSW$Yku%'cXB7`pErcm`GWip>d$V)d82>o=fg.$EjNJUr%r)PMpuFjX6^_8'/NuF>d2k;I@2S/::ICp3N<>m?]N$$Ti&rth%'J%ZXb%Ig['igDjO,[i)Fd&[AKG,/mQ8mKKd79)Cpd"O_D@P2.NjX%8)P"<G\]!T^,<f-;&qf-8W'Se]U-VVEg`S$$Ae5`O4YC1X%F+F,uA^7V>4)S2d*niA2@(&<2Aacj"p57P/*EU"9[8sXO)/i^@BJG$R>I56WO0Ou'@K9%aq@>i%5=bCc&K>0hWTJIpWh&":X0<5u%MQVWE0p(6\Mh/>r><Ut9j_[#==O1qfg?buX%];HBgt=HL8@ATV2+=VD<f=6(g'WdLJc`E8jrfdTChbU##;[0@F;PgoS%/M222;Ji%gM<h*?JrfQ51p<+3T$UFE56g:OP1)G8*u#=(@?h(j9@un2I#+V1kPgcj3Gd9%3E?Gp&at*dmF@=CNL#!YSXeo];N/R%u;/lK9QC;%O7>bERlDiR"b&8\/s0:MO,FifV]Q^<ms/6GkJV^g5"$#iSg1f30M7^T-;PB'?B7'smIJ>:(po%-QjqK[mhMgN=DP'-8s65YdN(bV%7dXAY=Zh":>)H\GjeK=l#;Xki965e?6Ou#=@9MT94Wr<9LQhmIO`JR5$bR1J!lK`]+I#lHVRZV`BeD$;D.1*f3qaOPh!!b]3fQ&Q%MI5Ce>LjSnD:go-I5XX:^Xo5A_JM_);L2U&P[rB:(T=D%(^K492qr$@CiQcj6YpXVV^Dbe=p.CN9!gG_pcqhI2:a63NBQ/O$kuS@%PD*8._]l/%<I?jDiu(Qs^6bVRWLZ_$)/RF"B>j-GM4Dl=d9?lDo@T*J:edM4W-%2Z&=N%\1A?I(?u]Gt^69,6]L@PI%fUES&FTf'%WO_DV4QoO\EUN4pUi(PBD&RLAC#ej,hLdjZmoVk0\@L9;FRfc55]DL)AHE=anfe:4I4)5s.rN(u`d#k#L_6<l%"\niZ#FH"UOM;.%JIXS[G1mOW&/UB`9`t-;Wt$Yn@f_,:>9F'XE^*+-<GEGq_FAbBmsE13IOfeQFN]G58\:pj@IdsNP=Gsu.OBQ2$:nl_e9tstp;#br%H_rp+F\I&6JGQR.+2k?7A@tnlp6#t&jsD@p8%Ze$7-VM2]h;&Z^]OV]i0Mk-ULtNdLb[:8:I'Lg%Du-U%JQ<G6a4&!]uH,P0UY7-%j3.1fn2?)S;>&cP_H`38Y?sRk=B:F=/HN/L;RJVS#S%s@fL'`V^ap%CPfIm7m#811U?Bj,m,rl2"4.X\TG"s@i7RMN!PhVk(Y8XG%LJP'=9<2iYa(:V%%*re7Y!LfDf>&!)\.7a;lP8Y@Cp!M<XX*_$/l__DY?d'h!UVF5XoUFnB%I%[MQ:O>g?KU7IF?e+E5Xii<nG,;%1+q+XCS4'!L6pFJ\4FnM"96>F"+!g#\d!C'Bm'r)GQ'_2iG#.A2/%DX%34k$pXM.jH?:Lr[c2,*o_=*B,eJbQJ[ulA-Je#,@/.sK%_&-WSA)$8eZu'dl%.J^_ZYSKa(jG\m2,I0PPLJM0XKm.W`M]k)2m_U]s1YfcMX,K,I%B_;n$#X^MYYu@?UK<fhImDtd=XqfkV)[G%kRZ;cq?&L.rW6Oqk\KB8<2>u9YG"0*b-emcTg.jLZkn-"r;i<RJ+OH,')Ke"%K-<q6[o.,m]E1t:m(;4)Yu7a!mfKFhc4u70D[!e%LZ27rO6DrtJ+Rd1')D\gL&UQgfbF8jJ9C]j6[rF%Won@2r>A&,kC!g<"d-C8k\KCCL<s2Q2=q,i%fHEr6[o,VM(YL::lk1G?UK<8%P&n5gTtcN4*`kA%iLne,C5@]T!?Y=>?,<+mfdM/Efij3aT%QbF"Q,^s]l?R(\dTAIAIc@t\G/"?9l6L"`5k+(`le0tLP<$8bRGCP%83(Tp6?`5<k>f0uGYFTnGY:%K1GhQeNSt@n/a\o`0-.=Vi/h+CY=L7!2s9m&M/oYlKY(fYhF7#n)Q)\^_FM%GD&'I`kZc9mkX%>*%obp*[;n0^Wn!l\`!NjD0A;pan$;#g-6?Wp_+uuu8p4Jbc=u40;a,/DWA%2W!g:Dr!&5T<QM!`S'L@ktDl[\a)n:_7>!3\o;KXMYU%M3-d67u;DaAC>SCKbp5>)"+'5ZgH.UdK`7>eriMBN2D$)pgU`X+Po,2PQ=gGnOQiQ3%6ZfILFsaO]c@YM\pq6oX!ImWg_5Cp'KC?%=SifFPBWl:m/^N/)k=$jd9C*LZJ]D@!a0OT93QBJJ]p-1!DsU;8CT+g,c^%0R<fcCVSks4.CsXSR"LRQ,fE$m?7EoPj_GVUYZ=[4%7-,^&d/iQ;?Et,0/]si9bsF7E!k[&@`2hhG*/%\K*h`:mL.HFEbtf:O-1<sB__;9QV]h?WO(YFU"Md*9O=4/.8!M>'$S#mJR3EU'%VX-UCAeH6\3=QQ&BMLnt6LVG(p<o+Y#[gCp%#>GG,n88&;''FUOcsKR6Stf;,cfQ==%S9@.,!`G>6U:.4g\3^^s$3mAacj"p557O%0fXF20e$Z?VNe@j;h35APB![j24?:fZ>>p3`!=s69aMQ6JpML@`aoUWPd5s@XE2d(+TK&E1&5PnVZ9lo9ONhB4VKTs]gT3cM"T%:%AO0J:.A=;fbVbo"KEnc0/Y!H&0uHjDn'Ti;/Sd<LaLl.`n:5<1>>U0^KMqs1I9sf?TcVb2ZA);:*`mJ1g!)gnL/Tc9cD-X!'k/#,%$T7#lS5M*d+\.B4m,/\AK<6rJa/VF?1p%h*X%Pk"W!RheMHpp_Lrom!K2KW\poImY2agk/STeq9?s$P0TIdda*nEQ1KbY/ac1;8J%mu3j,#I\)?]7mZX*cj^1rOBbXlj`[[W"Eq[Va05!!hOYu0YUKLQj&TZdYN+hqHpK==TVXV<KY?8&2Bsn=XoZ3>j=t</E-8%$'Yk?%N^%oW7Ec$.Ts8<_V:&%dqGH"t-'H%VHEq>@&m,2^qu10Z#J:mI#D4;%jFDq-*0Q[%<<9.25p[XQIg@P:3LbbG&68kSKfq"f3qROJ%Y':KcHV`*lL[GsL>R?Ic+,A'V&m#-(ZF7O]$!beB;.'\9`KNVr.:<onU68*B3##JhB@r-6<C("!#k-,B>_tp<Wa$:XPt:a]_KiDJ%&\>XLhAp%hbBBG*"mMUuT)e5RGEG7#$!<I`:PpY'Ye<kj.g71(e1c_0Gsr?H$E[H5.F9>[Sj9bQN'ctaXq\mfI<FIJGsS)t5djFJ%Z,Mua_;!HZQAi+h7U[TAkn$n,Wql6%qo<-AMWa;d1`Zc0f^DsHOlNhCa[q)3caZt[`^&lQ_s3J76>qYp5-[HiEni,skGB+_l682s%1QOogCj8D6OEbj7[O>#@gaM.L!,;2%Rmc!h[Df>,T'<SM8dL/dH\Do;TPD!iQ&LJqDMWM_+QJ#QA:1]F!]Ph3^iLY]aCUX.\OldY%\OfoZ(H_`$F7Z&@gN*nS2]:7nLU3([V<A.l@!d:?rq%6>T\bFTTH8ru'E&]C`a'N0fPR^Jdk*:t5FP\nq$Kkf.^>kuS\DIdfB<$n%"'#FP7u<Hl@\%R2]'o;/J#'K/MaCA#[F"=#=@Dkm8l8ljdC/BGf\3?CejipP"jC6a07/KMg?JmK[8l%cVc,(AUE3k>%qIkp;RbuV%'OZX(6pr&GaMM.\-6Odo!/^9#MF9`tF/HrHPUX3VD?dqg(X,A)QLcO*k4:#U]j$uXEkpf>.R<+u.KT(rXTqfl7E-Zi/hh?0TqZW6%WI4)d9)(i7#"hZ=</?LtKM('T=4ju%LHDa9KF3h4fR/)Z!:R9\U4ApY;,V0]W3Xf]$?'IE;$\@'dfI:G$+e0\eoN<`)a6ktgKW"'%%(Bb-V\0R0hJu@;e72aHeg=_+k>[CX(Wtj0aorF,;>:!s[\LKg<E@q2l[%W+AJ6aR'>pRb^1YSq_*ZiFcX"c^3L4/.BN8*K@h(l%%^$[U'Q`-Y]3X\CE/$ICd55qgFK=?oQ!V@ilnq5W%j,sOJV&qC75fNe3h&3QC5tL$Ig/*i&DD8;iLk_Ji[Xan7S&:MpkD[bIjDoi\%=\s;<WcLAYaW%-CEg*'Wo:Vok83a"?5jBA*iC8e9@s,l'DF0^:73`rG<TY3Nd'+XLWY7W-p4K0RA[/mp_?`R?4YIpQ?9jV5fF9id%Jb41s=BI@XafK4%=Rf8U]E00J(9AU7#!1PG+gln.h]rl@mDKY'M2YSZ\$if381`a0AGntW9-3UmeTB4dcppjkK1;j]@UO&kfM*"Y%BUS'?A?=Ocn2=Yum]eMsRSB2F/gj<3@8Il3fKmBrlN3U4(s=6KjSR]C!!k/I_TE#6T%KC^^i&FCV91=/&qK>&(*UR5)M;1[;U`HW%-MDDp\CO*8fV2_pqJi:nEV`-OZu-TAoUW9.:>f;So"tbrPmjI*Z=g$JcG1&gSiSG46nG]??&k:(F@[cFY=L$5DpG7Z--@T@U"eaA%m9H0o#=`ijYB3:il5?YF1bUT'&*)u#3!;dTZBln[)rdDEa>dQB)4.G8^e:OR0O2[/6<PUIPILR$P;cCQ9/n'r1=@4>L]BI+I'0.e%C6di1-kKO>bKT'uGImYiSu4iW8#Jpq/IkaVaerAigS\U!WDDA<mTV2!IPkY_`6H[ars^npD/[<D+>m')N>6MPO`Eh%HNko,X<-Db%Zo7GPBF5^q\m6_Bi#Ys&0#pAaeO6ABaGn?,*oTr$FH<j>`kYEp(oNHGL1IfY!/rA<C3CS.*Xm_1+XHk>@7':JLFoFJ@?0f1(YoaF%m[U]P=Hsk1YGq)Y7;/m060@m.W5])3!o;YncoD:O=114KpAc-_FB#5`[N;W73J'C]WrdkM+\+.UnT,h46MnI&?ltVfRrDEXM9V2G%O$7$J2'@H/L1QtM]HVSn[E$k<5HneG//=TdB;@WB47B_6^?q6CmE?1/)6h\;-@,l&h-kk92]*ns[BUdM'42RnKi=O^gmjPjO]9<A%ZmU$?l#0huKtf&;V&)n!H;GcR0*/nQ*?LL,U]A4l!=4$YMP/TFk?.\`@>>?FHDLng^3+%9LEk!!XaRCS#^JWo"h<^3S>N5\5^(j^%j^JW%IN]r%ZAJ$(A4Gtq=`$)oJP<+PrK'd_;mLaaI%[/1bo-!kWOSAfD*-p,;<;a6_&0n*M_[#,n,XLem5u[0(:j#nG/@<3R`]Cq%P23"-*99coUV0eqS]7=ZHluprH3j[@Cr,.DYWQj/OP6_XL@GdX,9R4(!QDE-2Z=U!i"V$WZP$/n(bf.[,7SR)'!j0*o%l!56MR(0%P9VdL,]SU$-NWU(75P-B3L5<WF@ZG6_P3T*j#hl9#?n#:h5l'8FciOp77B0jOiO;J25FK;=AaM$b-j.Y6k,Zb->(-9DIti7CPjBB%oMJu.(2&c<'cAG'3Ob8cQcLX8:MR:EAAGlVKf6_l&9^d#6sFW/5oQBqoGWioRBl$1:K'flUdIIV5Fl5&`4KjtQ=a$R.r%%s6cHDm%LnX1(r5h>mfofmE1>u&$9PQkhK()SZ(%[KL>e]/3mBWQ#S(m#@"XaZ!"6U7&2oL&UOKh&$E].WQOdSh+ZWu^;WN<CPgrOPV?B-M)%*^\h$KG(J/JS[C6YiO$KY^P/H`MfieXeYBb@151:p?.B4*F`+`!82ZkNhBKPj(2TbP&9/8mBV9S>2.).gEqe93Jc`a)e-I(8<qIM%JmKe(86^^K&TR!rQmV#VST6Ks0d(/`\)&S)GiLpUYCoVVO`3(a-JWd-9HZgu+uN;+mpY0/h((;Ii7YeRLP37+P0I&un,[[G)Z?F)%9:N)E`)/H8D520b,o&o(JR.1Y:28udj,-ag\MJW4*ZP5A9mFJ#[G<):T^kcPF05E.Oq_<aj;"jaq<73rpGbkrS-:XoCH?`RoU>2P%YC_>0^AD!K*kHo9iZY=f'8+HiL9lc+eIOrRl:94WV$14@>K1@G<r+7l%!Pf<Ges!1d_E\17,2:9;*`.d_>J2Dr0=Qkq,0Dq1?'cE%(K1_H$0Z#c;44F4prNnR?lLl%J8c2*UD[L<$))2A0#nek(Bics-IrM2`8PXGqZKtHnbsM!@RlSD;7MDaWI"qT8KFMJ"G33hG"Lu[%?R<6%",_th+s7k4^^.!,c-Ej4"/D)0b2Q,NGL\:;&_T/W/\/TQ&Mp%\T%e8l623guP-fN0)R(n<XO:>>i!^OD[O`ug@>M)6H".em%k^K',1ZDoO=("B:]?Y%";^n*ik_Ms_SPtPq\aBk,2PlTIdN4%]S!Zr+&h%rpmK>pE#=Jg&-ZQ2#?Z8>,=W/5KZRSZtUS`)RVh5kB%N70TSClZmhbIC6#H$"ehB/#rccOp,XAB=tAj=&Z%`lRJ7YVBGRR,I<dp"Cf=>eOsr^Z><6lupaU%,9AZK9DuOLK#$]?jr(4+M:55%qo%0pYl95B\p.sh0DD%Khl8sB_Y6,$KX/b9[75B#kQ70_/Jp&)TuTuCR(B'P2P<s/5S@]^@<uWSF=B8='[iIF!m*?c:m`J&6,KC<%M\?To$ea3%=@RCQ[*G6.=`XCVU+4C'TOoCC<UChdW]8bX@<!Q7C!K\.`%M-Xa/7@/!Pms9k2-len#Er4"=2O]:).S*T&M/t4,%?7%RbXl@F4\[-_M)?2G,GmI@0^/qWDd;Ok"[pGPH[F>QWQ]=]3&jb_(hD&$So<D!.41i9KNd_/*2uGjNR8iN8mN0&;h$JOdmMX3SY?N%L[*@kF66>nQc2*;FKd;;'lKnK_4s=-F,Bl0&;gXF!KJ5l6$`J;[O-5u_[i$gD"jlYa]8fX\SP@Q\4:+[CNg4!O32677X@/a;&M+R%;)u=)n%Ddd.sTs"mL]*eoV+I,PE<$%k:)[LcXhm8eC:=8/Bj&Y2HK7Mi'+^LmkAsbDD3pWA$#!2Km/hj(:r.Ah.ndal1&e<R$ISJ%"GOqLK$is^)tWG6PuDgL==AL73;3SJ!k%Doe$t6k9s@],=R:s3]u+=>=,aS\b!*i/=jP1AI;!#R]aE`"6(o/HH&"i>3Z.^+D1qm+%k)Ar<G??8?`L+3G7YdR@^m<&-Y$\uGK=K`o6H=;sYR-_@/jm`BCpWaY_r,hc"p'CpI-Q$CrKI]lGi'M9!li9D@#WFekUSj."9]m8%Jm3^QDPP8td&L3D5KLmg#+8'4h_<F"-bmnO%:iF4eWW?#;EG9)9GnDeq1H51!HUY3_rV"//8VUG\A`h0>1"9[`;@1Zq*"F-SI`l>%1Q0=cI&3#rHpe#06=:]7_TuSr$4"$Q,(=mh"GMHK-7.a`%"T,nSEbY51_?9-.EeQXMP+&i/>e9:BG;\!Ptu?"bJR%B.TjX/I$9@c%_13dXJO3f?RfZpI)()^f:iTl&q$>n<"mF`K^2=7dB-\OcFN7GEoaL6J0U]:9NB39VM3!bgF3I+Q13U_fT((FT=iUPGKl`:a1$1O0%e(c;QK@:oa(bHR2a#^-i!:.M>4)?U(h"4_B(98G*IKj!DYXlqPo7L@lPP!\&fNlC_TTe1f_gq4_4R?i)Q'"b>?&7VcFp)>c%i=E2%0Ug0.o'"`B(qMUKPW&)Witu5Aj`p<Q@)(VQH=Ln-O?UP+<Sd(U=3J[>H\$mFG>=8*FdUD6o[PBF!j8Ki&do5peQojr-*#)g"/FV$%d(+spcg2Bt9pG3`c%2.CM6AaehZsNKfd;o@j=Gf6J&/[U[*)l#:0:DQ8>B\df\4=XP7I";Bf0[@J!(`u2=q3.[QK(Z$Fh=Sj,-,=%OhC!;g%8b@_:C!BfgZ^`T+3=fjlW>L=PZKdE6)8Q>A7>>Y*mfs&3_]`g+.pu$8\\S<u\!#)\PZC@5smbEU@"pEQZuCr%tF4lUJEX%AsFG`bJuBE>S<#5$YHqN5.O4p]SZaKm=F]gitA1k&(d[;5*&[+SH#6T2sB2ZY,#'H[qA&"&>)6WVJr_0Or6T-R3sJ%Y0(nj1)9uB%RIYMff,3G`Nh"-/^1!UK-&#,&9aqh$#o(HHC3+6SA4+":!Ktagd@mm8"r0<K'tK\XK@>*_7%6/:U%ruXe%G[n*-u;%n?/j#:Hi8<%b;L9m:LY[tJ5"Tn)gTBY\@5m_'Snf"b(r'48eN=P':k2-af3U\=X/%ZX]3E+6gSkA()c,%25kJq-<-5e*k@lI\P/"b$\Ys!8Q!RJ%"52<<Yl22\3SWWtB+!(!_cJoQ8OH36n#jXlFu`.]1i7.AQG:gaLj.,ej+(-?>dDo^09%==\C#.k=[i(p&Z76Fn01>.<d'3$#GDpY%lFb0miMa99Xd+5a3&"D,(3:ka6JjrgB=?C_>'Ed:+[9f/N]l8.Vj[:t->]'1I+EWQ4t>.+Z)hHl7`:[W/)p7%p?'-HI.Q7QIK0,d%^OCETq=*Y/]?btVq<%e;0Z\H&]mod(q=a\MT.b\CrUnY&0/#P;qV0'jq/-&eQS4t;s7#STj26$[?iTVn&&8&8$\,YSl0I7*q#4q%%D!9@"5PrX%?hpa@Z.4d4rSckMs8;H`_oH+j^A[#GmiRV*^&IZgb<'g!5Q$l<T09d\it(i+j,`[.rr2L2s7k`GDuSeQ0CSr3q;$hh%qp020q<d#<^41G&nK[=Ds6KIAjd4<^J,Ag$oD=m3rqbmZJ;b]Kq)@4/gV<dQc2RmK;VD9~>%AI9_PrivateDataEnd