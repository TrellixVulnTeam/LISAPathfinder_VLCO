%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: goodSky.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Thorpe, James I. (GSFC-6630)
%%CreationDate: 10/22/18
%%BoundingBox: 0 0 449 222
%%HiResBoundingBox: 0 0 448.0688 221.4561
%%CropBox: 0 0 448.0688 221.4561
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 15158 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FD64FFA8FF%A8A87DA8FD067D76A87DA8A1A8A1A8A1A87DA152FD047DA77D7D7DA8A8FF%A8FD56FFA8A8A1A87DA87DFD04A8CFCAFFCFFFFFFFCAFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFA8CFA8A8A1A8A1A77DA87DAFA8FD4CFFA8A87DA87CA1A7%CAA7CFCACFCAFFCACFA8FFCACFCACFA8CFCAFFCACFA8FFCACFCACFA8CFCA%FFCACFA8FFCAFFCAFFCACAA7CA7D7D7DA87DA8A8FD44FFA8A87DA1A7CFCA%FFFFFFCAFFCFFFCFFFCAFFCAFFCFFFCFFFCAFFCFFFCFFFCAFFCFFFCFFFCF%FFCAFFCFFFCFFFCFFFCAFFCFFFCFFFCAFFCFFFCACA7DA77DA8A8FD3EFF7D%7D7DA8A8CFCFFFCACFA8FFCAFFCAFFCACFA8FFCAFFCAFFCACFA8FFCACFCA%FFCACFA8FFCACFCAFFCACFA8FFCACFCAFFCACFA8FFCAFFCAFFCACFA8FFCA%FFCACFA77D7DA8A8FD04FF7D527D527DA8FD2EFFA8A87DA8A8FFCFFFCFFF%A8FFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFA8FFCFFFCAFFCFFFCAFFCAFFCFFFFFFF%A7A77DA8A8FF7D52527DA8FD2CFFA8A176A1A8FFCAFFCACFA8CFA8CFA8FF%CACFA8FFA8CAA8FFCACFA8FFCACFA8CFCACFA8FFCACFA8CFA8CFA8FFCACF%A8FFCACAA8FFCACFA8FFCACFA8CFCACFA8FFCACFA8CFA8CFA8FFCAFFCACF%A17D7CA8A8FFA8FD2BFFA87DA7A8FFCFFFCAFFCFFFA8FFCAFFCAFFCAFFCA%FFCACFCAFFCAFFCAFFCFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCFFFCAFFCA%FFCAFFCAFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCF%CFA7A87DFD2AFFA87D7DCFCFFFCAFFCAFFCAFFA8CFCAFFCAFFCAFFCAFFA8%FFCAFFCAFFCAFFCAFFCACFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA%FFA8FFCAFFCAFFCAFFCAFFCACFCAFFCAFFCAFFCAFFCAFFA8CFCAFFCAFFCA%FFCAA87CA8A8FD25FFA87DA8CFFFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFF%CAFFCAFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFA8FFCFFFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCAFFCAFF%CAFFCFFFCAFFCFFFA8A77DFD22FFA87D7DCFCAFFCACFCAFFCACFA8CFCACF%CAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFF%CACFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACACAFFCACF%CAFFCACFCAFFA8CACAFFCACFCAFFCAFFCAA87D7DA8FD1EFF7DA7CAFFCFFF%CFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFF%CAFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFFFFF%A77DA8FD1BFFA87CA8CFFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCA%FFCACFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FFCA%CFCAFFCACFCAFFCAFFA8FFCACFCAFFCACFCAFFCAFFA8FFCACFCAFFCACFCA%FFCAFFCACFCAFFCAFFCACFCAFFCAFFCAA17DFD19FFA87DFFFFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCFCA7DFD16FFA87DA1FFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFF%CACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACF%CAFFA8CFCAFFCACFCAFFCACFCAFFCACACAFFCACFCAFFCACFCAFFCACFA8FF%CACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCACF7CA8FD13FFA8%A1A8FFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCF%FFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFF7DA8FFFF7D7D7DA852FD0AFFA8%7DA8FFCACFCAFFCACFCAFFCAFFA8CFCACFCAFFCACFCAFFCACFCAFFA8CFCA%FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCA%CFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCACFCAFFCAFFCACFCA%FFCACFCAFFCACACAFFCACFCAFFCACFCAFFCAFF7D7DFFA827527DA8FD09FF%A8A1CFFFCAFFCFFFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFF7DA8A8A87DA8FD09%FFA87DA8FFA8CFA8CFA8CFA8CFCACFA8CAA8CFA8CFA8CFA8CFA8CFA8CFA8%CAA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CAA8%CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8%CFA8CFA8CFA8CFA8CFA8CFA8CAA8CFA8CFA8CFA8CFA8CFA8FF7DA8FD0CFF%7DA8FFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCA%FFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCF%FFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFF7DA8FD0AFF%A8A7FFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCA%CFCAFFCACFCAFFCACFCAFFCACFCACFCAFFCAFFCACFCAFFCACFCAFFCACFA8%FFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFCACFCAFFCA%CFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFF7CFD09%FFA87DFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFF%A8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCFCF%7DFD08FF7DCFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCACF%CAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF%CACFCAFFA8CFCAFFCACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACF%CAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFF%CACFCFA17DFD06FFA8A8CFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFFFCFFFCFFFCF7DFD06FFA1CAFFCAFFCACFCAFFCACFCAFFCAFFA8FF%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACF%CAFFCACFCAFFCACFCAFFCACFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFF%CACFCAFFCACFCAFFCACFCAFFCAFFA8FFCACFCAFFCACFCAFFCACFCAFFCACF%CAFFCACFCAFFCACFCAFFCACFCAFF7DA8FD04FFA97DFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCFCF7DFD04FF7DA8CAFF%CACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFCACFCACFCACF%CAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCACFA8FF%CACFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCACF%CAFFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFCACFCA7D%A8FFFFFFA8CAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCF%FFCFFFCFFFCFFFA7FFA8FFA87CFFCAFFCACFCAFFCACFCAFFCACFCAFFCACF%CAFFCACFCAFFCACFCAFFCAFFCACFCACFCAFFCACFCAFFCACFCAFFCAFFA8FF%CACFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFCACF%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF%CACFCAFFCACFCAFFCACFCAFFCACFCACA7D7D527DA1FFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFA8A87D7DFF7DFF%CACFA8FFCACFA8FFCACFA8FFCACAA8FFCACFA8FFCACFA8FFCACFA8FFCACA%CAFFCACFA8FFCACFA8FFCACFA8FFA8CFCAFFCACFA8FFCACFA8FFCACFA8FF%A8CFA8FFCACFA8FFCACFA8FFCACFCACFCACFA8FFCACFA8FFCACFA8FFCACF%A8CFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FF%CACA7DFFA8FFA8CFFFCAFFCAFFCAFFCFFFCAFFCACF7DA8A8CFCAFFCFFFCA%FFCAFFCAFFCFA87DFFCAFFCAFFCAFFCAFFCFFFCAFFFFA8A7CACFFFCAFFCF%FFCAFFCAFFCAFFA8A7CFFFCFFFCAFFCAFFCAFFCAFFCAFF7DA8CAFFCAFFCA%FFCFFFCAFFCFFFCAA8A1CFCAFFCFFFCAFFCAFFCAFFCFCFA8A7A8A8A8FFCA%FFCAFFCFFFCAFFCAFFA8A8FFFFFF7DFFCAFFCAFFCAFFCAFFCAFFA8A87DA7%52767DFFCAFFCAFFCAFFCAFFCAA8517652A7CFFFCAFFCAFFCAFFCAFFA8A8%517652FFCAFFCAFFCAFFCAFFCAFFCFA152CFCAFFCAFFCAFFCAFFCAFFCAFF%525252A8CFFFCAFFCAFFCAFFCAFFCFA7277C52CACAFFCAFFCAFFCAFFCAFF%7DA7527C52A8CAFFCAFFCAFFCAFFCAFFCFCA7DFFFFFF7DFFFFCFFFCAFFCF%FFCAFFCFA87D7DA7527C7DCFFFCAFFCFFFCAFFCFFF7D52527C7DFFCFFFCA%FFCFFFCAFFCFCA7C527D7CCAFFCFFFCAFFCFFFCAFFCFFF7D52CAFFCAFFCF%FFCAFFCFFFCAFFCA76527D7DFFCAFFCFFFCAFFCFFFCAFFA852527CCAFFCA%FFCFFFCAFFCFFFCFA87D7D527D7DFFCAFFCFFFCAFFCFFFCAFFA8A8FFFFFF%7DCFCAFFCACFCAFFCACFCAFFCFCFA1A8A7A8A8FFCACFCAFFCACFCAFFCAFF%A7CFA7CFCAFFCACFCAFFCACFCAFFCAFFA8A8A8FFCAFFCACFCAFFCACFCAFF%CACFA1FFCACFCAFFCACFCAFFCACFCAFFCAA8A1CFCACFCAFFCACFCAFFCACF%CACFA8CAA7FFCACFCAFFCACFCAFFCAFFA7A8A7CAA7CFCACFCAFFCACFCAFF%CACFCAA8A8FFFFFFA8A8FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFCFFFCFFFCFFF7DFD04FFA8A7CFFFCACFCAFFCACFCAFFCACFCA%FFA8FFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCACFCAFFCA%FFA8FFCACFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCA%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFCA%CFCAFFA8FFCAFFCACFCAFFCACFCAFFCAFFA87DFD05FF7DFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFFFA87DFD05FFA8A1%FFCAFFCACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCAFFCACFA8%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFA8%CFCAFFCACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCAFFCACFA8%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFF76%FD07FFA1CFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFF%CFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFF%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFF%CFFFCAFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFF%CFFF7DA8FD07FFA8A7CFFFCACFCAFFCACFCAFFCACFCACFCAFFCAFFCACFCA%FFCACFCAFFCAFFA8FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA%CFCAFFCACFCAFFA8FFCAFFCACFCAFFCACFCAFFCAFFA8FFCACFCAFFCACFCA%FFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCA%CFCAFFCAFFA87DFD09FF7DCACFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFFF7DA8FD0AFF7DCFCAFFCACFCAFFCACFCAFFCAFFA8CFCACF%CAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFF%CACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACF%CAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCAFFCACACAFFCACFCAFF%CACFCAFFCACFCFA17DFD0CFF7DFFCFFFCAFFCAFFCAFFCAFFCAFFA8FFCAFF%CAFFCAFFCFFFCAFFCAFFA8FFCAFFCAFFCFFFCAFFCAFFCAFFCAFFCAFFCFFF%CAFFCAFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCACFCAFFCAFFCAFF%CFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCFCFCAFFCAFFCAFFCFFF%CAFFCAFFCFA87DFF7DA87DA87DFD07FFA87CFFCACFCAFFCACFCAFFCACFCA%FFA8CFCAFFCACFCAFFCACFCAFFCAFFA8FFCACFCAFFCACFCAFFCACFCAFFA8%CFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFA8CFCA%FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCA%CFCAFFCACFCAFFCFA87DFFA87D277D7DA8FD08FFA87DFFCFFFCAFFCFFFCA%FFCFFFCAFFCAFFCAFFCFFFCACFC9C9C9CFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFA8FFCF%FFCAFFCFFFCAFFCFFFCFA87DFFFFFF7DA87DFD0BFFA876CFCFCFCAFFCACF%CAFFCACFCACFA8CFCAFFCACFC9C2BBBBBBC2C9CACAFFCACFCAFFCACFCAFF%CACFA8FFCACFCAFFCACFCAFFCACFCAFFA8CFCAFFCACFCAFFCACFCAFFCACF%A8FFCACFCAFFCACFCAFFCACFA8CFCACFCAFFCACFCAFFCACFCAFFA8CFCAFF%CACFCAFFCACFCAFFCFA17DFD14FF7DCACFFFCFFFCFFFCFFFCFFFCFFFCAFF%CFFFCAC9BBB58D8D8DBBC2C9CAFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFF%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFF%CFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCFA1%7DFD16FF7DA7CAFFCACFCAFFCACFCAFFCACFA8FFCACFC9C2B58D446969B5%99C2C9CFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCACFCAFFA8FFCAFF%CACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACF%CAFFCACFA8FFCACFCAFFCACFCAFFCAFFA87DA8FD18FFA87DA8FFCFFFCAFF%CFFFCAFFCFFFCAFFCFCFC9C8B5B5696A8DB699C8C9FFCAFFCFFFCAFFCFFF%CAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF%CFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFF%CFFFA17DA8FD1AFFA87D7DCFCFCFCAFFCACFCAFFCACFA8FFCACFC9C2BBB5%8D8E8DB599C9C9CFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FF%CACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACF%CAFFCACFA8FFCACFCAFFCACFCAFFCFA87CA8FD1EFFAF7DA8CFFFCFFFCFFF%CFFFCFFFCAFFCFFFCAC9C2C2BBBBB5C2C2C9CAFFCFFFCFFFCFFFCFFFCFFF%CFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFF%CFFFCAFFCFFFCFFFCFFFCFFFCFFFCAFFCFFFCFFFCFFFCFFFCAA17DFD22FF%A8A1A1FFCFFFCAFFCACFCAFFA8CFCAFFCACAC8C9C2C2BBC3C9CACAFFCACF%CAFFCAFFA8FFCACFCAFFCACFCAFFCACFA8FFCACFCAFFCACFCAFFCACFCAFF%CACFCAFFCACFCAFFA8CFCAFFCACFCAFFCAFFCACFA8CFCAFFCACFCAFFCFCA%7DA7A8FD25FFA87DA8CFFFCFFFCFFFCFFFCAFFCAFFCFFFCACFC9C9C9CACA%CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCF%FFCAFFCAFFCFFFCAFFCFFFA8FFCFFFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCF%FFA8A77DA8FD29FF7DA17DCACAFFCACFA8FFA8CAA8CFA8CFA8CAA7CAA7CA%A7CAA8CFA8CFA8CFA8CAA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CFA8CF%A8CFA8CFA8CFA8CFA8CFA8CAA8CFA8CFA8CFA8CFA8CFA8CFA8CFCAFFA8A8%7DA7A8FD2DFFA87DA8A8FFCFFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFA8FFCF%FFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCFFFCFFFCAFFCFFFCAFFCFFFCA%FFCFFFCFFFCAFFCFFFCFFFCAFFCFFFCAFFCFFFCFFFCFCAA1A8A8A87DA8A8%7DA8FD2CFFA8A87DA7A7CFCFFFCAFFCACFA8FFCAFFCAFFCACFA8FFCAFFCA%FFCAFFCACFCAFFCAFFCACFCAFFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCA%CFA8FFCACFCAFFCACFA8CFCAFFCAFFCFCA7DA87DA8FFFF5252527D7DFD30%FFA8A87DA7A8CFCFFFCFFFA8FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFFFCA%FFCAFFCFFFCACAA1A17DA8FD05FFA87DA8A8FD34FFA8A87DA77DA8A8CFCA%FFA8CFA8FFCACFA8CFA8CFCAFFCACFA8CFCACFCAFFCACFA8FFCACFCAFFCA%CAA8FFCACFCACFA8CFCAFFCACFA8CFCAFFCACFA8A77DA17DA8A8FD44FFA8%A87DA8A8CFA8FFCFFFCFFFCFFFCAFFCFFFCFFFCAFFCFFFCFFFCAFFCFFFCF%FFCFFFCAFFCFFFCAFFCFFFCFFFCFFFCACFA8CA7DA7A1A8A8FD4CFFA8FF7D%A87DA87DA8A1CAA8CAA8FFCACFCAFFCACFCAFFCFCFA8FFCFFFCAFFCFFFCA%FFCACFA8CAA7A8A1A87DA17DA8A8FFA8FD54FFA8FFA8A87DA8A1A17DA87D%A77DA8A7A8A8CFA8CAA8CAA8A8A1A87DA77DA87DA77DA87DA8A8FD62FFA8%FFA8FFA8AFFD04A87DA87DA87DFD04A8FFA8FFA8FFA9FD34FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2018-10-22T21:02:02-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq0&#xA;yIxUsoJQ1UkdDQio+g4q1LNFDE8szrHFGCzyOQqqo3JJOwGKpHJ568rgxi3u21AScaPpsE+oIOXT&#xA;m9pHOqdf2iNt8BISAVsvmfUGQfVtEueT/wB293LbW8R/1qSSyr/yKyPiBlwFSl1PzhOnG3trGzb/&#xA;AH87zXY6f77KWP8AxPB4ifDUQ3nSSL0rjVrJJgd5LKydWHgKTXFwo28cHiJ8NDyaF5llRvU816jG&#xA;h3I9DSiBTfcNZN+vB4pT4YVodI1t40SbzHqMyLuZGWziZj/zwtoiB8/u74PEK+GFf9D3IdU/S9/u&#xA;rE/vVrsR/ke+PiFPhhTfSNYj5ehr+oRow3p9VlZT4j1reX8KfTj4hR4YQ6aL5n4Bl83ajKD4w6Wv&#xA;0bWWHxCvhhWUecbdGji1i3lZvsPqFlyYfyittLbI3v8Aww+Ijw1WDUPO1uKXMWn352+OP17ID/Y/&#xA;7kCfww+Ijw1SLzPq6KwutCmkkWprYXFvOnGv/Lw9nJX29PD4gRwFVj88eXfV9K6kn09hTk9/bXFp&#xA;CGpXiLiaNIGPb4XPtkhIMSCnFlfWV9bR3VlcR3VrKKxTwuskbDxVlJBwoVsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdiqhfahYafbm5v7mK0tlIVpp3WNAWNFBZyBudhiqRr5wkvgw0PTLi84twNzeJJ&#xA;p9tXYmjTx+tIvE1V4oXQ/wA2QMwGYgSpG081Xjlr7WBaRVPG20yBI/gYU4SzXH1h3I7PGsRyBylm&#xA;MakPKvloTwzTWI1K8tv957m+Z76eKgp8E100rp17MMgZEsxEBOAsrfbbj/kp/wA1H+zIpdxhhBag&#xA;BPU9WJ/WcVdxkk+38CfyA7n5kfwxVeqqqhVAVR0A2GKrB+9ev+60Ow8WHf6MKqmBVh/v02/Zbf6V&#xA;xVfiqm9Y29Rfsn+8H/G30YVVCARQ7g4FU/TZN4un++z0+g9v1Yq791MKMoJXqp6g4q4xyKP3b/JX&#xA;3H39cVSm48teXJ71r6bTorfUm66lAPq9yeuwuoTHLQ16chXJAkckEAtjSvMVktNJ1yRkUcUtdUiF&#xA;7Eq1rtIpt7ot/lSTP8skMpYHGFX/ABVqlitdb0aVI+XH61pZfUYwp2UtEkcd0CT1CQuF7tTfLBkB&#xA;YGBDGPMnmLzvqmsibyLcR6ho6afcIfqzWrcNR9GcgXHrVZHidYFSI8as55/CrZNgybybaeaxGb7X&#xA;NQmkSVXjg024it0kREuJPRmleAAerJb+nzUAKGr9CrJsVdirsVdirsVdirsVdiqE1TVtM0q0a81G&#xA;5jtbZSF9SQ05OxoqKOrOx2VV3J2AriqSvq3mDVkpp0J0izYsDe3kYa6ZdxyhtieMddmVptx0aLK5&#xA;ZO5sjj72rLy1p0EqXV0X1PUkH/HRviJpqn7RTZY4Q1d1hRF9sqMiW0RATB47ZBVkWh2+yCT9AG+B&#xA;KwWyvQuioo6IAK/SR/DG1pUW3t16RoKeCjBa008cCr/dKa7BQBufDCrSW0deciK0nyFF9hja0v8A&#xA;Qg3/AHa79dhgtaU5ooqBFjXk5op4jbuWwqvW3gUACNdhQbDpgtab9CDp6a0PXYY2tLDDF66fAv2W&#xA;7DxXDar/AEIKU9NaeFBgtad6EPX01r8hja0pRQQoWhMa0G67DdT/AE6YbWlX0INv3a7dNhgtaWvb&#xA;QtuqqrjowA/HxGG1pqOOFgVaJQy/aWgp8x7HFV5ggPWNT9AwWtKZtUXeJFp3jYCh+R7fqw2tLkS3&#xA;cU9NQV6qVFRiqCv/AC7pF7KJ3hMF6o4pfWzNb3KgV2E0RR+O/wBknie4xEiEGIKjFd+atHQCWvmK&#xA;yQbyARQaiKVO6qIrWepp09Kg/nOWxyd7WcfcnWka7pWrxSPYTiRoW4XMDBo5oXIqEmhkCyRMRvR1&#xA;Bpv0y1qR+KuxV2KuxV2KuxVI9W8xSJdvpWkRC71dVDSlqi2tQ4qr3DjuRusS/G3+SvxiMpAMoxJQ&#xA;thoEcV2uo6jO2p6uOXG9mAAhEn2ktoh8ECUAHw/EwA5s53yiUiW6MQE1yLJa7hB4sfsqOpOKtJGQ&#xA;ebmrn7gPAYqvxVxIAJJoBuTiqnGpZvVYUalFHgP6nFVTFXYqpr8UrN2T4R8+p/hiqpirsVWH+/T/&#xA;AFW2+lcVX4q7FVOX4Skn8pofk2366YqqYq7FVkiE0df7xenuPA4quRg6hh0OKt4qskj5UIPFx9lh&#xA;/nuMVdHJyqrDjIOq/wAR7YqvxVLdV0Gzv5UuleSz1OFeNtqdqQlxGteXHkQyvGTuY5FZD3U4RIhB&#xA;iC1Y+ZLyxuIdO8yCOKadxFZ6rCCtpcMxokbhixt5mOwRmKttwYseC3xmC0SgQyTJsXYq7FXYqx3W&#xA;tXubu8l0TSpjbyxgfpHUlAJt1daiOLkGU3DKQRUEIKMwNVVoSlTOMbVdPtdO0+1FtaII4lLM3Usz&#xA;sSzu7GrO7tVmZiSTucoNt4RPrRePX2OCltp7iFASzUAFehxpbWRyJ/eufjPan2Qd6f1wqqetH4/g&#xA;cFK71ot9+nXY40tqUk0busdfh6vsenYfScNKq+tHWld/kcFK714v5unscaW3GaIdW/XjS2sglj9M&#xA;VPxH4iN9i2+EqF/rRePt0OClt3rR1pXf5HGlWGaP1l324tXr4rhpV/rxUry2+RwUtu9aPx/A40q1&#xA;5InRl5bEEHY4VdHcRtGrE0JAqPA+GNLa71o/H8DgpXevFSvLb5HGltSE0cc3GvwS1I67MOv3jfDS&#xA;qvrR+P4HBSu9aLx6+xxpbWSOjfZbjIu6mh/H2wq3HdROnKtOzDfY+GNLa71o/H8DgpVG8isL21mt&#xA;LyJLi1nQxzwSoHR0bYqysCCDhVjt1c3ulWcuhXcv13SdSX6ppN/dSsskVxOSsdrdSmKf4DULDMyN&#xA;U0RwzFS98JW0TjSU6F+VPmAP9U1/VJJ9Mey+ryyWt7dJckq1s0UOyRIFie3d/VXiW9Rl4Ku2TYPU&#xA;sVSbzNq1xaQw2FgwGr6kzQ2RIDCIKKy3LoeqQrv4FiqVHIYJGgmIsrdL0y10yxjs7YH00LOzueTy&#xA;SSMXklkb9p5HYu7dyScxibckCkVgV2KqbAPKFO6x0Y+HLt93X7sVVMVdirsVU4fiDSfzkkfIbD8N&#xA;8SqpirsVWT19JgNi3wg+7bfxxClfirsVdiqw/wB+m/7LbfSuKr8VdirsVWQ1AdSakM2/+seX8cVX&#xA;4q7FVkwJjJUVZfiUe43xCrlIZQw6EVGKt4q7FVNvglDfsv8AC3z7H+H3YqqYq7FVG8s7W9tJrO7i&#xA;Se1uUaKeCQBkeNxxZWB6gg4qg/LGo3cN3ceXdRlaa7skWaxu5DVrqyY8VZmP2pYWHpy0r+w5p6lM&#xA;yYSsOPKNFkeSYsY06Q6jrOo6q28MMj6dp9RSkdu3G4ah6F7lWU+KomUZDu3Yxsm2VtjsVdiqnBX0&#xA;wx6v8X39B9A2xKhUxV2KrZWKxMV+0AePz7Yq2qhVCjoBQfRireKuxVZLQ8FP7TCn+x+L+GKr8Vdi&#xA;rsVWH+/T/Vb9a4qvxV2KuxVYlBLIO5ox+kU/41xVfirsVdiqyHZOPTiSoHsDt+GJVfirsVWyIXRl&#xA;BoSNj4HscVbRuSK3TkAafPFW8VdiqQebv9CgtfMaNwfQZfrVw1aBrFhwvUem7BYCZVXvJGnhk8Zo&#xA;sZiwzDMhx2K+TFnHlLR3uCGuprSGe7cGoaeZBJM9f8qR2OYsubkx5JzgS7FVk5pDIelFO/0YhSvA&#xA;AAA2A2GKuxV2KrJvsDenxL/xIYhV+KuxV2KrJPtx/wCt/wAanFV+KuxV2KrDX1l8OLfrXFV+KuxV&#xA;2KrB/fN4cV3+lsVX4q7FXYqsj+3Lv+108PhGKr8VdirsVWQ04bdAzD7mOJUL8Vdiqnc28Nzby206&#xA;CSCZGjljPRkcUYH5g4qwXS9M/MTWBpvPU7qy0270e0MmowPAVWQwxOwWNv33rtMHJenH0zStemW4&#xA;rI/J6I/lXSPUhCTR2kMU8ZAJSWJAkqHYbo6lTt2zGlzcmPJOPQh6+mtT12GRtNO9CClPTWnhQUxt&#xA;aYZ5ot/MNzeSWptJl024sdSglWyMMsZDRj6tIzSxwyJO3xAIOSAkbnrkgWJQXkmHz8NZtjrySy2M&#xA;ljKlyJkt40jlWcmCSsTH1HlhIDLxHCm5JOEkKLegehBt+7XbpsMhbKnehD19Na/IY2tMG892nnef&#xA;VNIh0a0gOlLfWzXIV1+JI7m2laW4Dw/AsaxygJG5L1DVHHg0oliQmf5fx+Zm0QnzPE4vxIvA3C2w&#xA;lp6EXq8vqo9Lj9Z9UJT9jjiSkMm9CDf92u/XYZG0070INv3a7dNhja08+872f5g3Wr2P6PtobTTY&#xA;ProS5tHW5uBLLZXMVvO0M0duKxMUb01cgs1OVBXJghiQWV+VIdQPl2y/TEHp6jwIuFk4MxIY8Wbj&#xA;UAstDxqadKnIkpATb0IevprUdNhgtNO9CD/fa79dhja0xLUrLzGfzH0qe3iY6DHatFMyrB6QEizt&#xA;cc+X73l6sdnw47U5++SvZjW7LfQgpT01p4UGRtlTvQh6+mtfkMbWnehBv+7XfrsMbWnlmmWP5mr5&#xA;nS91K3+KS/VJ7W3MLW36PIiZf3p9NlFsZZ+PwFpTUHj8JydimFG3qfoQ9fTWvyGQtnTvQgpT01p4&#xA;UGNrSG1OCU6ddfUgkd76Mn1WQoH4ylTwPE05Uam3fDa0848kWn5mJrtq+s28kdlcyPLqXP6nIrKI&#xA;7iIGVkSJ/VpHZcBGgHHnyHLlkiQwAL1D0INv3a7dNhkLZ070Ia19Na+NBja0kXmoalCmmNpcE8lL&#xA;6H63FbJAwa2r+99T1RUKBv8AAQa4QgsK0Gx/MCDVLPlHdvpq6vdsYJo7RPUs7kwSerLJGwKelL9Y&#xA;YJxJflQcRxyRIYgF6l6EH++1367DIWzp3oQbfu126bDG1pZP9Tt4ZLiYJHFEheSRgKKiipJ9gMVd&#xA;5Pini8paJFcRmKeOwtVmibqriFQynYbg7ZluKgNOQ2Gr6lpbk8JJG1CxLU+KO5blMoO1SlwXJ8Fd&#xA;PHKMg3b8Z2TXK2bsVdiqnBURBT1T4T78dgfpG+JUKmKuxVbKrNEwX7RB4/PtirasGUMOhFRireKu&#xA;xVZKaBG8GH/DfD/HFV+KuxV2KrD/AH6bfstv9K4qvxV2KuxVYhrLIfCi/cK/8bYqvxV2KuxVZDUp&#xA;U/tEkfInb8MSoX4q7FVsjcI2YCpA2HiewxVuNeKKtalQBXxpireKuxVIfN6i9s4PLyEGXX5RZyqR&#xA;X/Q6c75tq8f9GV0VugkZPHJwFljM0GX5kOOk/mPS7i4jg1CwQNq2nFntVJC+rG9PWtmY9FlVRTsH&#xA;Csfs5GQsMomit07ULXULOO7tmJikrswKujKeLo6ndXRgVZTuCKHMYhyAUTirsVUyfTl5H7ElAfZu&#xA;339MKqmBXYq7FVOHZSh/YNB8uo/DEqqYq7FVk+0TMNyvxAf6u/8ADEKV+KuxV2KrD/fL4cW2+lcV&#xA;X4q7FXYqsiqQ7Hux/D4f4YqvxV2KrJWKxnjsx2U+52GKrlUKoUdAKD6MVbxV2KqbfHKFH2U+J/c9&#xA;h/HFVTFXYqpXV1bWlrNdXUqQWtujSzzyMERI0BZnZjQBVAqScVQHlfT7m6v7jzNqEbwz3cYt9LtJ&#xA;KhrexVudWUn4Zbl/3knQ8RGjDkmZMI0HHnKyyXJMXYqxnWNIutPvpdb0mGS4Wb4tV0yNyDLxWgng&#xA;UsE9ZQKMu3Md+QFYTjbOMqRVhdWGoWiXdnMZreWvF1d+oJDKQSCrKwIZTuDsd8oLeER6Kbbtt/lt&#xA;/XBatNBGwIbkQRT7Tf1xtaWRxr/duzFwOvJtx49fvwqvdEVeRLbf5Tf1yJlQSBaQaj5t0ewnMVxI&#xA;yEdeUlP1tmDPXxjKqdlg7Ky5I3HdE6drukahxmtZ+Sn4XAkqdjsdmPSv45fh1cMmw5uPqNDkwn1B&#xA;NxEh3Bb/AINv65kW4lO9FPFt/wDLb+uNq4woepb/AIJv642qyGJfTFSxYfCTybcrtXrhKr/RTxb/&#xA;AINv64LV3opWtW/4Jv64qsMKeun2q8W35N4r74bVf6KUpVv+Db+uC1d6KeLf8E39cVaeNFRmq1AC&#xA;T8bf1wq1FbqsaKWYlQKnkwqe5642tLvRTxb/AIJv64Fd6KUpVv8Ag2/rjaqfpK81atxi/wApt2I+&#xA;fYYVVPRTxb/gm/rgV3optu23+W39cbVZIqqPh5GRtkXm1K++/TCrcdsiJxqxPVm5NUnx642tLvRT&#xA;xb/gm/rgVTuGtbeCSe4l9GCJS8sskhVFVRUszEgADxwqk+n2MvmW4gv7lJIfLtu6zWNrL6iSXkiH&#xA;kk8yMQVhU0aONhVjRmoAAboQrm0znaUeZvJ3nnUddlvbS7jW0NpHDdW8d5dWSXciXdvN8Kxeq1uf&#xA;RhkiLc2rXsHeljWyzyr5eudHsv8ATb+41DUbiOD69NNIzoZooVjdolanFXZS3jv4AAKp3irsVSLU&#xA;vLkovX1XRZVtNRkp9ahfkbW6CggCVB9iShoJkHLpyDqoXIyiCyjKlHT9bjnnFleQvp+qhSzWE5Xk&#xA;wHV4XUlJk3HxIdqjkFO2USiQ3xkCmWRStkjDAEHiw+yw6jFVnLmrRP8AC9OnYjxGCQsJBovKPzU8&#xA;g3WpW089vIVcEMoB2PX2981NHT5eOrD2PYnakYjw5bX1eH6bN5p8q6qGZ3KRsQSS24PZqEZsaxai&#xA;Ox3+0PRDFKUeGf7zGXvn5dfmHJqUUa3FfiADciahunUnocwBklhycJNh5btfsgY/p94937Ov7Xp0&#xA;ciuoZTsc2kZWHliKXYWKmg4yuvZ/jHz6H+GKqmKuxVYa+svhxb9a4qvxV2Kqc3xFI/5jU/Jd/wCg&#xA;xVUxV2KrJXIoi/3j14+1OpPsMVXIgRQo7d/E9zireKrXkC7Ddz9lfHFWo4yCWc8nPU9gPAYqvxVA&#xA;anrdnp7RQsHuL64qLSwtwHuJSOvFagBR+07kIv7TDCIkoJAUrby3dapNDfeYwjJEyy2mioedvFIp&#xA;qkk7bC4lU0K1HBG3UFlD5fGFNMp2yXJsHYq7FXYq7FXYqhdS0vT9Ttxb30KzRqwkStQyOv2XjdSG&#xA;R1rsykEYqk0mn+YdL/3jf9MWK/8AHvOyx3qCvRJjxjmoNgJOJ7mRsqlj7myOTvdZ+YNMuZ/qjSG1&#xA;v6EmxulME9B1Ko9Oaj+dKr75UYkNokCjXkt3FDIu29QwBH0jFKm80VOMzqyHZXBH/DD+n4YJRtIl&#xA;SR6v5T0TUqs3pcmHUBCTmBm0AluNnZ6btXJi5H7Uhg8g2FlctLbSqm9TQLxPftTMQ6GYPO3YZO2j&#xA;ljUmXaZMsCLDIwDAePUe2bHDExFOjzSEjaZCeD/fi7ddxmS46nLLFRXV15Iagchv2I/z74VXrcQM&#xA;ARIpBFRuOmCltv14OvqLQddxjS2sMsXrKfUX7Ldx4rhVf68FK+otPGowUtu9eHp6i1+YxpbU4p4W&#xA;LSmRadE+IbKO/wBP9MNLap68G37xd+m4wUtrXuoV2DqzHYKCMNLbUckIBdpULN9o1FPkPYYqv9eE&#xA;f7sX7xgpbU2ukbaJ0PjIT8I+XjhpbbR7dN/VDM3V2YVP+ftiqF1DzBo9hJHDcXK/WZv7i0jBluJP&#xA;+McMYaR6d+K7YiJKCQFCGPzTqxqsf6B089JJfTmv3Ff2Yhzgg8QXMh8UU5aMXe1nJ3Jvo/l/StIW&#xA;X6nEfXuKG6u5Xaa4mK14mWaQs78eR4gmijZaDLQGolMcVdirsVdirsVdirsVdirsVQ2oaXpupQC3&#xA;1C1iu4QwdY5kVwHAIDLyBowrsRviqUnyze2pY6Tqs0SH7NrfA30I8SGdkua/OYqP5cgcYLMTIUPr&#xA;/mC1YLqOjO6ceT3WnSrcxKBQHlHIILivgI4n+eVnGWYyB0Gu6HPOkEd4tteyH4bOcG3nYnxt5hHJ&#xA;v/q5EghmCCmPOQf3iVp0ZN/w6/ryKWisEy0FDTw2Kn9YONLbYZ49nBZezgfrA/hiq9WVgGUgg9CN&#xA;xiqmP3T8f91uag+DHt9PbCqrgVYf79Nv2W3+lcVX4qpSH1GMS9P92Edh/L8zhVV2A8AMCqfqs+0Q&#xA;r/xYfs/R44VcBHECzsAT9p2NK4Fd6jt/doT7t8I/Hf8ADFUuvtd0Kxm+rX+oQ/W2pwsgwaZ+XQJb&#xA;rylcnsADhAPRBI6tDVtXumRdL0W4kR+l1fEWMAp1DJIGugfD/R6e4yYxlicgVU8va1eKp1bVWhQ0&#xA;L2emL6CkVqUedzJO1OnOMxH2yYxhrOQpD5r8ga0y2Y8ozW+mot5Hc6go5wy3PCKRA13cfvpLoK7K&#xA;3BuJP89QMsYIjyb5J16ynW717U7iae0uZJbaKK8mmhmEsCxPJOJVUjmwLrEvwoehNTirOMVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVUbuzs723a2vII7m3enOGZFkRqGoqrAg74qlJ8l6As3q2sc1g1KL&#xA;HZXNxbQA/wA31eJ1gJ26lMBiEiRU5fLmroQ1rrTyuK1F/bwTpSm3H6uLNxQ+LnI+GGXiFSax85wO&#xA;qxNYXsZ+1IzzWhX/AGBS+5f8GMj4bLxFN5PNEDj1dGE7N9qTT7mJgNq7i5+rV8OmDwyviLjqOugM&#xA;JPL948dNzzsjt32FwS30DB4ZT4gWJrs8QrJpeopEDTe3eRhTw9IyMfpH04+GU+IFT9PWpdX+rX4A&#xA;Ugg6fe1qSP8AinBwFeMKb6/LID6Gmai6D7VLWSNvoEwj/CuHwyviBtdT1viBB5evfTJNHL2Yr7lX&#xA;uI3FfcY+GUeIGhP5nnk4R6E8dNxJfXNusda+Fu1w3v8AZw+GUeIF62vnmeThJHp1lHtWdJ57o+49&#xA;L0bT/k7h8JfEVU8ua5I9bnWvRoAFNhaxxMTX9pro31dvCmS8MMfEKqfJejSukl693fuu7rc3U7Qy&#xA;H/LtVdLZvl6VMIiAxMimenaTpWmQtBptlBYwsxdoraJIlLHqxVAor75JCKxV2KuxV2KuxV2KuxV2&#xA;KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2018-10-22T21:02:03-04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-10-22T21:02:03-04:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>467.976562</stDim:w>
            <stDim:h>232.488770</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:0280117407206811B820DE1B527342D4</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0280117407206811B820DE1B527342D4</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:0280117407206811B820DE1B527342D4</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0280117407206811B820DE1B527342D4</stEvt:instanceID>
                  <stEvt:when>2018-10-22T21:02:03-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -221.456 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 221.456 li
448.069 221.456 li
448.069 0 li
cp
clp
[1 0 0 1 0 0 ]ct
435.378 112.236 mo
435.375 111.552 li
435.362 110.869 li
435.34 110.185 li
435.31 109.501 li
435.271 108.817 li
435.224 108.134 li
435.168 107.451 li
435.104 106.768 li
435.031 106.085 li
434.949 105.403 li
434.859 104.72 li
434.76 104.038 li
434.653 103.356 li
434.537 102.675 li
434.412 101.994 li
434.279 101.314 li
434.137 100.634 li
433.987 99.9541 li
433.828 99.2749 li
433.661 98.5962 li
433.485 97.918 li
433.3 97.2407 li
433.108 96.5635 li
432.907 95.8872 li
432.697 95.2114 li
432.478 94.5366 li
432.251 93.8623 li
432.016 93.1885 li
431.772 92.5156 li
431.52 91.8438 li
431.259 91.1724 li
430.99 90.502 li
430.712 89.8325 li
430.426 89.1641 li
430.131 88.4961 li
429.829 87.8291 li
429.518 87.1636 li
429.198 86.4985 li
428.87 85.835 li
428.534 85.1719 li
428.189 84.5103 li
427.836 83.8496 li
427.475 83.1899 li
427.106 82.5317 li
426.728 81.8745 li
426.342 81.2188 li
425.948 80.564 li
425.545 79.9102 li
425.134 79.2583 li
424.715 78.6074 li
424.289 77.9575 li
423.853 77.3096 li
423.41 76.6626 li
422.958 76.0171 li
422.499 75.373 li
422.031 74.7305 li
421.555 74.0894 li
421.071 73.4497 li
420.579 72.812 li
420.079 72.1753 li
419.571 71.5405 li
419.055 70.9072 li
418.532 70.2754 li
418 69.6455 li
417.459 69.0176 li
416.913 68.3906 li
416.357 67.7656 li
415.793 67.1426 li
415.222 66.5215 li
414.643 65.9019 li
414.057 65.2842 li
413.462 64.6685 li
412.86 64.0547 li
412.25 63.4424 li
411.632 62.8325 li
411.007 62.2246 li
410.375 61.6182 li
409.734 61.0142 li
409.085 60.4121 li
408.43 59.812 li
407.767 59.2139 li
407.096 58.6182 li
406.418 58.0239 li
405.733 57.4326 li
405.04 56.8428 li
404.338 56.2559 li
403.631 55.6709 li
402.916 55.0879 li
402.193 54.5073 li
401.463 53.9292 li
400.726 53.353 li
399.982 52.7793 li
399.231 52.208 li
398.472 51.6392 li
397.707 51.0728 li
396.933 50.5083 li
396.153 49.9468 li
395.366 49.3877 li
394.572 48.8311 li
393.771 48.2769 li
392.963 47.7251 li
392.148 47.1758 li
391.327 46.6294 li
390.498 46.0854 li
389.662 45.5439 li
388.82 45.0054 li
387.97 44.4692 li
387.115 43.936 li
386.252 43.4053 li
385.383 42.8774 li
384.507 42.3521 li
383.625 41.8296 li
382.736 41.3101 li
381.84 40.7935 li
380.939 40.2793 li
380.031 39.7681 li
379.116 39.2598 li
378.195 38.7544 li
377.267 38.252 li
376.333 37.7524 li
375.393 37.2559 li
374.447 36.7617 li
373.495 36.2715 li
372.536 35.7837 li
371.571 35.2988 li
370.6 34.8174 li
369.624 34.3389 li
368.64 33.8633 li
367.652 33.3911 li
366.657 32.9219 li
365.657 32.4556 li
364.65 31.9927 li
363.637 31.5327 li
362.62 31.0762 li
361.596 30.623 li
360.567 30.1729 li
359.532 29.7261 li
358.491 29.2822 li
357.445 28.8418 li
356.393 28.4048 li
355.335 27.9712 li
354.273 27.5405 li
353.205 27.1138 li
352.131 26.6899 li
351.052 26.2695 li
349.968 25.8525 li
348.879 25.4395 li
347.785 25.0293 li
346.685 24.6226 li
345.581 24.2192 li
344.471 23.8198 li
343.356 23.4238 li
342.237 23.0313 li
341.112 22.6421 li
339.983 22.2563 li
338.848 21.8745 li
337.709 21.4961 li
336.566 21.1211 li
335.417 20.75 li
334.264 20.3823 li
333.106 20.0181 li
331.944 19.6577 li
330.778 19.3013 li
329.606 18.9482 li
328.43 18.5986 li
327.25 18.2529 li
326.066 17.9111 li
324.877 17.5732 li
323.684 17.2388 li
322.488 16.9082 li
321.287 16.5811 li
320.081 16.2578 li
318.872 15.9385 li
317.659 15.623 li
316.441 15.3115 li
315.22 15.0039 li
313.995 14.6997 li
312.766 14.3994 li
311.534 14.1035 li
310.297 13.811 li
309.057 13.5225 li
307.814 13.2378 li
306.567 12.957 li
305.316 12.6802 li
304.062 12.4077 li
302.805 12.1387 li
301.544 11.874 li
300.28 11.6128 li
299.012 11.356 li
297.742 11.103 li
296.468 10.854 li
295.192 10.6089 li
293.912 10.3682 li
292.628 10.1313 li
291.343 9.89844 li
290.054 9.66943 li
288.762 9.44482 li
287.468 9.22412 li
286.171 9.00732 li
284.872 8.79492 li
283.569 8.58643 li
282.263 8.38232 li
280.956 8.18213 li
279.646 7.98584 li
278.333 7.79395 li
277.018 7.60596 li
275.701 7.42236 li
274.381 7.24268 li
273.06 7.06738 li
271.736 6.896 li
270.41 6.729 li
269.082 6.56592 li
267.751 6.40723 li
266.418 6.25293 li
265.084 6.10254 li
263.749 5.95605 li
262.411 5.81445 li
261.072 5.67676 li
259.73 5.54297 li
258.387 5.41357 li
257.042 5.28857 li
255.697 5.16797 li
254.349 5.05127 li
253 4.93848 li
251.65 4.83057 li
250.298 4.72656 li
248.945 4.62695 li
247.591 4.53174 li
246.236 4.44043 li
244.879 4.35352 li
243.522 4.271 li
242.163 4.19287 li
240.803 4.11865 li
239.443 4.04883 li
238.082 3.9834 li
236.719 3.92236 li
235.357 3.86523 li
233.994 3.81299 li
232.629 3.76465 li
231.264 3.72021 li
229.899 3.68066 li
228.534 3.64502 li
227.167 3.61377 li
225.8 3.58691 li
224.434 3.56445 li
223.067 3.54639 li
221.7 3.53223 li
220.332 3.52246 li
218.964 3.51709 li
217.597 3.51611 li
216.229 3.51953 li
214.862 3.52686 li
213.495 3.53857 li
212.127 3.55469 li
210.76 3.5752 li
209.394 3.6001 li
208.027 3.62891 li
206.661 3.66211 li
205.296 3.7002 li
203.931 3.7417 li
202.566 3.78809 li
201.203 3.83838 li
199.839 3.89355 li
198.477 3.95215 li
197.115 4.01563 li
195.754 4.0835 li
194.394 4.15527 li
193.035 4.23145 li
191.677 4.31201 li
190.32 4.39648 li
188.964 4.48535 li
187.609 4.5791 li
186.256 4.67627 li
184.903 4.77832 li
183.552 4.88428 li
182.203 4.99414 li
180.854 5.10889 li
179.507 5.22754 li
178.162 5.35059 li
176.818 5.47754 li
175.477 5.60938 li
174.136 5.74512 li
172.797 5.88477 li
171.46 6.02881 li
170.125 6.17725 li
168.792 6.32959 li
167.461 6.48633 li
166.132 6.64697 li
164.805 6.81201 li
163.479 6.98096 li
162.157 7.1543 li
160.836 7.33203 li
159.518 7.51367 li
158.201 7.69922 li
156.888 7.88916 li
155.576 8.0835 li
154.268 8.28174 li
152.961 8.48389 li
151.657 8.69043 li
150.356 8.90088 li
149.058 9.11523 li
147.762 9.33398 li
146.469 9.55664 li
145.179 9.78369 li
143.891 10.0142 li
142.607 10.249 li
141.326 10.4883 li
140.047 10.731 li
138.772 10.978 li
137.5 11.229 li
136.231 11.4839 li
134.965 11.7427 li
133.703 12.0059 li
132.443 12.2725 li
131.188 12.5435 li
129.936 12.8184 li
128.687 13.0972 li
127.441 13.3794 li
126.2 13.666 li
124.961 13.9565 li
123.727 14.251 li
122.497 14.5493 li
121.27 14.8511 li
120.046 15.1572 li
118.827 15.4668 li
117.612 15.7803 li
116.401 16.0977 li
115.193 16.4189 li
113.99 16.7441 li
112.791 17.0728 li
111.596 17.4053 li
110.405 17.7417 li
109.219 18.0815 li
108.037 18.4253 li
106.859 18.7729 li
105.685 19.124 li
104.516 19.479 li
103.352 19.8374 li
102.192 20.1997 li
101.036 20.5654 li
99.8853 20.9351 li
98.7393 21.3081 li
97.5981 21.6846 li
96.4614 22.0649 li
95.3296 22.4487 li
94.2026 22.8359 li
93.0806 23.2271 li
91.9634 23.6211 li
90.8511 24.019 li
89.7437 24.4204 li
88.6416 24.8252 li
87.5449 25.2339 li
86.4531 25.6455 li
85.3662 26.0605 li
84.2852 26.4795 li
83.209 26.9014 li
82.1382 27.3267 li
81.0728 27.7554 li
80.0127 28.1875 li
78.9585 28.623 li
77.9092 29.0615 li
76.8657 29.5039 li
75.8281 29.9487 li
74.7954 30.3975 li
73.769 30.8491 li
72.748 31.3042 li
71.7329 31.7622 li
70.7236 32.2236 li
69.7202 32.6885 li
68.7222 33.1558 li
67.7305 33.627 li
66.7446 34.1006 li
65.7646 34.5776 li
64.791 35.0576 li
63.8232 35.541 li
62.8613 36.0269 li
61.9058 36.5161 li
60.9565 37.0083 li
60.0137 37.5034 li
59.0767 38.002 li
58.146 38.5029 li
57.2217 39.0068 li
56.3037 39.5137 li
55.3921 40.0234 li
54.4868 40.5361 li
53.5884 41.0513 li
52.6963 41.5693 li
51.8105 42.0908 li
50.9312 42.6143 li
50.0591 43.1411 li
49.1929 43.6704 li
48.334 44.2021 li
47.4814 44.7368 li
46.6357 45.2744 li
45.7969 45.8145 li
44.9648 46.3569 li
44.1396 46.9023 li
43.3213 47.4502 li
42.5098 48.0005 li
41.7051 48.5537 li
40.9077 49.1089 li
40.1172 49.667 li
39.3335 50.2275 li
38.5571 50.79 li
37.7876 51.3555 li
37.0254 51.9233 li
36.2705 52.4932 li
35.5225 53.0659 li
34.7817 53.6406 li
34.0483 54.2178 li
33.3223 54.7974 li
32.603 55.3789 li
31.8916 55.9629 li
31.1875 56.5493 li
30.4907 57.1377 li
29.8013 57.728 li
29.1196 58.3208 li
28.4448 58.9155 li
27.7778 59.5127 li
27.1187 60.1118 li
26.4668 60.7129 li
25.8223 61.3159 li
25.1855 61.9209 li
24.5566 62.5283 li
23.9351 63.1372 li
23.3213 63.7485 li
22.7153 64.3613 li
22.1167 64.9761 li
21.5264 65.5928 li
20.9434 66.2114 li
20.3687 66.832 li
19.8013 67.4541 li
19.2417 68.0781 li
18.6904 68.7036 li
18.1465 69.3311 li
17.6108 69.9604 li
17.083 70.5913 li
16.563 71.2236 li
16.0513 71.8579 li
15.5474 72.4937 li
15.0513 73.1309 li
14.5635 73.7695 li
14.084 74.4097 li
13.6118 75.0518 li
13.1484 75.6948 li
12.6929 76.3398 li
12.2451 76.9858 li
11.8057 77.6333 li
11.3745 78.2822 li
10.9517 78.9326 li
10.5366 79.584 li
10.1304 80.2368 li
9.73193 80.8911 li
9.3418 81.5464 li
8.95996 82.2031 li
8.58594 82.8608 li
8.2207 83.5195 li
7.86377 84.1797 li
7.51514 84.8408 li
7.17432 85.5034 li
6.84229 86.1665 li
6.51855 86.8311 li
6.20313 87.4961 li
5.896 88.1626 li
5.59766 88.8301 li
5.30713 89.498 li
5.02539 90.167 li
4.75195 90.8374 li
4.4873 91.5078 li
4.23096 92.1797 li
3.98242 92.8521 li
3.74316 93.5254 li
3.51172 94.1992 li
3.28906 94.874 li
3.0752 95.5493 li
2.86963 96.2256 li
2.67236 96.9019 li
2.48389 97.5791 li
2.30371 98.2573 li
2.13184 98.9355 li
1.96924 99.6143 li
1.81445 100.294 li
1.66846 100.974 li
1.53125 101.654 li
1.40234 102.335 li
1.28223 103.016 li
1.17041 103.697 li
1.06738 104.379 li
.972656 105.062 li
.886719 105.744 li
.80957 106.427 li
.740723 107.109 li
.680664 107.792 li
.628906 108.476 li
.585938 109.159 li
.55127 109.843 li
.525879 110.526 li
.508301 111.21 li
.5 111.894 li
.5 112.578 li
.508301 113.262 li
.525879 113.945 li
.55127 114.629 li
.585938 115.313 li
.628906 115.996 li
.680664 116.68 li
.740723 117.362 li
.80957 118.046 li
.886719 118.729 li
.972656 119.41 li
1.06738 120.093 li
1.17041 120.774 li
1.28223 121.456 li
1.40234 122.138 li
1.53125 122.818 li
1.66846 123.498 li
1.81445 124.179 li
1.96924 124.857 li
2.13184 125.536 li
2.30371 126.215 li
2.48389 126.893 li
2.67236 127.57 li
2.86963 128.247 li
3.0752 128.923 li
3.28906 129.598 li
3.51172 130.272 li
3.74316 130.946 li
3.98242 131.62 li
4.23096 132.292 li
4.4873 132.964 li
4.75195 133.635 li
5.02539 134.305 li
5.30713 134.974 li
5.59766 135.643 li
5.896 136.31 li
6.20313 136.976 li
6.51855 137.642 li
6.84229 138.306 li
7.17432 138.969 li
7.51514 139.631 li
7.86377 140.292 li
8.2207 140.952 li
8.58594 141.611 li
8.95996 142.269 li
9.3418 142.926 li
9.73193 143.581 li
10.1304 144.235 li
10.5366 144.888 li
10.9517 145.54 li
11.3745 146.189 li
11.8057 146.839 li
12.2451 147.486 li
12.6929 148.133 li
13.1484 148.777 li
13.6118 149.421 li
14.084 150.063 li
14.5635 150.702 li
15.0513 151.342 li
15.5474 151.979 li
16.0513 152.614 li
16.563 153.248 li
17.083 153.881 li
17.6108 154.512 li
18.1465 155.141 li
18.6904 155.769 li
19.2417 156.394 li
19.8013 157.018 li
20.3687 157.64 li
20.9434 158.261 li
21.5264 158.879 li
22.1167 159.496 li
22.7153 160.11 li
23.3213 160.724 li
23.9351 161.335 li
24.5566 161.944 li
25.1855 162.551 li
25.8223 163.156 li
26.4668 163.76 li
27.1187 164.36 li
27.7778 164.96 li
28.4448 165.557 li
29.1196 166.151 li
29.8013 166.744 li
30.4907 167.335 li
31.1875 167.923 li
31.8916 168.509 li
32.603 169.093 li
33.3223 169.675 li
34.0483 170.254 li
34.7817 170.831 li
35.5225 171.406 li
36.2705 171.979 li
37.0254 172.549 li
37.7876 173.116 li
38.5571 173.682 li
39.3335 174.245 li
40.1172 174.805 li
40.9077 175.363 li
41.7051 175.919 li
42.5098 176.472 li
43.3213 177.021 li
44.1396 177.569 li
44.9648 178.115 li
45.7969 178.657 li
46.6357 179.197 li
47.4814 179.735 li
48.334 180.27 li
49.1929 180.802 li
50.0591 181.331 li
50.9312 181.857 li
51.8105 182.382 li
52.6963 182.902 li
53.5884 183.421 li
54.4868 183.937 li
55.3921 184.449 li
56.3037 184.958 li
57.2217 185.466 li
58.146 185.97 li
59.0767 186.471 li
60.0137 186.969 li
60.9565 187.464 li
61.9058 187.956 li
62.8613 188.445 li
63.8232 188.931 li
64.791 189.414 li
65.7646 189.895 li
66.7446 190.371 li
67.7305 190.846 li
68.7222 191.316 li
69.7202 191.784 li
70.7236 192.248 li
71.7329 192.71 li
72.748 193.168 li
73.769 193.623 li
74.7954 194.074 li
75.8281 194.523 li
76.8657 194.969 li
77.9092 195.41 li
78.9585 195.849 li
80.0127 196.284 li
81.0728 196.717 li
82.1382 197.146 li
83.209 197.57 li
84.2852 197.993 li
85.3662 198.411 li
86.4531 198.826 li
87.5449 199.238 li
88.6416 199.646 li
89.7437 200.052 li
90.8511 200.453 li
91.9634 200.851 li
93.0806 201.245 li
94.2026 201.636 li
95.3296 202.023 li
96.4614 202.407 li
97.5981 202.787 li
98.7393 203.164 li
99.8853 203.537 li
101.036 203.906 li
102.192 204.272 li
103.352 204.635 li
104.516 204.993 li
105.685 205.348 li
106.859 205.699 li
108.037 206.047 li
109.219 206.391 li
110.405 206.73 li
111.596 207.066 li
112.791 207.399 li
113.99 207.728 li
115.193 208.053 li
116.401 208.374 li
117.612 208.691 li
118.827 209.005 li
120.046 209.315 li
121.27 209.621 li
122.497 209.923 li
123.727 210.221 li
124.961 210.516 li
126.2 210.806 li
127.441 211.093 li
128.687 211.375 li
129.936 211.653 li
131.188 211.929 li
132.443 212.199 li
133.703 212.466 li
134.965 212.729 li
136.231 212.988 li
137.5 213.243 li
138.772 213.494 li
140.047 213.741 li
141.326 213.984 li
142.607 214.223 li
143.891 214.458 li
145.179 214.688 li
146.469 214.915 li
147.762 215.138 li
149.058 215.356 li
150.356 215.571 li
151.657 215.782 li
152.961 215.988 li
154.268 216.19 li
155.576 216.389 li
156.888 216.583 li
158.201 216.772 li
159.518 216.958 li
160.836 217.14 li
162.157 217.317 li
163.479 217.491 li
164.805 217.66 li
166.132 217.825 li
167.461 217.986 li
168.792 218.143 li
170.125 218.295 li
171.46 218.443 li
172.797 218.587 li
174.136 218.728 li
175.477 218.863 li
176.818 218.994 li
178.162 219.121 li
179.507 219.244 li
180.854 219.363 li
182.203 219.478 li
183.552 219.588 li
184.903 219.694 li
186.256 219.796 li
187.609 219.894 li
188.964 219.986 li
190.32 220.075 li
191.677 220.16 li
193.035 220.24 li
194.394 220.316 li
195.754 220.389 li
197.115 220.456 li
198.477 220.52 li
199.839 220.579 li
201.203 220.634 li
202.566 220.684 li
203.931 220.73 li
205.296 220.772 li
206.661 220.81 li
208.027 220.843 li
209.394 220.872 li
210.76 220.896 li
212.127 220.917 li
213.495 220.934 li
214.862 220.945 li
216.229 220.953 li
217.597 220.956 li
218.964 220.955 li
220.332 220.949 li
221.7 220.939 li
223.067 220.926 li
224.434 220.907 li
225.8 220.885 li
227.167 220.858 li
228.534 220.827 li
229.899 220.791 li
231.264 220.752 li
232.629 220.708 li
233.994 220.659 li
235.357 220.606 li
236.719 220.55 li
238.082 220.488 li
239.443 220.423 li
240.803 220.354 li
242.163 220.279 li
243.522 220.201 li
244.879 220.118 li
246.236 220.031 li
247.591 219.94 li
248.945 219.845 li
250.298 219.745 li
251.65 219.642 li
253 219.533 li
254.349 219.421 li
255.697 219.305 li
257.042 219.184 li
258.387 219.059 li
259.73 218.929 li
261.072 218.796 li
262.411 218.658 li
263.749 218.516 li
265.084 218.37 li
266.418 218.22 li
267.751 218.064 li
269.082 217.906 li
270.41 217.743 li
271.736 217.576 li
273.06 217.404 li
274.381 217.229 li
275.701 217.05 li
277.018 216.866 li
278.333 216.678 li
279.646 216.486 li
280.956 216.29 li
282.263 216.09 li
283.569 215.886 li
284.872 215.677 li
286.171 215.465 li
287.468 215.248 li
288.762 215.027 li
290.054 214.803 li
291.343 214.573 li
292.628 214.341 li
293.912 214.104 li
295.192 213.863 li
296.468 213.618 li
297.742 213.369 li
299.012 213.116 li
300.28 212.859 li
301.544 212.599 li
302.805 212.333 li
304.062 212.064 li
305.316 211.792 li
306.567 211.515 li
307.814 211.234 li
309.057 210.949 li
310.297 210.661 li
311.534 210.369 li
312.766 210.072 li
313.995 209.772 li
315.22 209.469 li
316.441 209.16 li
317.659 208.849 li
318.872 208.533 li
320.081 208.214 li
321.287 207.891 li
322.488 207.564 li
323.684 207.233 li
324.877 206.899 li
326.066 206.561 li
327.25 206.219 li
328.43 205.873 li
329.606 205.524 li
330.778 205.171 li
331.944 204.814 li
333.106 204.454 li
334.264 204.09 li
335.417 203.723 li
336.566 203.351 li
337.709 202.977 li
338.848 202.598 li
339.983 202.216 li
341.112 201.83 li
342.237 201.441 li
343.356 201.049 li
344.471 200.652 li
345.581 200.253 li
346.685 199.85 li
347.785 199.442 li
348.879 199.033 li
349.968 198.619 li
351.052 198.202 li
352.131 197.782 li
353.205 197.358 li
354.273 196.932 li
355.335 196.501 li
356.393 196.067 li
357.445 195.63 li
358.491 195.189 li
359.532 194.746 li
360.567 194.299 li
361.596 193.849 li
362.62 193.396 li
363.637 192.939 li
364.65 192.479 li
365.657 192.017 li
366.657 191.551 li
367.652 191.081 li
368.64 190.608 li
369.624 190.133 li
370.6 189.654 li
371.571 189.173 li
372.536 188.688 li
373.495 188.201 li
374.447 187.71 li
375.393 187.217 li
376.333 186.72 li
377.267 186.22 li
378.195 185.718 li
379.116 185.212 li
380.031 184.704 li
380.939 184.192 li
381.84 183.679 li
382.736 183.162 li
383.625 182.643 li
384.507 182.12 li
385.383 181.595 li
386.252 181.066 li
387.115 180.536 li
387.97 180.003 li
388.82 179.467 li
389.662 178.928 li
390.498 178.387 li
391.327 177.843 li
392.148 177.296 li
392.963 176.747 li
393.771 176.195 li
394.572 175.642 li
395.366 175.084 li
396.153 174.525 li
396.933 173.964 li
397.707 173.399 li
398.472 172.833 li
399.231 172.264 li
399.982 171.692 li
400.726 171.119 li
401.463 170.543 li
402.193 169.965 li
402.916 169.384 li
403.631 168.802 li
404.338 168.216 li
405.04 167.629 li
405.733 167.04 li
406.418 166.448 li
407.096 165.854 li
407.767 165.258 li
408.43 164.66 li
409.085 164.061 li
409.734 163.458 li
410.375 162.854 li
411.007 162.248 li
411.632 161.64 li
412.25 161.029 li
412.86 160.417 li
413.462 159.804 li
414.057 159.188 li
414.643 158.57 li
415.222 157.95 li
415.793 157.329 li
416.357 156.706 li
416.913 156.081 li
417.459 155.455 li
418 154.826 li
418.532 154.196 li
419.055 153.564 li
419.571 152.932 li
420.079 152.297 li
420.579 151.66 li
421.071 151.022 li
421.555 150.383 li
422.031 149.741 li
422.499 149.099 li
422.958 148.455 li
423.41 147.81 li
423.853 147.163 li
424.289 146.515 li
424.715 145.865 li
425.134 145.214 li
425.545 144.562 li
425.948 143.908 li
426.342 143.254 li
426.728 142.598 li
427.106 141.94 li
427.475 141.282 li
427.836 140.622 li
428.189 139.962 li
428.534 139.3 li
428.87 138.638 li
429.198 137.974 li
429.518 137.309 li
429.829 136.643 li
430.131 135.976 li
430.426 135.309 li
430.712 134.64 li
430.99 133.97 li
431.259 133.3 li
431.52 132.628 li
431.772 131.956 li
432.016 131.283 li
432.251 130.609 li
432.478 129.936 li
432.697 129.261 li
432.907 128.585 li
433.108 127.908 li
433.3 127.231 li
433.485 126.554 li
433.661 125.876 li
433.828 125.197 li
433.987 124.518 li
434.137 123.838 li
434.279 123.158 li
434.412 122.478 li
434.537 121.797 li
434.653 121.115 li
434.76 120.434 li
434.859 119.752 li
434.949 119.069 li
435.031 118.387 li
435.104 117.704 li
435.168 117.021 li
435.224 116.338 li
435.271 115.654 li
435.31 114.971 li
435.34 114.287 li
435.362 113.604 li
435.375 112.92 li
435.378 112.236 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
435.378 112.236 mo
435.375 111.552 li
435.362 110.869 li
435.34 110.185 li
435.31 109.501 li
435.271 108.817 li
435.224 108.134 li
435.168 107.451 li
435.104 106.768 li
435.031 106.085 li
434.949 105.403 li
434.859 104.72 li
434.76 104.038 li
434.653 103.356 li
434.537 102.675 li
434.412 101.994 li
434.279 101.314 li
434.137 100.634 li
433.987 99.9541 li
433.828 99.2749 li
433.661 98.5962 li
433.485 97.918 li
433.3 97.2407 li
433.108 96.5635 li
432.907 95.8872 li
432.697 95.2114 li
432.478 94.5366 li
432.251 93.8623 li
432.016 93.1885 li
431.772 92.5156 li
431.52 91.8438 li
431.259 91.1724 li
430.99 90.502 li
430.712 89.8325 li
430.426 89.1641 li
430.131 88.4961 li
429.829 87.8291 li
429.518 87.1636 li
429.198 86.4985 li
428.87 85.835 li
428.534 85.1719 li
428.189 84.5103 li
427.836 83.8496 li
427.475 83.1899 li
427.106 82.5317 li
426.728 81.8745 li
426.342 81.2188 li
425.948 80.564 li
425.545 79.9102 li
425.134 79.2583 li
424.715 78.6074 li
424.289 77.9575 li
423.853 77.3096 li
423.41 76.6626 li
422.958 76.0171 li
422.499 75.373 li
422.031 74.7305 li
421.555 74.0894 li
421.071 73.4497 li
420.579 72.812 li
420.079 72.1753 li
419.571 71.5405 li
419.055 70.9072 li
418.532 70.2754 li
418 69.6455 li
417.459 69.0176 li
416.913 68.3906 li
416.357 67.7656 li
415.793 67.1426 li
415.222 66.5215 li
414.643 65.9019 li
414.057 65.2842 li
413.462 64.6685 li
412.86 64.0547 li
412.25 63.4424 li
411.632 62.8325 li
411.007 62.2246 li
410.375 61.6182 li
409.734 61.0142 li
409.085 60.4121 li
408.43 59.812 li
407.767 59.2139 li
407.096 58.6182 li
406.418 58.0239 li
405.733 57.4326 li
405.04 56.8428 li
404.338 56.2559 li
403.631 55.6709 li
402.916 55.0879 li
402.193 54.5073 li
401.463 53.9292 li
400.726 53.353 li
399.982 52.7793 li
399.231 52.208 li
398.472 51.6392 li
397.707 51.0728 li
396.933 50.5083 li
396.153 49.9468 li
395.366 49.3877 li
394.572 48.8311 li
393.771 48.2769 li
392.963 47.7251 li
392.148 47.1758 li
391.327 46.6294 li
390.498 46.0854 li
389.662 45.5439 li
388.82 45.0054 li
387.97 44.4692 li
387.115 43.936 li
386.252 43.4053 li
385.383 42.8774 li
384.507 42.3521 li
383.625 41.8296 li
382.736 41.3101 li
381.84 40.7935 li
380.939 40.2793 li
380.031 39.7681 li
379.116 39.2598 li
378.195 38.7544 li
377.267 38.252 li
376.333 37.7524 li
375.393 37.2559 li
374.447 36.7617 li
373.495 36.2715 li
372.536 35.7837 li
371.571 35.2988 li
370.6 34.8174 li
369.624 34.3389 li
368.64 33.8633 li
367.652 33.3911 li
366.657 32.9219 li
365.657 32.4556 li
364.65 31.9927 li
363.637 31.5327 li
362.62 31.0762 li
361.596 30.623 li
360.567 30.1729 li
359.532 29.7261 li
358.491 29.2822 li
357.445 28.8418 li
356.393 28.4048 li
355.335 27.9712 li
354.273 27.5405 li
353.205 27.1138 li
352.131 26.6899 li
351.052 26.2695 li
349.968 25.8525 li
348.879 25.4395 li
347.785 25.0293 li
346.685 24.6226 li
345.581 24.2192 li
344.471 23.8198 li
343.356 23.4238 li
342.237 23.0313 li
341.112 22.6421 li
339.983 22.2563 li
338.848 21.8745 li
337.709 21.4961 li
336.566 21.1211 li
335.417 20.75 li
334.264 20.3823 li
333.106 20.0181 li
331.944 19.6577 li
330.778 19.3013 li
329.606 18.9482 li
328.43 18.5986 li
327.25 18.2529 li
326.066 17.9111 li
324.877 17.5732 li
323.684 17.2388 li
322.488 16.9082 li
321.287 16.5811 li
320.081 16.2578 li
318.872 15.9385 li
317.659 15.623 li
316.441 15.3115 li
315.22 15.0039 li
313.995 14.6997 li
312.766 14.3994 li
311.534 14.1035 li
310.297 13.811 li
309.057 13.5225 li
307.814 13.2378 li
306.567 12.957 li
305.316 12.6802 li
304.062 12.4077 li
302.805 12.1387 li
301.544 11.874 li
300.28 11.6128 li
299.012 11.356 li
297.742 11.103 li
296.468 10.854 li
295.192 10.6089 li
293.912 10.3682 li
292.628 10.1313 li
291.343 9.89844 li
290.054 9.66943 li
288.762 9.44482 li
287.468 9.22412 li
286.171 9.00732 li
284.872 8.79492 li
283.569 8.58643 li
282.263 8.38232 li
280.956 8.18213 li
279.646 7.98584 li
278.333 7.79395 li
277.018 7.60596 li
275.701 7.42236 li
274.381 7.24268 li
273.06 7.06738 li
271.736 6.896 li
270.41 6.729 li
269.082 6.56592 li
267.751 6.40723 li
266.418 6.25293 li
265.084 6.10254 li
263.749 5.95605 li
262.411 5.81445 li
261.072 5.67676 li
259.73 5.54297 li
258.387 5.41357 li
257.042 5.28857 li
255.697 5.16797 li
254.349 5.05127 li
253 4.93848 li
251.65 4.83057 li
250.298 4.72656 li
248.945 4.62695 li
247.591 4.53174 li
246.236 4.44043 li
244.879 4.35352 li
243.522 4.271 li
242.163 4.19287 li
240.803 4.11865 li
239.443 4.04883 li
238.082 3.9834 li
236.719 3.92236 li
235.357 3.86523 li
233.994 3.81299 li
232.629 3.76465 li
231.264 3.72021 li
229.899 3.68066 li
228.534 3.64502 li
227.167 3.61377 li
225.8 3.58691 li
224.434 3.56445 li
223.067 3.54639 li
221.7 3.53223 li
220.332 3.52246 li
218.964 3.51709 li
217.597 3.51611 li
216.229 3.51953 li
214.862 3.52686 li
213.495 3.53857 li
212.127 3.55469 li
210.76 3.5752 li
209.394 3.6001 li
208.027 3.62891 li
206.661 3.66211 li
205.296 3.7002 li
203.931 3.7417 li
202.566 3.78809 li
201.203 3.83838 li
199.839 3.89355 li
198.477 3.95215 li
197.115 4.01563 li
195.754 4.0835 li
194.394 4.15527 li
193.035 4.23145 li
191.677 4.31201 li
190.32 4.39648 li
188.964 4.48535 li
187.609 4.5791 li
186.256 4.67627 li
184.903 4.77832 li
183.552 4.88428 li
182.203 4.99414 li
180.854 5.10889 li
179.507 5.22754 li
178.162 5.35059 li
176.818 5.47754 li
175.477 5.60938 li
174.136 5.74512 li
172.797 5.88477 li
171.46 6.02881 li
170.125 6.17725 li
168.792 6.32959 li
167.461 6.48633 li
166.132 6.64697 li
164.805 6.81201 li
163.479 6.98096 li
162.157 7.1543 li
160.836 7.33203 li
159.518 7.51367 li
158.201 7.69922 li
156.888 7.88916 li
155.576 8.0835 li
154.268 8.28174 li
152.961 8.48389 li
151.657 8.69043 li
150.356 8.90088 li
149.058 9.11523 li
147.762 9.33398 li
146.469 9.55664 li
145.179 9.78369 li
143.891 10.0142 li
142.607 10.249 li
141.326 10.4883 li
140.047 10.731 li
138.772 10.978 li
137.5 11.229 li
136.231 11.4839 li
134.965 11.7427 li
133.703 12.0059 li
132.443 12.2725 li
131.188 12.5435 li
129.936 12.8184 li
128.687 13.0972 li
127.441 13.3794 li
126.2 13.666 li
124.961 13.9565 li
123.727 14.251 li
122.497 14.5493 li
121.27 14.8511 li
120.046 15.1572 li
118.827 15.4668 li
117.612 15.7803 li
116.401 16.0977 li
115.193 16.4189 li
113.99 16.7441 li
112.791 17.0728 li
111.596 17.4053 li
110.405 17.7417 li
109.219 18.0815 li
108.037 18.4253 li
106.859 18.7729 li
105.685 19.124 li
104.516 19.479 li
103.352 19.8374 li
102.192 20.1997 li
101.036 20.5654 li
99.8853 20.9351 li
98.7393 21.3081 li
97.5981 21.6846 li
96.4614 22.0649 li
95.3296 22.4487 li
94.2026 22.8359 li
93.0806 23.2271 li
91.9634 23.6211 li
90.8511 24.019 li
89.7437 24.4204 li
88.6416 24.8252 li
87.5449 25.2339 li
86.4531 25.6455 li
85.3662 26.0605 li
84.2852 26.4795 li
83.209 26.9014 li
82.1382 27.3267 li
81.0728 27.7554 li
80.0127 28.1875 li
78.9585 28.623 li
77.9092 29.0615 li
76.8657 29.5039 li
75.8281 29.9487 li
74.7954 30.3975 li
73.769 30.8491 li
72.748 31.3042 li
71.7329 31.7622 li
70.7236 32.2236 li
69.7202 32.6885 li
68.7222 33.1558 li
67.7305 33.627 li
66.7446 34.1006 li
65.7646 34.5776 li
64.791 35.0576 li
63.8232 35.541 li
62.8613 36.0269 li
61.9058 36.5161 li
60.9565 37.0083 li
60.0137 37.5034 li
59.0767 38.002 li
58.146 38.5029 li
57.2217 39.0068 li
56.3037 39.5137 li
55.3921 40.0234 li
54.4868 40.5361 li
53.5884 41.0513 li
52.6963 41.5693 li
51.8105 42.0908 li
50.9312 42.6143 li
50.0591 43.1411 li
49.1929 43.6704 li
48.334 44.2021 li
47.4814 44.7368 li
46.6357 45.2744 li
45.7969 45.8145 li
44.9648 46.3569 li
44.1396 46.9023 li
43.3213 47.4502 li
42.5098 48.0005 li
41.7051 48.5537 li
40.9077 49.1089 li
40.1172 49.667 li
39.3335 50.2275 li
38.5571 50.79 li
37.7876 51.3555 li
37.0254 51.9233 li
36.2705 52.4932 li
35.5225 53.0659 li
34.7817 53.6406 li
34.0483 54.2178 li
33.3223 54.7974 li
32.603 55.3789 li
31.8916 55.9629 li
31.1875 56.5493 li
30.4907 57.1377 li
29.8013 57.728 li
29.1196 58.3208 li
28.4448 58.9155 li
27.7778 59.5127 li
27.1187 60.1118 li
26.4668 60.7129 li
25.8223 61.3159 li
25.1855 61.9209 li
24.5566 62.5283 li
23.9351 63.1372 li
23.3213 63.7485 li
22.7153 64.3613 li
22.1167 64.9761 li
21.5264 65.5928 li
20.9434 66.2114 li
20.3687 66.832 li
19.8013 67.4541 li
19.2417 68.0781 li
18.6904 68.7036 li
18.1465 69.3311 li
17.6108 69.9604 li
17.083 70.5913 li
16.563 71.2236 li
16.0513 71.8579 li
15.5474 72.4937 li
15.0513 73.1309 li
14.5635 73.7695 li
14.084 74.4097 li
13.6118 75.0518 li
13.1484 75.6948 li
12.6929 76.3398 li
12.2451 76.9858 li
11.8057 77.6333 li
11.3745 78.2822 li
10.9517 78.9326 li
10.5366 79.584 li
10.1304 80.2368 li
9.73193 80.8911 li
9.3418 81.5464 li
8.95996 82.2031 li
8.58594 82.8608 li
8.2207 83.5195 li
7.86377 84.1797 li
7.51514 84.8408 li
7.17432 85.5034 li
6.84229 86.1665 li
6.51855 86.8311 li
6.20313 87.4961 li
5.896 88.1626 li
5.59766 88.8301 li
5.30713 89.498 li
5.02539 90.167 li
4.75195 90.8374 li
4.4873 91.5078 li
4.23096 92.1797 li
3.98242 92.8521 li
3.74316 93.5254 li
3.51172 94.1992 li
3.28906 94.874 li
3.0752 95.5493 li
2.86963 96.2256 li
2.67236 96.9019 li
2.48389 97.5791 li
2.30371 98.2573 li
2.13184 98.9355 li
1.96924 99.6143 li
1.81445 100.294 li
1.66846 100.974 li
1.53125 101.654 li
1.40234 102.335 li
1.28223 103.016 li
1.17041 103.697 li
1.06738 104.379 li
.972656 105.062 li
.886719 105.744 li
.80957 106.427 li
.740723 107.109 li
.680664 107.792 li
.628906 108.476 li
.585938 109.159 li
.55127 109.843 li
.525879 110.526 li
.508301 111.21 li
.5 111.894 li
.5 112.578 li
.508301 113.262 li
.525879 113.945 li
.55127 114.629 li
.585938 115.313 li
.628906 115.996 li
.680664 116.68 li
.740723 117.362 li
.80957 118.046 li
.886719 118.729 li
.972656 119.41 li
1.06738 120.093 li
1.17041 120.774 li
1.28223 121.456 li
1.40234 122.138 li
1.53125 122.818 li
1.66846 123.498 li
1.81445 124.179 li
1.96924 124.857 li
2.13184 125.536 li
2.30371 126.215 li
2.48389 126.893 li
2.67236 127.57 li
2.86963 128.247 li
3.0752 128.923 li
3.28906 129.598 li
3.51172 130.272 li
3.74316 130.946 li
3.98242 131.62 li
4.23096 132.292 li
4.4873 132.964 li
4.75195 133.635 li
5.02539 134.305 li
5.30713 134.974 li
5.59766 135.643 li
5.896 136.31 li
6.20313 136.976 li
6.51855 137.642 li
6.84229 138.306 li
7.17432 138.969 li
7.51514 139.631 li
7.86377 140.292 li
8.2207 140.952 li
8.58594 141.611 li
8.95996 142.269 li
9.3418 142.926 li
9.73193 143.581 li
10.1304 144.235 li
10.5366 144.888 li
10.9517 145.54 li
11.3745 146.189 li
11.8057 146.839 li
12.2451 147.486 li
12.6929 148.133 li
13.1484 148.777 li
13.6118 149.421 li
14.084 150.063 li
14.5635 150.702 li
15.0513 151.342 li
15.5474 151.979 li
16.0513 152.614 li
16.563 153.248 li
17.083 153.881 li
17.6108 154.512 li
18.1465 155.141 li
18.6904 155.769 li
19.2417 156.394 li
19.8013 157.018 li
20.3687 157.64 li
20.9434 158.261 li
21.5264 158.879 li
22.1167 159.496 li
22.7153 160.11 li
23.3213 160.724 li
23.9351 161.335 li
24.5566 161.944 li
25.1855 162.551 li
25.8223 163.156 li
26.4668 163.76 li
27.1187 164.36 li
27.7778 164.96 li
28.4448 165.557 li
29.1196 166.151 li
29.8013 166.744 li
30.4907 167.335 li
31.1875 167.923 li
31.8916 168.509 li
32.603 169.093 li
33.3223 169.675 li
34.0483 170.254 li
34.7817 170.831 li
35.5225 171.406 li
36.2705 171.979 li
37.0254 172.549 li
37.7876 173.116 li
38.5571 173.682 li
39.3335 174.245 li
40.1172 174.805 li
40.9077 175.363 li
41.7051 175.919 li
42.5098 176.472 li
43.3213 177.021 li
44.1396 177.569 li
44.9648 178.115 li
45.7969 178.657 li
46.6357 179.197 li
47.4814 179.735 li
48.334 180.27 li
49.1929 180.802 li
50.0591 181.331 li
50.9312 181.857 li
51.8105 182.382 li
52.6963 182.902 li
53.5884 183.421 li
54.4868 183.937 li
55.3921 184.449 li
56.3037 184.958 li
57.2217 185.466 li
58.146 185.97 li
59.0767 186.471 li
60.0137 186.969 li
60.9565 187.464 li
61.9058 187.956 li
62.8613 188.445 li
63.8232 188.931 li
64.791 189.414 li
65.7646 189.895 li
66.7446 190.371 li
67.7305 190.846 li
68.7222 191.316 li
69.7202 191.784 li
70.7236 192.248 li
71.7329 192.71 li
72.748 193.168 li
73.769 193.623 li
74.7954 194.074 li
75.8281 194.523 li
76.8657 194.969 li
77.9092 195.41 li
78.9585 195.849 li
80.0127 196.284 li
81.0728 196.717 li
82.1382 197.146 li
83.209 197.57 li
84.2852 197.993 li
85.3662 198.411 li
86.4531 198.826 li
87.5449 199.238 li
88.6416 199.646 li
89.7437 200.052 li
90.8511 200.453 li
91.9634 200.851 li
93.0806 201.245 li
94.2026 201.636 li
95.3296 202.023 li
96.4614 202.407 li
97.5981 202.787 li
98.7393 203.164 li
99.8853 203.537 li
101.036 203.906 li
102.192 204.272 li
103.352 204.635 li
104.516 204.993 li
105.685 205.348 li
106.859 205.699 li
108.037 206.047 li
109.219 206.391 li
110.405 206.73 li
111.596 207.066 li
112.791 207.399 li
113.99 207.728 li
115.193 208.053 li
116.401 208.374 li
117.612 208.691 li
118.827 209.005 li
120.046 209.315 li
121.27 209.621 li
122.497 209.923 li
123.727 210.221 li
124.961 210.516 li
126.2 210.806 li
127.441 211.093 li
128.687 211.375 li
129.936 211.653 li
131.188 211.929 li
132.443 212.199 li
133.703 212.466 li
134.965 212.729 li
136.231 212.988 li
137.5 213.243 li
138.772 213.494 li
140.047 213.741 li
141.326 213.984 li
142.607 214.223 li
143.891 214.458 li
145.179 214.688 li
146.469 214.915 li
147.762 215.138 li
149.058 215.356 li
150.356 215.571 li
151.657 215.782 li
152.961 215.988 li
154.268 216.19 li
155.576 216.389 li
156.888 216.583 li
158.201 216.772 li
159.518 216.958 li
160.836 217.14 li
162.157 217.317 li
163.479 217.491 li
164.805 217.66 li
166.132 217.825 li
167.461 217.986 li
168.792 218.143 li
170.125 218.295 li
171.46 218.443 li
172.797 218.587 li
174.136 218.728 li
175.477 218.863 li
176.818 218.994 li
178.162 219.121 li
179.507 219.244 li
180.854 219.363 li
182.203 219.478 li
183.552 219.588 li
184.903 219.694 li
186.256 219.796 li
187.609 219.894 li
188.964 219.986 li
190.32 220.075 li
191.677 220.16 li
193.035 220.24 li
194.394 220.316 li
195.754 220.389 li
197.115 220.456 li
198.477 220.52 li
199.839 220.579 li
201.203 220.634 li
202.566 220.684 li
203.931 220.73 li
205.296 220.772 li
206.661 220.81 li
208.027 220.843 li
209.394 220.872 li
210.76 220.896 li
212.127 220.917 li
213.495 220.934 li
214.862 220.945 li
216.229 220.953 li
217.597 220.956 li
218.964 220.955 li
220.332 220.949 li
221.7 220.939 li
223.067 220.926 li
224.434 220.907 li
225.8 220.885 li
227.167 220.858 li
228.534 220.827 li
229.899 220.791 li
231.264 220.752 li
232.629 220.708 li
233.994 220.659 li
235.357 220.606 li
236.719 220.55 li
238.082 220.488 li
239.443 220.423 li
240.803 220.354 li
242.163 220.279 li
243.522 220.201 li
244.879 220.118 li
246.236 220.031 li
247.591 219.94 li
248.945 219.845 li
250.298 219.745 li
251.65 219.642 li
253 219.533 li
254.349 219.421 li
255.697 219.305 li
257.042 219.184 li
258.387 219.059 li
259.73 218.929 li
261.072 218.796 li
262.411 218.658 li
263.749 218.516 li
265.084 218.37 li
266.418 218.22 li
267.751 218.064 li
269.082 217.906 li
270.41 217.743 li
271.736 217.576 li
273.06 217.404 li
274.381 217.229 li
275.701 217.05 li
277.018 216.866 li
278.333 216.678 li
279.646 216.486 li
280.956 216.29 li
282.263 216.09 li
283.569 215.886 li
284.872 215.677 li
286.171 215.465 li
287.468 215.248 li
288.762 215.027 li
290.054 214.803 li
291.343 214.573 li
292.628 214.341 li
293.912 214.104 li
295.192 213.863 li
296.468 213.618 li
297.742 213.369 li
299.012 213.116 li
300.28 212.859 li
301.544 212.599 li
302.805 212.333 li
304.062 212.064 li
305.316 211.792 li
306.567 211.515 li
307.814 211.234 li
309.057 210.949 li
310.297 210.661 li
311.534 210.369 li
312.766 210.072 li
313.995 209.772 li
315.22 209.469 li
316.441 209.16 li
317.659 208.849 li
318.872 208.533 li
320.081 208.214 li
321.287 207.891 li
322.488 207.564 li
323.684 207.233 li
324.877 206.899 li
326.066 206.561 li
327.25 206.219 li
328.43 205.873 li
329.606 205.524 li
330.778 205.171 li
331.944 204.814 li
333.106 204.454 li
334.264 204.09 li
335.417 203.723 li
336.566 203.351 li
337.709 202.977 li
338.848 202.598 li
339.983 202.216 li
341.112 201.83 li
342.237 201.441 li
343.356 201.049 li
344.471 200.652 li
345.581 200.253 li
346.685 199.85 li
347.785 199.442 li
348.879 199.033 li
349.968 198.619 li
351.052 198.202 li
352.131 197.782 li
353.205 197.358 li
354.273 196.932 li
355.335 196.501 li
356.393 196.067 li
357.445 195.63 li
358.491 195.189 li
359.532 194.746 li
360.567 194.299 li
361.596 193.849 li
362.62 193.396 li
363.637 192.939 li
364.65 192.479 li
365.657 192.017 li
366.657 191.551 li
367.652 191.081 li
368.64 190.608 li
369.624 190.133 li
370.6 189.654 li
371.571 189.173 li
372.536 188.688 li
373.495 188.201 li
374.447 187.71 li
375.393 187.217 li
376.333 186.72 li
377.267 186.22 li
378.195 185.718 li
379.116 185.212 li
380.031 184.704 li
380.939 184.192 li
381.84 183.679 li
382.736 183.162 li
383.625 182.643 li
384.507 182.12 li
385.383 181.595 li
386.252 181.066 li
387.115 180.536 li
387.97 180.003 li
388.82 179.467 li
389.662 178.928 li
390.498 178.387 li
391.327 177.843 li
392.148 177.296 li
392.963 176.747 li
393.771 176.195 li
394.572 175.642 li
395.366 175.084 li
396.153 174.525 li
396.933 173.964 li
397.707 173.399 li
398.472 172.833 li
399.231 172.264 li
399.982 171.692 li
400.726 171.119 li
401.463 170.543 li
402.193 169.965 li
402.916 169.384 li
403.631 168.802 li
404.338 168.216 li
405.04 167.629 li
405.733 167.04 li
406.418 166.448 li
407.096 165.854 li
407.767 165.258 li
408.43 164.66 li
409.085 164.061 li
409.734 163.458 li
410.375 162.854 li
411.007 162.248 li
411.632 161.64 li
412.25 161.029 li
412.86 160.417 li
413.462 159.804 li
414.057 159.188 li
414.643 158.57 li
415.222 157.95 li
415.793 157.329 li
416.357 156.706 li
416.913 156.081 li
417.459 155.455 li
418 154.826 li
418.532 154.196 li
419.055 153.564 li
419.571 152.932 li
420.079 152.297 li
420.579 151.66 li
421.071 151.022 li
421.555 150.383 li
422.031 149.741 li
422.499 149.099 li
422.958 148.455 li
423.41 147.81 li
423.853 147.163 li
424.289 146.515 li
424.715 145.865 li
425.134 145.214 li
425.545 144.562 li
425.948 143.908 li
426.342 143.254 li
426.728 142.598 li
427.106 141.94 li
427.475 141.282 li
427.836 140.622 li
428.189 139.962 li
428.534 139.3 li
428.87 138.638 li
429.198 137.974 li
429.518 137.309 li
429.829 136.643 li
430.131 135.976 li
430.426 135.309 li
430.712 134.64 li
430.99 133.97 li
431.259 133.3 li
431.52 132.628 li
431.772 131.956 li
432.016 131.283 li
432.251 130.609 li
432.478 129.936 li
432.697 129.261 li
432.907 128.585 li
433.108 127.908 li
433.3 127.231 li
433.485 126.554 li
433.661 125.876 li
433.828 125.197 li
433.987 124.518 li
434.137 123.838 li
434.279 123.158 li
434.412 122.478 li
434.537 121.797 li
434.653 121.115 li
434.76 120.434 li
434.859 119.752 li
434.949 119.069 li
435.031 118.387 li
435.104 117.704 li
435.168 117.021 li
435.224 116.338 li
435.271 115.654 li
435.31 114.971 li
435.34 114.287 li
435.362 113.604 li
435.375 112.92 li
435.378 112.236 li
@
gsave
435.378 112.236 mo
435.375 111.552 li
435.362 110.869 li
435.34 110.185 li
435.31 109.501 li
435.271 108.817 li
435.224 108.134 li
435.168 107.451 li
435.104 106.768 li
435.031 106.085 li
434.949 105.403 li
434.859 104.72 li
434.76 104.038 li
434.653 103.356 li
434.537 102.675 li
434.412 101.994 li
434.279 101.314 li
434.137 100.634 li
433.987 99.9541 li
433.828 99.2749 li
433.661 98.5962 li
433.485 97.918 li
433.3 97.2407 li
433.108 96.5635 li
432.907 95.8872 li
432.697 95.2114 li
432.478 94.5366 li
432.251 93.8623 li
432.016 93.1885 li
431.772 92.5156 li
431.52 91.8438 li
431.259 91.1724 li
430.99 90.502 li
430.712 89.8325 li
430.426 89.1641 li
430.131 88.4961 li
429.829 87.8291 li
429.518 87.1636 li
429.198 86.4985 li
428.87 85.835 li
428.534 85.1719 li
428.189 84.5103 li
427.836 83.8496 li
427.475 83.1899 li
427.106 82.5317 li
426.728 81.8745 li
426.342 81.2188 li
425.948 80.564 li
425.545 79.9102 li
425.134 79.2583 li
424.715 78.6074 li
424.289 77.9575 li
423.853 77.3096 li
423.41 76.6626 li
422.958 76.0171 li
422.499 75.373 li
422.031 74.7305 li
421.555 74.0894 li
421.071 73.4497 li
420.579 72.812 li
420.079 72.1753 li
419.571 71.5405 li
419.055 70.9072 li
418.532 70.2754 li
418 69.6455 li
417.459 69.0176 li
416.913 68.3906 li
416.357 67.7656 li
415.793 67.1426 li
415.222 66.5215 li
414.643 65.9019 li
414.057 65.2842 li
413.462 64.6685 li
412.86 64.0547 li
412.25 63.4424 li
411.632 62.8325 li
411.007 62.2246 li
410.375 61.6182 li
409.734 61.0142 li
409.085 60.4121 li
408.43 59.812 li
407.767 59.2139 li
407.096 58.6182 li
406.418 58.0239 li
405.733 57.4326 li
405.04 56.8428 li
404.338 56.2559 li
403.631 55.6709 li
402.916 55.0879 li
402.193 54.5073 li
401.463 53.9292 li
400.726 53.353 li
399.982 52.7793 li
399.231 52.208 li
398.472 51.6392 li
397.707 51.0728 li
396.933 50.5083 li
396.153 49.9468 li
395.366 49.3877 li
394.572 48.8311 li
393.771 48.2769 li
392.963 47.7251 li
392.148 47.1758 li
391.327 46.6294 li
390.498 46.0854 li
389.662 45.5439 li
388.82 45.0054 li
387.97 44.4692 li
387.115 43.936 li
386.252 43.4053 li
385.383 42.8774 li
384.507 42.3521 li
383.625 41.8296 li
382.736 41.3101 li
381.84 40.7935 li
380.939 40.2793 li
380.031 39.7681 li
379.116 39.2598 li
378.195 38.7544 li
377.267 38.252 li
376.333 37.7524 li
375.393 37.2559 li
374.447 36.7617 li
373.495 36.2715 li
372.536 35.7837 li
371.571 35.2988 li
370.6 34.8174 li
369.624 34.3389 li
368.64 33.8633 li
367.652 33.3911 li
366.657 32.9219 li
365.657 32.4556 li
364.65 31.9927 li
363.637 31.5327 li
362.62 31.0762 li
361.596 30.623 li
360.567 30.1729 li
359.532 29.7261 li
358.491 29.2822 li
357.445 28.8418 li
356.393 28.4048 li
355.335 27.9712 li
354.273 27.5405 li
353.205 27.1138 li
352.131 26.6899 li
351.052 26.2695 li
349.968 25.8525 li
348.879 25.4395 li
347.785 25.0293 li
346.685 24.6226 li
345.581 24.2192 li
344.471 23.8198 li
343.356 23.4238 li
342.237 23.0313 li
341.112 22.6421 li
339.983 22.2563 li
338.848 21.8745 li
337.709 21.4961 li
336.566 21.1211 li
335.417 20.75 li
334.264 20.3823 li
333.106 20.0181 li
331.944 19.6577 li
330.778 19.3013 li
329.606 18.9482 li
328.43 18.5986 li
327.25 18.2529 li
326.066 17.9111 li
324.877 17.5732 li
323.684 17.2388 li
322.488 16.9082 li
321.287 16.5811 li
320.081 16.2578 li
318.872 15.9385 li
317.659 15.623 li
316.441 15.3115 li
315.22 15.0039 li
313.995 14.6997 li
312.766 14.3994 li
311.534 14.1035 li
310.297 13.811 li
309.057 13.5225 li
307.814 13.2378 li
306.567 12.957 li
305.316 12.6802 li
304.062 12.4077 li
302.805 12.1387 li
301.544 11.874 li
300.28 11.6128 li
299.012 11.356 li
297.742 11.103 li
296.468 10.854 li
295.192 10.6089 li
293.912 10.3682 li
292.628 10.1313 li
291.343 9.89844 li
290.054 9.66943 li
288.762 9.44482 li
287.468 9.22412 li
286.171 9.00732 li
284.872 8.79492 li
283.569 8.58643 li
282.263 8.38232 li
280.956 8.18213 li
279.646 7.98584 li
278.333 7.79395 li
277.018 7.60596 li
275.701 7.42236 li
274.381 7.24268 li
273.06 7.06738 li
271.736 6.896 li
270.41 6.729 li
269.082 6.56592 li
267.751 6.40723 li
266.418 6.25293 li
265.084 6.10254 li
263.749 5.95605 li
262.411 5.81445 li
261.072 5.67676 li
259.73 5.54297 li
258.387 5.41357 li
257.042 5.28857 li
255.697 5.16797 li
254.349 5.05127 li
253 4.93848 li
251.65 4.83057 li
250.298 4.72656 li
248.945 4.62695 li
247.591 4.53174 li
246.236 4.44043 li
244.879 4.35352 li
243.522 4.271 li
242.163 4.19287 li
240.803 4.11865 li
239.443 4.04883 li
238.082 3.9834 li
236.719 3.92236 li
235.357 3.86523 li
233.994 3.81299 li
232.629 3.76465 li
231.264 3.72021 li
229.899 3.68066 li
228.534 3.64502 li
227.167 3.61377 li
225.8 3.58691 li
224.434 3.56445 li
223.067 3.54639 li
221.7 3.53223 li
220.332 3.52246 li
218.964 3.51709 li
217.597 3.51611 li
216.229 3.51953 li
214.862 3.52686 li
213.495 3.53857 li
212.127 3.55469 li
210.76 3.5752 li
209.394 3.6001 li
208.027 3.62891 li
206.661 3.66211 li
205.296 3.7002 li
203.931 3.7417 li
202.566 3.78809 li
201.203 3.83838 li
199.839 3.89355 li
198.477 3.95215 li
197.115 4.01563 li
195.754 4.0835 li
194.394 4.15527 li
193.035 4.23145 li
191.677 4.31201 li
190.32 4.39648 li
188.964 4.48535 li
187.609 4.5791 li
186.256 4.67627 li
184.903 4.77832 li
183.552 4.88428 li
182.203 4.99414 li
180.854 5.10889 li
179.507 5.22754 li
178.162 5.35059 li
176.818 5.47754 li
175.477 5.60938 li
174.136 5.74512 li
172.797 5.88477 li
171.46 6.02881 li
170.125 6.17725 li
168.792 6.32959 li
167.461 6.48633 li
166.132 6.64697 li
164.805 6.81201 li
163.479 6.98096 li
162.157 7.1543 li
160.836 7.33203 li
159.518 7.51367 li
158.201 7.69922 li
156.888 7.88916 li
155.576 8.0835 li
154.268 8.28174 li
152.961 8.48389 li
151.657 8.69043 li
150.356 8.90088 li
149.058 9.11523 li
147.762 9.33398 li
146.469 9.55664 li
145.179 9.78369 li
143.891 10.0142 li
142.607 10.249 li
141.326 10.4883 li
140.047 10.731 li
138.772 10.978 li
137.5 11.229 li
136.231 11.4839 li
134.965 11.7427 li
133.703 12.0059 li
132.443 12.2725 li
131.188 12.5435 li
129.936 12.8184 li
128.687 13.0972 li
127.441 13.3794 li
126.2 13.666 li
124.961 13.9565 li
123.727 14.251 li
122.497 14.5493 li
121.27 14.8511 li
120.046 15.1572 li
118.827 15.4668 li
117.612 15.7803 li
116.401 16.0977 li
115.193 16.4189 li
113.99 16.7441 li
112.791 17.0728 li
111.596 17.4053 li
110.405 17.7417 li
109.219 18.0815 li
108.037 18.4253 li
106.859 18.7729 li
105.685 19.124 li
104.516 19.479 li
103.352 19.8374 li
102.192 20.1997 li
101.036 20.5654 li
99.8853 20.9351 li
98.7393 21.3081 li
97.5981 21.6846 li
96.4614 22.0649 li
95.3296 22.4487 li
94.2026 22.8359 li
93.0806 23.2271 li
91.9634 23.6211 li
90.8511 24.019 li
89.7437 24.4204 li
88.6416 24.8252 li
87.5449 25.2339 li
86.4531 25.6455 li
85.3662 26.0605 li
84.2852 26.4795 li
83.209 26.9014 li
82.1382 27.3267 li
81.0728 27.7554 li
80.0127 28.1875 li
78.9585 28.623 li
77.9092 29.0615 li
76.8657 29.5039 li
75.8281 29.9487 li
74.7954 30.3975 li
73.769 30.8491 li
72.748 31.3042 li
71.7329 31.7622 li
70.7236 32.2236 li
69.7202 32.6885 li
68.7222 33.1558 li
67.7305 33.627 li
66.7446 34.1006 li
65.7646 34.5776 li
64.791 35.0576 li
63.8232 35.541 li
62.8613 36.0269 li
61.9058 36.5161 li
60.9565 37.0083 li
60.0137 37.5034 li
59.0767 38.002 li
58.146 38.5029 li
57.2217 39.0068 li
56.3037 39.5137 li
55.3921 40.0234 li
54.4868 40.5361 li
53.5884 41.0513 li
52.6963 41.5693 li
51.8105 42.0908 li
50.9312 42.6143 li
50.0591 43.1411 li
49.1929 43.6704 li
48.334 44.2021 li
47.4814 44.7368 li
46.6357 45.2744 li
45.7969 45.8145 li
44.9648 46.3569 li
44.1396 46.9023 li
43.3213 47.4502 li
42.5098 48.0005 li
41.7051 48.5537 li
40.9077 49.1089 li
40.1172 49.667 li
39.3335 50.2275 li
38.5571 50.79 li
37.7876 51.3555 li
37.0254 51.9233 li
36.2705 52.4932 li
35.5225 53.0659 li
34.7817 53.6406 li
34.0483 54.2178 li
33.3223 54.7974 li
32.603 55.3789 li
31.8916 55.9629 li
31.1875 56.5493 li
30.4907 57.1377 li
29.8013 57.728 li
29.1196 58.3208 li
28.4448 58.9155 li
27.7778 59.5127 li
27.1187 60.1118 li
26.4668 60.7129 li
25.8223 61.3159 li
25.1855 61.9209 li
24.5566 62.5283 li
23.9351 63.1372 li
23.3213 63.7485 li
22.7153 64.3613 li
22.1167 64.9761 li
21.5264 65.5928 li
20.9434 66.2114 li
20.3687 66.832 li
19.8013 67.4541 li
19.2417 68.0781 li
18.6904 68.7036 li
18.1465 69.3311 li
17.6108 69.9604 li
17.083 70.5913 li
16.563 71.2236 li
16.0513 71.8579 li
15.5474 72.4937 li
15.0513 73.1309 li
14.5635 73.7695 li
14.084 74.4097 li
13.6118 75.0518 li
13.1484 75.6948 li
12.6929 76.3398 li
12.2451 76.9858 li
11.8057 77.6333 li
11.3745 78.2822 li
10.9517 78.9326 li
10.5366 79.584 li
10.1304 80.2368 li
9.73193 80.8911 li
9.3418 81.5464 li
8.95996 82.2031 li
8.58594 82.8608 li
8.2207 83.5195 li
7.86377 84.1797 li
7.51514 84.8408 li
7.17432 85.5034 li
6.84229 86.1665 li
6.51855 86.8311 li
6.20313 87.4961 li
5.896 88.1626 li
5.59766 88.8301 li
5.30713 89.498 li
5.02539 90.167 li
4.75195 90.8374 li
4.4873 91.5078 li
4.23096 92.1797 li
3.98242 92.8521 li
3.74316 93.5254 li
3.51172 94.1992 li
3.28906 94.874 li
3.0752 95.5493 li
2.86963 96.2256 li
2.67236 96.9019 li
2.48389 97.5791 li
2.30371 98.2573 li
2.13184 98.9355 li
1.96924 99.6143 li
1.81445 100.294 li
1.66846 100.974 li
1.53125 101.654 li
1.40234 102.335 li
1.28223 103.016 li
1.17041 103.697 li
1.06738 104.379 li
.972656 105.062 li
.886719 105.744 li
.80957 106.427 li
.740723 107.109 li
.680664 107.792 li
.628906 108.476 li
.585938 109.159 li
.55127 109.843 li
.525879 110.526 li
.508301 111.21 li
.5 111.894 li
.5 112.578 li
.508301 113.262 li
.525879 113.945 li
.55127 114.629 li
.585938 115.313 li
.628906 115.996 li
.680664 116.68 li
.740723 117.362 li
.80957 118.046 li
.886719 118.729 li
.972656 119.41 li
1.06738 120.093 li
1.17041 120.774 li
1.28223 121.456 li
1.40234 122.138 li
1.53125 122.818 li
1.66846 123.498 li
1.81445 124.179 li
1.96924 124.857 li
2.13184 125.536 li
2.30371 126.215 li
2.48389 126.893 li
2.67236 127.57 li
2.86963 128.247 li
3.0752 128.923 li
3.28906 129.598 li
3.51172 130.272 li
3.74316 130.946 li
3.98242 131.62 li
4.23096 132.292 li
4.4873 132.964 li
4.75195 133.635 li
5.02539 134.305 li
5.30713 134.974 li
5.59766 135.643 li
5.896 136.31 li
6.20313 136.976 li
6.51855 137.642 li
6.84229 138.306 li
7.17432 138.969 li
7.51514 139.631 li
7.86377 140.292 li
8.2207 140.952 li
8.58594 141.611 li
8.95996 142.269 li
9.3418 142.926 li
9.73193 143.581 li
10.1304 144.235 li
10.5366 144.888 li
10.9517 145.54 li
11.3745 146.189 li
11.8057 146.839 li
12.2451 147.486 li
12.6929 148.133 li
13.1484 148.777 li
13.6118 149.421 li
14.084 150.063 li
14.5635 150.702 li
15.0513 151.342 li
15.5474 151.979 li
16.0513 152.614 li
16.563 153.248 li
17.083 153.881 li
17.6108 154.512 li
18.1465 155.141 li
18.6904 155.769 li
19.2417 156.394 li
19.8013 157.018 li
20.3687 157.64 li
20.9434 158.261 li
21.5264 158.879 li
22.1167 159.496 li
22.7153 160.11 li
23.3213 160.724 li
23.9351 161.335 li
24.5566 161.944 li
25.1855 162.551 li
25.8223 163.156 li
26.4668 163.76 li
27.1187 164.36 li
27.7778 164.96 li
28.4448 165.557 li
29.1196 166.151 li
29.8013 166.744 li
30.4907 167.335 li
31.1875 167.923 li
31.8916 168.509 li
32.603 169.093 li
33.3223 169.675 li
34.0483 170.254 li
34.7817 170.831 li
35.5225 171.406 li
36.2705 171.979 li
37.0254 172.549 li
37.7876 173.116 li
38.5571 173.682 li
39.3335 174.245 li
40.1172 174.805 li
40.9077 175.363 li
41.7051 175.919 li
42.5098 176.472 li
43.3213 177.021 li
44.1396 177.569 li
44.9648 178.115 li
45.7969 178.657 li
46.6357 179.197 li
47.4814 179.735 li
48.334 180.27 li
49.1929 180.802 li
50.0591 181.331 li
50.9312 181.857 li
51.8105 182.382 li
52.6963 182.902 li
53.5884 183.421 li
54.4868 183.937 li
55.3921 184.449 li
56.3037 184.958 li
57.2217 185.466 li
58.146 185.97 li
59.0767 186.471 li
60.0137 186.969 li
60.9565 187.464 li
61.9058 187.956 li
62.8613 188.445 li
63.8232 188.931 li
64.791 189.414 li
65.7646 189.895 li
66.7446 190.371 li
67.7305 190.846 li
68.7222 191.316 li
69.7202 191.784 li
70.7236 192.248 li
71.7329 192.71 li
72.748 193.168 li
73.769 193.623 li
74.7954 194.074 li
75.8281 194.523 li
76.8657 194.969 li
77.9092 195.41 li
78.9585 195.849 li
80.0127 196.284 li
81.0728 196.717 li
82.1382 197.146 li
83.209 197.57 li
84.2852 197.993 li
85.3662 198.411 li
86.4531 198.826 li
87.5449 199.238 li
88.6416 199.646 li
89.7437 200.052 li
90.8511 200.453 li
91.9634 200.851 li
93.0806 201.245 li
94.2026 201.636 li
95.3296 202.023 li
96.4614 202.407 li
97.5981 202.787 li
98.7393 203.164 li
99.8853 203.537 li
101.036 203.906 li
102.192 204.272 li
103.352 204.635 li
104.516 204.993 li
105.685 205.348 li
106.859 205.699 li
108.037 206.047 li
109.219 206.391 li
110.405 206.73 li
111.596 207.066 li
112.791 207.399 li
113.99 207.728 li
115.193 208.053 li
116.401 208.374 li
117.612 208.691 li
118.827 209.005 li
120.046 209.315 li
121.27 209.621 li
122.497 209.923 li
123.727 210.221 li
124.961 210.516 li
126.2 210.806 li
127.441 211.093 li
128.687 211.375 li
129.936 211.653 li
131.188 211.929 li
132.443 212.199 li
133.703 212.466 li
134.965 212.729 li
136.231 212.988 li
137.5 213.243 li
138.772 213.494 li
140.047 213.741 li
141.326 213.984 li
142.607 214.223 li
143.891 214.458 li
145.179 214.688 li
146.469 214.915 li
147.762 215.138 li
149.058 215.356 li
150.356 215.571 li
151.657 215.782 li
152.961 215.988 li
154.268 216.19 li
155.576 216.389 li
156.888 216.583 li
158.201 216.772 li
159.518 216.958 li
160.836 217.14 li
162.157 217.317 li
163.479 217.491 li
164.805 217.66 li
166.132 217.825 li
167.461 217.986 li
168.792 218.143 li
170.125 218.295 li
171.46 218.443 li
172.797 218.587 li
174.136 218.728 li
175.477 218.863 li
176.818 218.994 li
178.162 219.121 li
179.507 219.244 li
180.854 219.363 li
182.203 219.478 li
183.552 219.588 li
184.903 219.694 li
186.256 219.796 li
187.609 219.894 li
188.964 219.986 li
190.32 220.075 li
191.677 220.16 li
193.035 220.24 li
194.394 220.316 li
195.754 220.389 li
197.115 220.456 li
198.477 220.52 li
199.839 220.579 li
201.203 220.634 li
202.566 220.684 li
203.931 220.73 li
205.296 220.772 li
206.661 220.81 li
208.027 220.843 li
209.394 220.872 li
210.76 220.896 li
212.127 220.917 li
213.495 220.934 li
214.862 220.945 li
216.229 220.953 li
217.597 220.956 li
218.964 220.955 li
220.332 220.949 li
221.7 220.939 li
223.067 220.926 li
224.434 220.907 li
225.8 220.885 li
227.167 220.858 li
228.534 220.827 li
229.899 220.791 li
231.264 220.752 li
232.629 220.708 li
233.994 220.659 li
235.357 220.606 li
236.719 220.55 li
238.082 220.488 li
239.443 220.423 li
240.803 220.354 li
242.163 220.279 li
243.522 220.201 li
244.879 220.118 li
246.236 220.031 li
247.591 219.94 li
248.945 219.845 li
250.298 219.745 li
251.65 219.642 li
253 219.533 li
254.349 219.421 li
255.697 219.305 li
257.042 219.184 li
258.387 219.059 li
259.73 218.929 li
261.072 218.796 li
262.411 218.658 li
263.749 218.516 li
265.084 218.37 li
266.418 218.22 li
267.751 218.064 li
269.082 217.906 li
270.41 217.743 li
271.736 217.576 li
273.06 217.404 li
274.381 217.229 li
275.701 217.05 li
277.018 216.866 li
278.333 216.678 li
279.646 216.486 li
280.956 216.29 li
282.263 216.09 li
283.569 215.886 li
284.872 215.677 li
286.171 215.465 li
287.468 215.248 li
288.762 215.027 li
290.054 214.803 li
291.343 214.573 li
292.628 214.341 li
293.912 214.104 li
295.192 213.863 li
296.468 213.618 li
297.742 213.369 li
299.012 213.116 li
300.28 212.859 li
301.544 212.599 li
302.805 212.333 li
304.062 212.064 li
305.316 211.792 li
306.567 211.515 li
307.814 211.234 li
309.057 210.949 li
310.297 210.661 li
311.534 210.369 li
312.766 210.072 li
313.995 209.772 li
315.22 209.469 li
316.441 209.16 li
317.659 208.849 li
318.872 208.533 li
320.081 208.214 li
321.287 207.891 li
322.488 207.564 li
323.684 207.233 li
324.877 206.899 li
326.066 206.561 li
327.25 206.219 li
328.43 205.873 li
329.606 205.524 li
330.778 205.171 li
331.944 204.814 li
333.106 204.454 li
334.264 204.09 li
335.417 203.723 li
336.566 203.351 li
337.709 202.977 li
338.848 202.598 li
339.983 202.216 li
341.112 201.83 li
342.237 201.441 li
343.356 201.049 li
344.471 200.652 li
345.581 200.253 li
346.685 199.85 li
347.785 199.442 li
348.879 199.033 li
349.968 198.619 li
351.052 198.202 li
352.131 197.782 li
353.205 197.358 li
354.273 196.932 li
355.335 196.501 li
356.393 196.067 li
357.445 195.63 li
358.491 195.189 li
359.532 194.746 li
360.567 194.299 li
361.596 193.849 li
362.62 193.396 li
363.637 192.939 li
364.65 192.479 li
365.657 192.017 li
366.657 191.551 li
367.652 191.081 li
368.64 190.608 li
369.624 190.133 li
370.6 189.654 li
371.571 189.173 li
372.536 188.688 li
373.495 188.201 li
374.447 187.71 li
375.393 187.217 li
376.333 186.72 li
377.267 186.22 li
378.195 185.718 li
379.116 185.212 li
380.031 184.704 li
380.939 184.192 li
381.84 183.679 li
382.736 183.162 li
383.625 182.643 li
384.507 182.12 li
385.383 181.595 li
386.252 181.066 li
387.115 180.536 li
387.97 180.003 li
388.82 179.467 li
389.662 178.928 li
390.498 178.387 li
391.327 177.843 li
392.148 177.296 li
392.963 176.747 li
393.771 176.195 li
394.572 175.642 li
395.366 175.084 li
396.153 174.525 li
396.933 173.964 li
397.707 173.399 li
398.472 172.833 li
399.231 172.264 li
399.982 171.692 li
400.726 171.119 li
401.463 170.543 li
402.193 169.965 li
402.916 169.384 li
403.631 168.802 li
404.338 168.216 li
405.04 167.629 li
405.733 167.04 li
406.418 166.448 li
407.096 165.854 li
407.767 165.258 li
408.43 164.66 li
409.085 164.061 li
409.734 163.458 li
410.375 162.854 li
411.007 162.248 li
411.632 161.64 li
412.25 161.029 li
412.86 160.417 li
413.462 159.804 li
414.057 159.188 li
414.643 158.57 li
415.222 157.95 li
415.793 157.329 li
416.357 156.706 li
416.913 156.081 li
417.459 155.455 li
418 154.826 li
418.532 154.196 li
419.055 153.564 li
419.571 152.932 li
420.079 152.297 li
420.579 151.66 li
421.071 151.022 li
421.555 150.383 li
422.031 149.741 li
422.499 149.099 li
422.958 148.455 li
423.41 147.81 li
423.853 147.163 li
424.289 146.515 li
424.715 145.865 li
425.134 145.214 li
425.545 144.562 li
425.948 143.908 li
426.342 143.254 li
426.728 142.598 li
427.106 141.94 li
427.475 141.282 li
427.836 140.622 li
428.189 139.962 li
428.534 139.3 li
428.87 138.638 li
429.198 137.974 li
429.518 137.309 li
429.829 136.643 li
430.131 135.976 li
430.426 135.309 li
430.712 134.64 li
430.99 133.97 li
431.259 133.3 li
431.52 132.628 li
431.772 131.956 li
432.016 131.283 li
432.251 130.609 li
432.478 129.936 li
432.697 129.261 li
432.907 128.585 li
433.108 127.908 li
433.3 127.231 li
433.485 126.554 li
433.661 125.876 li
433.828 125.197 li
433.987 124.518 li
434.137 123.838 li
434.279 123.158 li
434.412 122.478 li
434.537 121.797 li
434.653 121.115 li
434.76 120.434 li
434.859 119.752 li
434.949 119.069 li
435.031 118.387 li
435.104 117.704 li
435.168 117.021 li
435.224 116.338 li
435.271 115.654 li
435.31 114.971 li
435.34 114.287 li
435.362 113.604 li
435.375 112.92 li
435.378 112.236 li
clp
.498535 2.95605 mo
.498535 220.956 li
435.499 220.956 li
435.499 2.95605 li
cp
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 221.456 ]ct
[435 0 0 218 .498535 .5 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 435 
/H 218 
/M[435 0 0 -218 0 218 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 435 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 435 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 435 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 435 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
K"nk2g]6fXK"oLD\?1Cc!"[lrVQH,cm]1r?bcBM;goH%-hQ*L8QKIQ7n,S[7W92jLK"prmZ2iarK"pij
P-)I#`=MAIQ*%[#aK(,tq\ls_bH$>troSgpdH7_7K'(A@[D/HNi;gdr^V?/NK!!S*Xq17;N31:*\>u7&
j;PiQ_Q/s&mcK,`kiSZ@pu[1jhWCZL\A-2ec2b8eW5%)hJutCNl`Gc@nZ@tTbH&,ki>SGk];s$8Q0.K7
WrUf7L$&BLK"pQbRK2RPR_R._[B6d;ck!Gnd&i\;Jue%7SJpW/SZBr7\E:$Xdf?TPe)lqXm_=@grP+'e
o`1#ehS5nha/uub^CS8bW3+gTOfS$kM&Q5kJueFBP31K\W;t?HZ0&[\aM4gkf)V$8n%XRkriLdSorX5b
h%-BbcE4LT^T59kV]+?kR&bi$o&c&7g&S,7bN?=L^q[beTE+#eQ+uahMQQ[bJe.)VR]YGKV5r(GYSshd
d&X+GgZG'hjoBu5quDN7n`H"LlG&_e_>qEe]>)Fh[&qXbN">ZbKrt?TJuejNL)SS\Y,fjK[H>Nl]E"Q(
jQ;ilK"lm;b5f&ebJ1QhbH88bPn3;bQ*'JTQ)j<kJf<JaV5rIRV<6XsV#[FogZGHsgV9c'f`6U(mf8Te
n\:6ho<")b\IZib]<0/T]rT-kK,O`jKrb48LZ\L7JcO!p\)tuu[D12*YQ0jen@t@*LTUIbJe,j3]rfJ[
\?!uWZPnoDo;e.WmcKu#kl?;8f`8&7hWCZLl+`YeSH.feW5%)hZ`VRbJe-uSSZVFaP,nM]LDmB8e#U*]
aQCM)]`<Waq#HE:rkFZ3n,S%?^];9ecG-chgo[IbM@]NbR&uINo,<3!]c+nkbH&/8g#f:7LB.87Q0.ML
W5%'eJcNso\A-n8V609iOq3fgm]EFigT.rea;TXKhAW5knZ.r;rW%NMVuYT7]B72Ld(cmeJcP6>QbWO%
R]YfbJe,C&b,rsk[B&>gTGiG$!3;KfQfdW7JcN4Zc0!43\A.(=TE'QDquE2#m]EUnedm?C`XfbbhQ<WT
p8a/kO;d_kW2n\8^uiN7JcOI(Woij6T"jpuJcMDCjM/=AaK='rX:KmnkRX8eri;`niYmCeZ5V,kcE"A8
lK4K7JcPZJT&u]\irFZ2XT6qebJ1Qhl)gBbJe.PcTWRX_Z`DFkJf;EC_lMXpV<7^<LB*23q<"X<gV:qH
\,_*\c2b8en\:p&mLOm[Qk/Mb]<0/ThQ*IkJf<SdV5sUXW92h7JcMhOf]LKA[D2=JO8sk4nc5T&Vle_b
Je+^hh6"l&\?#,"P8]#kmi&+)mcM+CaT-nm\H'e7hWCcOrW%NMJcMaagTAc'[1@j"b7D+bnZAajlPb?n
PoB(k];s$8iT?j7JcOX-W94)oYeSWeJcMPGi4mRP[B98,M@Y:Lljp5#XfL"kJf::#j/^A(\E<MIN<"P1
kl@jJm_?TQ_>o/fZ2i:ehS64qp^_reJe._hY-$HZe>obkJf;TH^8pe)Y3+gGJcLi3o]EdJaM6uSRK.p>
ec;qhriNN/cjt^=TF^(bcE4LTr2YSkJf<klYcG"jdf=t"SH.g7bN?=LrP+'eJcOd1[(l%2a/uubJe+pn
f<*o3[&`a9Jf94Zobt3<gZI5PW;qMM^Au47n`I6oh>i--L]I=e]>)Fhm]D`bJe-6>[B9G/\?!dkJf:*s
kc<"0[H<&@JcOj3[H>!6b5d+oPlU6ebJ1QhJe*GDh@I,um]4O3\/Kr;W#FEkhQ+0KmJqh=JcP<@\E;P\
i4l#eJcN=]b.mJ]\ujWrJe*JE!3Nl8aK+p5O;`]hbSn'nroUoV`W1SjQ2p=7cK;dSq>c*IJcOU,]YD+]
`t*b4OUq#bbH8FXr>L8+Jf<>]]W:J_cfVS7JcMSHhr`eX^VAq3JcLB&l2\T6gTBS>Se$D`Zk(KbnZBR,
e/EoWJf=S+^T5H<pu[J7JcNgk^ZPO1_nWteJcLl4o=rSc^od;@Je*GDfakm#^oP?kJf9Uep8cB;^ukFm
JcLB&ec<MJm_@>fXT3qQSH.fehS6t1it$_PJe-uS_l_[ol)U6kJf:j3e#W#>_rf;GJcLB&q#J=paM7_h
K`H])_#VHhriO8D]+9K(M\#TbcE5'dnJZutJf<,W`N-u?^&W`bL]I>7bN?gZo)O@BJcO-t`kUrDfr_7b
Je+:\l)igE`iJ#9Jf94Ziu5q<gZIkbQN2U;XT6r7n`Is.aoI"nJcPBBahPs"!"XYlJe,O*afYQCbcA2k
Jf9C_r2\,Dal_sjJcLB&ciD2Mb.kIeJcLE'!5H^lb,t+CJe*GDbR_jum]50EVAb%)Q5].khQ+f]g]2p+
JcO[.b3%Hnn\:4eJcM_LgV<9nbH8hrJe*GDnINgFbH(U\Jf94Z],JknroVMg[/bdYK`M,7cK<EekQ$27
JcNsocG.Z,[1@j"Je.hkcE5BmlPb?nJf;]KcE$BqiT?j7JcLr6n`J]jcbJ'3JcLB&g&TI6gTC.NNXp^P
U^u@bnZC-<`#=4GJf="pc`>CSq>c*IJcN7[cfY5AeA&0eJcLB&rW(?\dB2L@Je*GDa:H\#dAsPkJf94Z
q\mk_dH9WmJcLB&`;n<Jm_@kuScF?BNWAaehS7L@e.7-AJe-HDd]M9)poB;kJf:=$iiDUMdcS@GJcLB&
l2]8peA(YVJcLB&Z2iChriOeSX:KmnJe._he?.6$iYmCeJf;THe>q*]Y5j.SJcPQGeE5>sirFZ2JcNRd
f"^XTl)gBbJe*_Lq5rMUeuR.9Jf94Zdi-f<gZJFrLB)o+SH.g7n`JH<]E!N`JcOm4f>#q>ndg<_Je,$q
f<,%Qg8h1kJf94Zp_qbbfB1rjJcLB&_>r3MftXNeJcLB&o)RIYfra0CJe*GD]areum]5]TQPtGoLDp)k
hQ,>lblE=qJcO-tg#h&(!5F-dJcM2=lG)l(g9%mrJe*GDiXabFg8jZ\Jf94ZX;]fnroW&!V>u2JJcPHD
g?./)gAlg*JcNLbgV;LFW"4IjJe.A^gTB52hAUtaJf;6>gT0c)mcKc7JcLK)roW)"h7q&3JcLB&bQ-J6
h6$\fJe*GDQ4NAbnZCWJ[Mj`9Jf<Mbh5fAoli;V;JcMbMh<+^OiP2)eJcLB&nGqF\hQ>E@Je*GD]+<c#
hQ*IkJf94ZmMar_hWEPmJcLB&\,bCJm_A;,OoU(6JcOZBhQ=j0Je*GDb7EI3hQ-VoJf94ZPoB(knZ1O/
[/bdYJcOX-hWEe3kQ$27JcMVIiP5AojK5$bJe*GDmLS9YiN(KIJf94Z\/O>,iT?j7JcLB&lN#o+iP4"F
JcLB&[/f1#m]H,`Nt6gQJe.hkiN;(>`>X=HJf;]KiN(r"qZ)3JJcLr6n`KB(j1heuJcLB&f`:'Ij/qGS
Je*GDUCZCeri>1^SJm(uJf<toj/_5&df=t"JcN4Zj6#F;T)aHCJcP!7jM0cXeIR6BJe,-tjK7jNpT'5k
Jf94Zq\nOrjQ=;ZJcLB&`;nu]jhLNiJcLB&NWAaen\=1fXq-*pJe-HDjfRXFj;NUgJf:=$jfACCkiS?7
JcLB&l2]r.k.f7CJcLB&ZN0.&k,k0bJe*GDjq$UVk,ZrLJf94ZYSuZ)mcO?-M?&5.JcPTHk2tjA^Aric
JcNXfkJ-2^oacWbJe*eNpT<tfkGt[&Jf94ZeJdVOkN:b(JcLB&T)e':rkIg7QN2U;JcOp5l+cJbbn#C:
Je,'rl)j3NRMpbrJf<Yfl)X(2ciAXtJcMnQl/qEKr4e!eJcLB&p&O?ll)hW0Je*GD^^o\3l)XCoJf94Z
MAl;knZ1p:WW7VNJcO7"l/q9GhZ/6.JcM;@lG*>#mB)ZbJe*GDjU^XYlDr,IJf94ZY8Z],lK4K7JcLB&
iW/9+lbC^FJcLB&WrVJ#m]HJjKb&bGJe.Jal`KKR],H8>Jf;?Al`9@6nGn.@JcLT,qr[G2m(]FuJcLB&
ciEFIm&f(SJe*GDRLeberi>LgPT#,lJf<Yfm&TL8aoI"nJcMnQm,m]MQ2lL:JcO[.mD&%jbR]:9Je+gk
mB,fW!3:_jJf94Znf$nrmH1qZJcLB&]E%?]m_A/iJcLB&K`M+en\=LoV%8.gJe--;m]GoXgDYY^Jf:!p
m]6?Ln`Gu7JcLB&i;i<.n%ZmCJcLB&WW;M&n#_fbJe*GDh%/tVn#OSLJf94ZV],$)n)aTMJcLB&JcP9?
n)j,S[K(mZJcN=]nA"Ipljn[YJe*JE!3Pdnn>i<&Jf94ZbSouOnE/C(JcLB&Q2pF:rkJ'>O8sk4JcO[.
nA"Ip`XdY3Je+gkn?)2\P8]#kJf<D_n>l'@aT-nmJcMYJnE08UrW%NMJcLB&mJudlnZB20Je*GD\.A,3
nZ1soJf94ZJf=0[n`HPGJcLB&b5h(po=riVJcLB&P5t3hriPmrN=UUOJe-WIo<%Vb_]"+FJf:L)o;hKF
O8sk4JcOI(oB,YZ`W1SjJcMPGo=sn!r""AiJe*GDljr]io;f29Jf94Z[Mnb<oB,9;JcLB&JcPfNoB,\[
T)aHCJcNjloY:%#eIR6BJe+"ToWA+npT'5kJf94ZgD]^bo]F!jJcLB&V#^/MotQLeJcLB&f)YKYorZ.C
Je*GDTb$guorIp-Jf94ZJf<nmorIcJYlK@UJcN.Xp#bq^k5^)6JcLB&r;cN*orXerJe*GD`t.jForHR\
Jf94ZOW*nnroX"<MZA>/JcOL)p#bt_^]8rdJcMPGp:p='N=UUOJe-ECp9"%h_]"+FJf::#p8doLq#H!H
JcLB&klCG>p:mg3JcLB&ZN0^6p9!HfJe*GDJe.bip9"%hSJm(uJf;WIp8doLdf=t"JcLl4p?)@hqS.je
JcLB&fDtZ\pT;1@Je*GDU(@"#pT'5kJf94ZeJe1_pZB<mJcLB&T)eWJpqQP'JcLB&JcOs6pqQU+Xq-*p
Je,*spoX=lj;NUgJf94ZqAT.0pu\%GJcLB&_uTSppqP2VJcLB&NWAjhriQ("L_#(JJe-HDpoX=l^)DSA
Jf:=$poF2PMZA>/JcO:#pu_Ce^]8rdJcM>Aq7la-p()`cJe*GDjq%9iq5^V9Jf94ZYT!><q<$];JcLB&
JcPTHq<%LfRK.p>JcN[gq7la-cjt^=Je*hOq5sXsr2YSkJf94Zef+@bq<#?jJcLB&TE+fMqS.jeJcLB&
dK'-YqQ7LCJe*GDS.GIuqQ'9-Jf94ZJf<_hqQ'JTX8mhPJcMtSqW@[ii;eH0JcLB&pAk**qlQ4rJe*GD
_%6FFqlA!\Jf94ZM]2JnroX4BK`H])JcO:#qr[dj])[E_JcMABqnN$1L_#(JJe-6>qlTar^)DSAJf:*s
qlBVVoDjICJcLB&j8f)>qnK03JcLB&XoS@6qlSffJe*GDJe.SdqlTarQl:PpJf;HDqlBVVc2`FrJcL]/
qr[mms1a3eJcLB&dfB<\r2mO@Je*GDSIbY#r2YSkJf94Zcl2h_r8tZmJcLB&RK39Jr4hh'JcLB&JcOg2
r4i03WXj[lJe+sor2omti#71cJf94Zp)<k0r8s=GJcLB&^]=;prP-PVJcLB&M#dLhriH1&K+EPEJe-9?
rN6%!\Jg&<Jf:-trN#nZL&cf*JcO*srT='n]E!N`JcM2=rP/<5ndg<_Je*GDiXc!irMun9Jf94ZX;_&<
rT;u;JcLB&JcPHDrT='nQ2lL:JcNOcrP/<5bR]:9Je*\KrN6("!3:_jJf94ZdMi(brT:WjJcLB&S,iNM
rkF-eJcLB&c2djYriNdCJe*GDQk01uri>Q-Jf94ZJf<Sdri?%\VuVDLJcMhOroX3ph>i--JcLB&oDnm*
riMFrJe*GD^(:4Fri=3\Jf94ZL`68nroSe4JcLB&d/a1.s1c#CJcLB&RK3B&s/gqbJe*GDbn'iVs/W^L
Jf94ZQQ#n)s5reNJcLB&JcO^/s5s?rVZ;;KJcMeNs1eT9h%,)JJe*GDo+1l's/VA&Jf94Z]c-pOs5qH(
JcLB&LB%J>k.eY2JcLB&JcO-ts1eT9[h"'$Je+:\s/l=%KGoF\Jf;lPs/Z1^\c@<^JcM,;!p8X[mf7q>
JcLB&hZ*\lXelV\%tY=k%frf5g_tb_Jf94ZneqP0k*#ds!.k3`!!25saT-nmJcLN*"2CrK%tY=D%tY><
%frf5[Mj`9Jf:$q!36+^K)gK'JcO!p!Tq/-!.k3&!1!Tc^THr8Je*GDJe-`L!NiE")M/lZ)Q=VUX6/1;
JcLB&JcP?A!Tq.\!.k3&!5&:4^TGTgJe*GDL(=BgWu;n.)M/lZ)UB<&X6-hjJcLB&R/d6L!5F-dJcLB&
bQ%[YXgnso%tY=X%frf5mi$crJf94Zh\lNrk,&-1!.k3M!!25sg]2p+JcLB&nc/^*Xcj9I%tY>)%frf5
aVoaLJf9@^"0:Pa!.k3&!.k3s!!25s[K(mZJcM2=!5AN9K+EPEJe-'9!NiE5)M/lZ)O;9BX6/jNJcLB&
JcO[.!Tq.o!.k3&!3#r!^TH9%Je*GDJe.D_!NiDd)M/lZ)S?shX6.M(JcLB&L&_59rW%NMJcLB&c2b6_
Je*GDQk+ceJf94Zb8RkjJcLB&JcLB&JcLB&h>jA_Je*GDW"7W$Jf94ZJf=.tOoU(6JcLB&JcLB&K`M)_
Je*GDJe--;[2OW8Jf:!pJcLB&JcLB&JcLB&PlU4_Je*GDJe-]KV&Fq(Jf:R+gAlg*JcLB&JcLB&JcNC_
a:Ek5Je*PGrYgA,Jf94Zc5O(jJcLB&QiM^<JcLB&b5f$_Je*GDPn3:$Jf94ZJf<JaV#Z)IJcLB&JcLB&
JcP<@Oq3-TJe,I(a;TXKJf9=]rW%NMJcLB&JcLB&JcM/<Je*GDJe-$8\/Kr;Jf9mmmJqh=JcLB&JcLB&
JcM_LgCJlHJe*GDnILd$Jf94Z],J`jJcLB&JcLB&JcLB&c2b6_Je*GDQk+ceJf94Zb8RkjJcLB&JcLB&
JcLB&h>jA_Je*GDW"7W$Jf94ZJf=.tOoU(6JcLB&JcLB&K`M)_Je*GDJe--;[2OW8Jf:!pJcLB&JcNso
!5H&EJcLB&Q2gs#XmZdP%tY=D&)RluXfJ<;Jf94ZW>Yf<k1frg!.k3&!:g*jk.d)[JcLB&]DquIXiV**
%tY=H%g/r7)B+2GJf94ZcPchbk-b8A!.k3=!!)-]^OlN<!.k3p!!0j:\IX9&Je+.X!NiEk)M/lZ)M/mb
)?Ho$V>u2JJcMbM!Tq/P!.k3&!.k4A!!0j:P7N6UJe,L)!NiEE)M/lZ)MT.4X6'B^JcLB&JcO*s!Tq/*
!.k3&!1<fe^AtBg%tY=D&'PObXfJuNJf94ZQ5Te)k3i;%!.k3&!8dbWk.dbnJcLB&W;lt6XkXG=%tY=D
&+U53XfIX(Jf94Z]G^gOk/dUT!.k3*!!DAu!!%TNJcLB&cN"!\XgSal%tY=[%fi^3X+M=B)M/mO)?Ho$
\H%3]JcM):!Tq/c!.k3&!.k4.!!0j:V@S7hJe+gk!NiEX)M/lZ)M/mu)?Ho$P5p17JcNF`!p784aoI"n
JcLQ+"M_^RXUg!oJe*GDck$/Ys/WUIJf94ZRMu4,s5nt7JcLB&blIe+s1c,FJcLB&QN7'#s/kc$Je*GD
Je-cMs/l=%V](.*Jf:X-s/Z1^h#N$,JcLB&o)SgQs1acuJcLB&]`A)Is/jESJe*GDLCXNiXfJK@Jf94Z
Jf;uSs/Z1^[fD![JcM5>s5s<qK`H])JcO'rrkJH7]+9K(Je+4ZriQ1#nJZutJf94Zi>V]rroU-ZJcLB&
WrW.]rkI:iJcLB&JcPECrkJH7Pn/HWJe,R+riQ1#b8PsNJf9F`ri?%\JcLB&JcO0uroX0o\H%3]JcM;@
rP/<5L(AkHJe-0<rN6%!]GcA?Jf:$qrN#nZnc47AJcLB&iW/r>rP,<3JcLB&X8r46rN4rfJe*GDJe.Mb
rN6%!Q5Y>nJf;BBrN#nZbQ*4pJcLW-rT=*o!5F-dJcLB&dK'6\rN3U@Je*GDS.GS#rMtYkJf94ZcPlb_
rT:`mJcLB&R/m3Jr4hh'JcLB&JcOg2r4i03WXj[lJe+sor2omti#71cJf94Zp)<k0r8s=GJcLB&^]=;p
r4gJVJcLB&M?*RhriQ4&KF`YFJe-<@r2omt\f-/=Jf:0ur2]bXLB)o+JcO-tr9!mk^&W`bJcM8?qnN$1
oFHNaJe*GDj:D-iql?b9Jf94ZXr@2<qrZi;JcLB&JcPNFqr[djQiM^<JcNUeqnN$1c4>L;Je*bMqlTju
ri:_kJf94Ze/J4bqrYKjJcLB&ScJZMqnIpeJcLB&d/a'YqlRRCJe*GDRh,CuqlB?-Jf94ZJf<\gqlBVV
WrR_OJcMqRqr[aiiW+Q1JcLB&p]10*qQ6.rJe*GD_@QLFqQ%p\Jf94ZN#MPnroX1AL&cf*JcO=$qW@Ug
]`<WaJcMGDq7la-M@Y:LJe-<@q5sIn^`%eCJf:0uq5a>Rp&K[EJcLB&joG5>q7j$3JcLB&YQ4L6q5rZf
Je*GDJe.Yfq5sInRMpbrJf;NFq5a>RciAXtJcLc1q<%[kqnIpeJcLB&f)YT\poV7@Je*GDTb$q#poB;k
Jf94Ze/J+_pu]BmJcLB&ScJQJpqQP'JcLB&JcOs6pqQU+Xq-*pJe,*spoX=lj;NUgJf94ZqAT.0pu\%G
JcLB&_uTSppV5,VJcLB&Nr\phriQ%!M%>1KJe-KEpT=1j^D_\BJf:@%pT+&NMu\G0JcO=$pZD1a_Z58g
JcMGDp:p='q%&&fJe*GDkn!Kip8bD9Jf94ZZPrP<p?(K;JcLB&JcP]Kp?)(`SH+6AJcNdjp:p='dgq$@
Je*qRp9"=pq5]AkJf94Zfc'Rbp?'-jJcLB&UB(#MotQLeJcLB&f)YKYorZ.CJe*GDTb$guorIp-Jf94Z
Jf<nmorIcJYlK@UJcN.Xp#bq^k5^)6JcLB&r;cN*orXerJe*GD`t.jForHR\Jf94ZOW*nnroX"<MZA>/
JcOL)p#bn]_>o/fJcMVIoY:%#Nt6gQJe-KEoW@bd`>X=HJf:@%oW.WHqZ)3JJcLB&lN$S>o=qU3JcLB&
[K,p6o<%6fJe*GDJe.klo<%VbTGiD#Jf;`Lo;hKFec::%JcLu7oB-%ep:lReJcLB&g]6r\o<#n@Je*GD
V@W:#o;drkJf94Zfc'I_oB+$mJcLB&UB'oJn\>&'JcLB&JcP3=n\=Ur[1@j"Je,@%nZD>^lPb?nJf94Z
nZ23BU&]cFJcNson`K>Uf`6U(JcM):nA"t)o<")bJe*GDh[f4Yn>jPIJf94ZW>b9,nE,o7JcLB&g]6j+
nA!'FJcLB&V?$,#n?)^$Je*GDJe.;\n?)2\[Mj`9Jf;0<n>l'@li;V;JcLE'!9Wh6n%YXuJcLB&blI4I
n#b:SJe*GDQOiPeri>UjOW&fiJf<Pcn#Pp>`rL\kJcMeNn)j&QPlQC9JcOX-m_A1lb7B18Je+djm]GoX
Jf94ZJf=.tm]5d<\,_*\JcNC_mcNoOmf7q>JcLN*rP.m;mB*W(!#,;ArY,8AJe*GDcO]EFmAo"\ef"N1
r>PYW[2OW8R2YInroW_4P5p17JcOd1mH3cMaoI"nJcMnQm(_nhZ4HjHr=o;Gn.1*]Je-cMm&fWTbo5^_
r#bka!$A*WJf:X-m&TR:s5nt7JcLB&o)S.>lbC%3JcLB&^&[K6l`K[f_@QVZ!#>GM!YlF`bR]:9L_'Bb
nZD,XZ5W]a!%.Xqs!@^fK,T=[d2M>OlfR%(JcLB&RfMd:rkIj8YlFb)k5^)6JcOm4lG)VdbRa+Pr=f/F
!Z;q#r$;Ih*uPq2rY)@DJe,$qlE0?P\JkDgr[%[t0g,A""?\Rn/11?<p_n`&Jf<VelDs44cN&OsJcMkP
lK7NLr4fT=!!2`m!!2'ZJcLB&p&O?ll)hW0rt#)BrY5PR)]p4Rr@S"!"sG'-'bqAqSI^;_^^o\3l)XCo
aVt.#r[%b!0fD-frD<Je#!=du-70fVdi*fVMAl;knZ1p:WW7VNJcO7"l/q6FhuM@/!!2Ti!!0e6JcM>A
l+d5"m&dl1$kj9h)&XA8+X\j!3B@!p#;@YS*uc(4(&&5j%tY>S&*^4\X3DRO)@R]0-7g]&2EXK+?XmUD
?O'V*5rLGK-75l6Jf:j3l)X(2RK.p>JcOg2l/q0DdK%\q!!0A*JcMtSkJ-GeqQ7FA*>9/&+X\s"3CHVK
@:!):=^537<E2@G.jZ>X)&!P['CHB_%tY>e&*L(XX1oPp)B'\E-9Oe!>%;`.S=c=:Od2<$Q'%2K@n]0N
0e=CbrZ@sTJf;KEkH!e.o`0RDJcL`0pZD#.k.e"uJcLB&ec=jIk,mYSh%(M>'c@l4,rIbP;d=?gH$F@P
G^+@KCKXCi0In:g(&S`e%tY=b&*C"nX6H\")BBnH/1`nL?YO\CR'O?9\$EEN\$`EAQ%NFE9KY3[r#bqW
Jf94Zko/]bk2t"jJcLB&ZN0.MjhJM0!!20]!W`9$JcLB&k5aVYjfR#CmLLKT',_`2+XJg+:2"p9TVf*+
]thFmZ)a"<A6DP_0HhMW'c$]]]+9K(Yn,rum]6,`_&=L>+"T-)4@*"cK;uQ3gu%>[l0I[!k2Ob(UQp@:
<]i8p-78^6nJZutJf=J(jf@M*_#T&eJcN^hjlYX=p]/A8!!2*[!!1gSJcLi3oY9q2jK66/&JH$$+!i9g
6;VQKTWu5VeD&gnhqQc1^p8uJBM1N@-RBiR)&X/&Q4JQXfFR&FjK%A\h&7R]/29%K7ojVeYJ8lTlg!]q
jPo:alKdWX]rHU#:e*f00e=k&+3YXT)PS/2X8_8Ek*uF'!.k4:!9E;&^XE2N!!!&X!!!&0!.k3Z!9:iS
XhkSl',;H.-S%2F<HWqg\BF($p%nR^q=Ee.^oNW3=Z\Jm,p`^<*ubq.'8R0N&*XVbXlHJ5)XSFj+!r^#
7ndE9OgW*^l0I3[ccX;Nb0f)*lf-?mQ"aT%5s[Uk0d[ta^)DSAZPql)mcO6*N<"P1JcP]Kj6#=8`;oi:
!!2`m#7_Ic)&Eti!V69k!NH-O!6>0!^Yu<l&'5=k',;H60Kr6<K9`aXdJ!A8&cM7Y[$ti9:d-lq0J+Fe
)&!\D%tY=T&+QdlXl6=u)A!u;0h58^K:Kj-kNhEX^oj^:W>)GB]>N+Wkgur(MJcp-<_tn5/0>t&)M/m^
)W@aUk3)fi!!**%rW<-%]E!N`V#]K:rkIO/ZiC@M-RgPq,8(1]o`0RDJcP3=iP4?ReIV*Z%20Ho.l0[o
@>:Ahbh2X`rt,2-f"dDqDH0Fq4#JN7*uPg,%tY>%&)jYLX2>hf+!rO4>'l7$`S'SCjitT<US[sc$`p\J
_8YU'd(QWFK*Q:.?VEaD/1-5mJf<qniN(r"fDs_-"p>5?$k!:AXT3qQ[/f1Jm_A;,\,Zp<+>>oF6pipf
+<2-tkQ$27JcOZBhQ=j0%hB0a'cA;O6r73=P.oE*rUg+#ps?aXMgf8H=\Ch4+WhF4Y7H3qb7EI3hQ-Vo
aVlWN-7hG`G)Dg)dd-,U_7c\B[*?n:XeqqlWkHXAlfH:(VOs-(Bj*VW-6M=fJf9mmm]5lYhWD9I!<s/B
-q$Kg*teb\!fI&1!8[_4k2*l=!6tQR"!TH^9N>"]69$bU(';ARJcM_LhS9&liN:*1%20Ho,qVGV<H<i"
al!'prrN)tqYpfbfZC4aI!BZ:AlV5F+W2".M@Y:LnIOKYhQ,9Imi!\u-7hGZEIa1W`TQRH_7?A>[dj:q
fu:(lV5h)]jm1sY]sk;EO`j#Q/1)IS)M/m>)W%OOk-k<u"r&M!K7-TX*u5IjqZ)3JJcP3=hWEY/g]612
%0In45#GsF@8fZb67j/K!!!&9!.k3]!8YEXXmiI5%h00e)'pju7o3`AW4LLWr;Ql_cLCi2rt,.uj2STr
Mhun*?8ElH'bqDY%tY=E%fi`gXkg&")D2pH+!rO):i:W;UV#ILkejp*W4DfT\_mGBcc)]W`RNl4l.*qt
^U9S85qs]5+0c`9)U',UX52q<!4i.=#Seq8UVWCI<(K%\"P*R)!1!WPk4.Tg^W$6R!VHEm$k4:=5tFpM
8Ol073$/V3O8sk4i;hWIgTBlSgCF`,'cS;M3C6kWI#FTDk55/YrqQL'oAn!%U6:Ok?:ujt*u,I>%tY=m
&)45cX59nu)Bp7M0g&KHEL!00b1Z(;^TOE:^to%fin2PkXei22dGO9Rg^2ER`LMHT7lD\9N#I9doGZJb
gZI5jhZ+)d"X#^)I</Ug75Q(i!O;]W!58Hfk1[Si!!!&m!"T>c2EaZ'7n5s54tS#t!!%TNJcP?Ag:u@D
h[eu_%MK^!.kit[>]P4H\'FRDo)B3shTi^*R#uDt4"r#s'beRtJe,L)g9'eDmAn;H/0?Dt9NGY\R'OEE
kj$R2Z_XS0jl,"IcG6udUoD,LjQc$ce^1UoBi[_N-6N.(Jf9@^rN"eUg?-TZmJm[s$lLU&=]A0c2D#FE
"/>jJ!7(Z!k1dZN^UX=R)^d@)6UaI45s@(U,6lj%JcM5>l+cc'fr`=+%2Ba,/Mfdi@;C.X\)HlXrpp(!
leTddU6U";90P-T)&3gY%tY>P&)")<X7.%\)D!3d5u:a.K:f9XfBD5A^o!m']Z8@JcG-ogUSP63g>hMZ
gsWg7J8SOQ/1)Ij)M/m0)VM1jk1o+0!"8u:&huUA9gplj'b(EG!.k3&!;6EGk1@B*!8IP`"r8F52EX8k
4Z5&I+;2'^JcNXff>#q>aq#!r',_rD2*43$=`T/(akm$grt#,&lH[,HL2pU#:,smJ)&8;FJe.Mbf<*Z*
iYq&"/KZ&c4A9*rG(Z'c_s$FI_6^/;Uoh#>^UL>CV5:90c._IKji+NqOb7.?2Cp2r)M/mB)V;%Xk3D*>
!"8o6$QLQQ1b9U\%gE+'!.k3-!;bj7k17;o!;QTp!V6:"%N6iR3^>hg1G'[b!qZHm!OMiY!7Lr!^Y>mg
Xi_.b',;H0/MfIT:1eXF\B*q1oD]@#ptjB5R"8[K:,t!M)]9=U%tY=_&*C"aXk'Pq)@R]70g&99BlSd&
[GU3kleKXuY,8"nY._<JW26>i]>;_PlKd!:T9Y%=<]2Z`+/9a+)WhshX4HG)!65'I!<`fG+u1\l((UQN
a8gelYQ38:rkI("\Gu^7&KEM(2?br^(Bad>JcLB&qZ,-\e?.^@l44I?',;T8/MJtU>^V[2_p$]qq"4Rt
p?CDHW-DiQ3A;a$)&3l"'?Lc:&&f(/XjjDp)AO>9-8n.d<a(-C^!P[&lf[-K\?)R)ri6+#Uo>$9]>2\H
j6>L2UQK%e5rL8@-6F=q)M/n&)Uth;k2cTm!!30(')idN(^:)P!.k3f!7^0!^ZE5P!!!&j!!rZ9(a^ae
,o[$hn,S%?NWAaehS7L@e.;<b&JH$$-S$l;:1ed0Y._p2j8&]Krt#,#khE\MMg/o.3@cBt)&`De\dsB'
f+6<3gT1+Mb8MlQ/29Xg<cNbh]?97"lfI*J_S*+OUSOc^VR*nNdGF!Mj3"j2J7D8=2CpEY+7L2#)PJ)/
X7<7=k.q&m!!WH+#Rh=O"Hib:!9sR4k0^s=!5JR="r&.+*XW#?!!!&R!.k3Y!7AR\XjjJr%hfZm+!iEt
6s4,HP,5P2fAu5drVlZn!<*T"jOh&BP)4Qk9/%kB*ubq.'9j#Z&,m*eXjO32)Wr"j-71W:9Oi72VRP"2
kj%?gg=4*XZ`L!uV6RSHeDKBQi6o][R"/425rLGE+!8WDJf;]KdAt[W[K$C2"UG83!J:B(!;ccDk0Lg-
!8mhW!S[SS!QtIp!65)c^[A5`Xj%@m',))u)^R!l4%*=cFdT5Fa33&fj65t1rVmDukM*hYQ&^]HAjS:*
,p=3/)&3g=&!7CnXkp2+X4J9a)AaJ;-7gl;9ODLWR&7:Aip5sskN1[Zf"q=#'%>_!m,ugAaLe<h>#7LI
0e=Xn],H8>g)A;<gZJ1kNW=Y2U]B<7n`J-3`;n`p!!/qsJcP3=cG.Z,q[_-d/e\m5)':"L/MKLa;g!hl
Y.)<idFQt,iTp(1n`S`J\<r;5IX"dT0InFk)]9;&h[b;L\.?leri=GIbo.KB+!rNs4@`4KEIa%V`S]e@
lg*j!jlGFTdE3-OhW*qde]l1M[uG9+9L1Qk/0>t")M/mQX3Tkk!.k3&!6YAfk0(NL!:Bge!L<_;!6`.#
XmQ_Y%kSG.'cA):+X\it5"fL1IZB\fW3!MB_oL!Pf$;":Ru)E.BN\(o.jZ8V)&3eucjt^=b7Ddum]53F
c5J)Q+!rNs4?Q,1>&Jkf[D0u7gu.5Wl0I^%kND-rkh!nfYH!k?DG3>S">MGS+!67VPoB(khQ+i^gAlg*
JcOX-bN@QonA!*G!!17CJcMbMg;!0mb,rr"";;F`)&jhC,pt2s2+pqXDKpejOe/DS\%9;h]s=`)L3[<9
:eNu(-Qa3@rY):BJe.D_b,rgeru06&.3BWY/29%K7ncrjJ<?J-\&6;6g#(rUlKdd#kMt"0];(mRJ8S1R
2Cp3S+5e&h)S@!2X8_8+k-b8A!/:LPk0E,2^[2$X!!!&W!!!&A!.k3t!6N!tXj.Fj',))u)]p4L/MK@Y
:gR[MFa8Ur'U>/^VPpPmV43KoA6r#$4tnK1)]APeS.C8`s/jJHafFnLh\mmb+!rNn2EX9%<c38AS>39q
]>M_<fA,9AinrYFc+g$DK6qK:9KY$\r#a?*Jf;lPafFjlgubL7JcM,;m,m0e`kUF3lMpncR/hg=irI*6
gTBhEcOVE;',;B&)^-R_2*4<$:/4Vg>[_5XDK9lEI"R9.DIH:.4"Vs/+WhR:q\/`8Je+soeueJE`iIE(
ruWR7/1`M<7oiu2H[pa$MNsR$VQ-i*[C<ieaMY3RK6Cs*9L1d!/1169Y8W!2p):rOaQENbKE-T(^];C:
rkHOhaoDDBo)O@BMZEOecG.?#nIOLf.MEI1'c@r4,qCQ)3C6,(928Dc>\%AWAnYstEb&<C69-PD,p=?J
'bqAqcOYU<e.9O#`N.<'&0Du@-7gl05tk*^@rZ[=J:e`!OdMo=VP^AqYHjpgHZ<Oh7mT6q/1)\c+.O7*
)Z-SYX2X5n!.k3&!7:eck3g"8^T@Kf!1a,P^YZ`CXlBr[%i#`k'bqT(+!2XR.kihB6:+(193#,"rE0Y2
:eNu41Fjgr+!2@<'b_7q%tY>S&&YO(X6H\3)AO>9-718p2E!Zf9NGM7EH-/KJ<?+arKRnUML]SS>"hFK
2E!*;-6F?&)M/m3)UkbWX2F)H!.k3&!;QW4k/b=5^WHQV!Tj@^!T*m/!6,#S^](@QXj7Lf',))q)&jM:
+XJWm2*!Z!4$GhprB:ZW69@%\/M/=r+WhX@(&el9&!.=nXj4&aX7dIc)A4,6-718u0fD-[9NGM1@qfgu
EW'baEH,]">#8$c5s.%[/11?<d2ITTfc%Z,^uiN7JcLc1p?'Q\^VBUFcN*tGkPtS`ciAXtf)WS#m]Fp>
bmt0q',;B&)]KqH.kNRU2>o<92*!ZS1G(1/"tM&E*ubq0rY(5$Tb$.bhQ=Pnk8NM%$QgH;/1`M14@)Y;
>5_h,=q4nL@p`D9:eXPQ4>no@-N5+()M/mm)S`?-k2k`s!.k3X!70ftk.JI\!:^$h!L!M8!!!#3^W<PM
Xj.IV'+#Bg)&XA8,qCZ'qCMe".jlYB+U05=+WhR:(&em/%tY>7&%o%DX1t^\)ZCf_-718p0fD<!9NG3j
:]jBb7m[,:#!kO;2Cp1%rZ@[LPT'"kcE"V?q>c*IJcOU,]]Qf?aT)AB!!.cRP5t*ebJ1Wjrt!Ed#SRjd
'c@l.+XR+<r[.q$.jlVh+X%s++U0#+)&3l"'@m\G&)7],XmW77X3DOg+!2gV/1`M<62jRW7gD^]7mTF'
4?!.#"u\"`-70fVN>eZ4h5fD5]&r>ZJcLB&mf9r]gV;U[a8l5@mf3=go)O@B])]pen\;T9gCNld#SRjd
'c@r0+!LJ,qB6+d*uc(8'bqAqYRcEuriNf7aK+j3bo-j0+!r<c0ekRKqEas?#W=Rq/1`+p+!9V`Jf;oQ
\?#Vk]B707JcM/<lfQLT[D0]]rW2osrrN#t!!1=EJcOj3[D0,Oc4BmfrY>GNrYtbWru:kX!#tnPrY(q8
Qk/MbbH8:Tri=<_rZD+ds"+.(r&4R0r&+O0r[.Udef',Yi>T,)mcMUQ])[E_WrUf7hWD2[nc7&;p&Vi,
JcPHD[(k@tg9&U1rtGDIqAJuG!>uXO'DN)i&&/XnXmrO#X5=ia)ZLoZ-Mf:e0``gPrZA<^M&Q5k];s$8
mH0]7JcO4![-%A&ZbOieJcMGDj1imS[B9A/bn'ad!Yl@^rY>GNp_EcAdgq$@kmt##YcH4kq\oDT![]!2
r[.Xrpa5t^TGj@>k,Z\+\E<VLM?&5.joDXJm_?TQ_>o/fZ2i:ehS64qp^bmcq@icArY,;Hr=d'ZJe._h
Y-$HZe>pe3qB,V^rZD.er?(hRJf;TH^8pe)Y3+gGJcLi3o]EdJaM6lPSH+6Af`8.hriNE,dgu']o+RZ*
UCZ:bcE4LTq5_LRo,lF"Jf<toXfJSdec::%TE+$7bN?=Ln\:4eJcP3=W5%c&]<0-bq@EQ=N"<E/bH9X'
W2on9`#AUs_A\"EW2n\8cK;M7JcNso\E<>DVn_QuJcM):mD$9JaK=C&_@QPXk7<.Th[cWeri<'"fc',o
r#_LKW>aKkcE"A8oB),7JcP?AVrjhjh>i--VuYSebJ1Qhm]F>:rY*loJe.A^V600d\?!dkp_s,RNZ,MJ
aK+0uV<3@0K`M,7W92jL`kT1eJcO7"YeT_CTWRerJe+C_k,l7taK+!pWZ$I-jr0nnroU!<huJ?/YQ3/7
cK;OLlG&_eJcPZJT"gl!jUZqRY7K-bbH8:TkGt*kJf=D&Su_;AZ0'I7JcNXf_<0V:V8)`=N<#%?o=q6=
gTA8n_[h>0fak*bnZA7\q&4i'UDi'k];s$8e)mk7JcP-;RcaUaR_S(eJcN=]b.l6:[B8JkTFZYc!3MWj
Q`KHkJf;'9c)]$g\E;`3UB#lGrrADJm_>^8gAlg*b5f&ehS5nhnZ@rbPn3;bW3+gT];s!kJf<JaV5s-e
Q0/&GJcM_LgZH-1aM5j3\c@<^p&L2hriMBdn.1*]^^n>bcE4LTgoI=kMAl;kR&c>2o)O@B]`?(7bN?=L
f"\<eM?*IeQ+uahTWR5bJe-<@YcZcaV5rj]RMq_8k,YG]gZGj)ciAXtjoCt7n`H"Lp:lRe[K+Re]>)Fh
^obKbJe.klLTUQVMQ?OkJf;`L\uX,W[H>s#YQ0jenE-,#KYRNeJcNmm]"cG'\?4#X[L\Q4n?%tXm]2\T
ll(Hog`!)khQ*L8i9$d7V?#H7W92jLW5%'eJcP<@P/$P%P-+8VOq5/8aK<(VaK)qRa;TaNri:aRroSps
rW%NMc2b97cK;OLa1o7eT)dreR(n6TqQ5SbdLWUbbH8:T`2gWkS/URkQ)j?8Nop!7JcOm4T'"nlV8(Ko
YQ2!0d(cNogT@$Kjq!%Sr""RbnZ@tTk,Y$k`YuOk];s$8YiaC7O9"n7L$&BLK"punNW@l8VSCEk[B73G
`"/aVgoZsGJueICOW)plWN44C\E:Hd`rMn8hr^3dm_=@grP+'eo`1#ehS5nha/uub^CS8bW3+gTOfS$k
M&Q5kJueFBP31K\W;t?HZ0&[\aM4C_irG_Pj1g;_riLdSl)gBbkms5bcE4LTZ`DFkZPq2kR&bi$k2r37
joCt7bN?=LV8(je])]peQ+uahK!"ICQk01uK!!n3V5q,,b8SYE[B$7,gZF+MQiQI7K')UcP/"uN^&[<r
SA2\NaK:N*oFJ2;d]J5*ri:XOfW2%kqAP3kcE"A8U?:D7_uRR7R-'"8cG-aerW%YebJ1QhR'#Zba:Gnb
Q*'JTJudk2Z5W86Judb/V<4i@fDsY+W91&@gV8?ThnRqHahNGBn\:6hWNFqds/gmT]<0/TJueICg`!W%
Krb48K''`.g]6^'K'(A@J,~>

%%EndBinary
grestore
np
grestore
108.271 0 mo
107.191 0 li
0 0 0 1 cmyk
ef
194.911 0 mo
193.831 0 li
ef
gsave
435.378 112.236 mo
435.375 111.552 li
435.362 110.869 li
435.34 110.185 li
435.31 109.501 li
435.271 108.817 li
435.224 108.134 li
435.168 107.451 li
435.104 106.768 li
435.031 106.085 li
434.949 105.403 li
434.859 104.72 li
434.76 104.038 li
434.653 103.356 li
434.537 102.675 li
434.412 101.994 li
434.279 101.314 li
434.137 100.634 li
433.987 99.9541 li
433.828 99.2749 li
433.661 98.5962 li
433.485 97.918 li
433.3 97.2407 li
433.108 96.5635 li
432.907 95.8872 li
432.697 95.2114 li
432.478 94.5366 li
432.251 93.8623 li
432.016 93.1885 li
431.772 92.5156 li
431.52 91.8438 li
431.259 91.1724 li
430.99 90.502 li
430.712 89.8325 li
430.426 89.1641 li
430.131 88.4961 li
429.829 87.8291 li
429.518 87.1636 li
429.198 86.4985 li
428.87 85.835 li
428.534 85.1719 li
428.189 84.5103 li
427.836 83.8496 li
427.475 83.1899 li
427.106 82.5317 li
426.728 81.8745 li
426.342 81.2188 li
425.948 80.564 li
425.545 79.9102 li
425.134 79.2583 li
424.715 78.6074 li
424.289 77.9575 li
423.853 77.3096 li
423.41 76.6626 li
422.958 76.0171 li
422.499 75.373 li
422.031 74.7305 li
421.555 74.0894 li
421.071 73.4497 li
420.579 72.812 li
420.079 72.1753 li
419.571 71.5405 li
419.055 70.9072 li
418.532 70.2754 li
418 69.6455 li
417.459 69.0176 li
416.913 68.3906 li
416.357 67.7656 li
415.793 67.1426 li
415.222 66.5215 li
414.643 65.9019 li
414.057 65.2842 li
413.462 64.6685 li
412.86 64.0547 li
412.25 63.4424 li
411.632 62.8325 li
411.007 62.2246 li
410.375 61.6182 li
409.734 61.0142 li
409.085 60.4121 li
408.43 59.812 li
407.767 59.2139 li
407.096 58.6182 li
406.418 58.0239 li
405.733 57.4326 li
405.04 56.8428 li
404.338 56.2559 li
403.631 55.6709 li
402.916 55.0879 li
402.193 54.5073 li
401.463 53.9292 li
400.726 53.353 li
399.982 52.7793 li
399.231 52.208 li
398.472 51.6392 li
397.707 51.0728 li
396.933 50.5083 li
396.153 49.9468 li
395.366 49.3877 li
394.572 48.8311 li
393.771 48.2769 li
392.963 47.7251 li
392.148 47.1758 li
391.327 46.6294 li
390.498 46.0854 li
389.662 45.5439 li
388.82 45.0054 li
387.97 44.4692 li
387.115 43.936 li
386.252 43.4053 li
385.383 42.8774 li
384.507 42.3521 li
383.625 41.8296 li
382.736 41.3101 li
381.84 40.7935 li
380.939 40.2793 li
380.031 39.7681 li
379.116 39.2598 li
378.195 38.7544 li
377.267 38.252 li
376.333 37.7524 li
375.393 37.2559 li
374.447 36.7617 li
373.495 36.2715 li
372.536 35.7837 li
371.571 35.2988 li
370.6 34.8174 li
369.624 34.3389 li
368.64 33.8633 li
367.652 33.3911 li
366.657 32.9219 li
365.657 32.4556 li
364.65 31.9927 li
363.637 31.5327 li
362.62 31.0762 li
361.596 30.623 li
360.567 30.1729 li
359.532 29.7261 li
358.491 29.2822 li
357.445 28.8418 li
356.393 28.4048 li
355.335 27.9712 li
354.273 27.5405 li
353.205 27.1138 li
352.131 26.6899 li
351.052 26.2695 li
349.968 25.8525 li
348.879 25.4395 li
347.785 25.0293 li
346.685 24.6226 li
345.581 24.2192 li
344.471 23.8198 li
343.356 23.4238 li
342.237 23.0313 li
341.112 22.6421 li
339.983 22.2563 li
338.848 21.8745 li
337.709 21.4961 li
336.566 21.1211 li
335.417 20.75 li
334.264 20.3823 li
333.106 20.0181 li
331.944 19.6577 li
330.778 19.3013 li
329.606 18.9482 li
328.43 18.5986 li
327.25 18.2529 li
326.066 17.9111 li
324.877 17.5732 li
323.684 17.2388 li
322.488 16.9082 li
321.287 16.5811 li
320.081 16.2578 li
318.872 15.9385 li
317.659 15.623 li
316.441 15.3115 li
315.22 15.0039 li
313.995 14.6997 li
312.766 14.3994 li
311.534 14.1035 li
310.297 13.811 li
309.057 13.5225 li
307.814 13.2378 li
306.567 12.957 li
305.316 12.6802 li
304.062 12.4077 li
302.805 12.1387 li
301.544 11.874 li
300.28 11.6128 li
299.012 11.356 li
297.742 11.103 li
296.468 10.854 li
295.192 10.6089 li
293.912 10.3682 li
292.628 10.1313 li
291.343 9.89844 li
290.054 9.66943 li
288.762 9.44482 li
287.468 9.22412 li
286.171 9.00732 li
284.872 8.79492 li
283.569 8.58643 li
282.263 8.38232 li
280.956 8.18213 li
279.646 7.98584 li
278.333 7.79395 li
277.018 7.60596 li
275.701 7.42236 li
274.381 7.24268 li
273.06 7.06738 li
271.736 6.896 li
270.41 6.729 li
269.082 6.56592 li
267.751 6.40723 li
266.418 6.25293 li
265.084 6.10254 li
263.749 5.95605 li
262.411 5.81445 li
261.072 5.67676 li
259.73 5.54297 li
258.387 5.41357 li
257.042 5.28857 li
255.697 5.16797 li
254.349 5.05127 li
253 4.93848 li
251.65 4.83057 li
250.298 4.72656 li
248.945 4.62695 li
247.591 4.53174 li
246.236 4.44043 li
244.879 4.35352 li
243.522 4.271 li
242.163 4.19287 li
240.803 4.11865 li
239.443 4.04883 li
238.082 3.9834 li
236.719 3.92236 li
235.357 3.86523 li
233.994 3.81299 li
232.629 3.76465 li
231.264 3.72021 li
229.899 3.68066 li
228.534 3.64502 li
227.167 3.61377 li
225.8 3.58691 li
224.434 3.56445 li
223.067 3.54639 li
221.7 3.53223 li
220.332 3.52246 li
218.964 3.51709 li
217.597 3.51611 li
216.229 3.51953 li
214.862 3.52686 li
213.495 3.53857 li
212.127 3.55469 li
210.76 3.5752 li
209.394 3.6001 li
208.027 3.62891 li
206.661 3.66211 li
205.296 3.7002 li
203.931 3.7417 li
202.566 3.78809 li
201.203 3.83838 li
199.839 3.89355 li
198.477 3.95215 li
197.115 4.01563 li
195.754 4.0835 li
194.394 4.15527 li
193.035 4.23145 li
191.677 4.31201 li
190.32 4.39648 li
188.964 4.48535 li
187.609 4.5791 li
186.256 4.67627 li
184.903 4.77832 li
183.552 4.88428 li
182.203 4.99414 li
180.854 5.10889 li
179.507 5.22754 li
178.162 5.35059 li
176.818 5.47754 li
175.477 5.60938 li
174.136 5.74512 li
172.797 5.88477 li
171.46 6.02881 li
170.125 6.17725 li
168.792 6.32959 li
167.461 6.48633 li
166.132 6.64697 li
164.805 6.81201 li
163.479 6.98096 li
162.157 7.1543 li
160.836 7.33203 li
159.518 7.51367 li
158.201 7.69922 li
156.888 7.88916 li
155.576 8.0835 li
154.268 8.28174 li
152.961 8.48389 li
151.657 8.69043 li
150.356 8.90088 li
149.058 9.11523 li
147.762 9.33398 li
146.469 9.55664 li
145.179 9.78369 li
143.891 10.0142 li
142.607 10.249 li
141.326 10.4883 li
140.047 10.731 li
138.772 10.978 li
137.5 11.229 li
136.231 11.4839 li
134.965 11.7427 li
133.703 12.0059 li
132.443 12.2725 li
131.188 12.5435 li
129.936 12.8184 li
128.687 13.0972 li
127.441 13.3794 li
126.2 13.666 li
124.961 13.9565 li
123.727 14.251 li
122.497 14.5493 li
121.27 14.8511 li
120.046 15.1572 li
118.827 15.4668 li
117.612 15.7803 li
116.401 16.0977 li
115.193 16.4189 li
113.99 16.7441 li
112.791 17.0728 li
111.596 17.4053 li
110.405 17.7417 li
109.219 18.0815 li
108.037 18.4253 li
106.859 18.7729 li
105.685 19.124 li
104.516 19.479 li
103.352 19.8374 li
102.192 20.1997 li
101.036 20.5654 li
99.8853 20.9351 li
98.7393 21.3081 li
97.5981 21.6846 li
96.4614 22.0649 li
95.3296 22.4487 li
94.2026 22.8359 li
93.0806 23.2271 li
91.9634 23.6211 li
90.8511 24.019 li
89.7437 24.4204 li
88.6416 24.8252 li
87.5449 25.2339 li
86.4531 25.6455 li
85.3662 26.0605 li
84.2852 26.4795 li
83.209 26.9014 li
82.1382 27.3267 li
81.0728 27.7554 li
80.0127 28.1875 li
78.9585 28.623 li
77.9092 29.0615 li
76.8657 29.5039 li
75.8281 29.9487 li
74.7954 30.3975 li
73.769 30.8491 li
72.748 31.3042 li
71.7329 31.7622 li
70.7236 32.2236 li
69.7202 32.6885 li
68.7222 33.1558 li
67.7305 33.627 li
66.7446 34.1006 li
65.7646 34.5776 li
64.791 35.0576 li
63.8232 35.541 li
62.8613 36.0269 li
61.9058 36.5161 li
60.9565 37.0083 li
60.0137 37.5034 li
59.0767 38.002 li
58.146 38.5029 li
57.2217 39.0068 li
56.3037 39.5137 li
55.3921 40.0234 li
54.4868 40.5361 li
53.5884 41.0513 li
52.6963 41.5693 li
51.8105 42.0908 li
50.9312 42.6143 li
50.0591 43.1411 li
49.1929 43.6704 li
48.334 44.2021 li
47.4814 44.7368 li
46.6357 45.2744 li
45.7969 45.8145 li
44.9648 46.3569 li
44.1396 46.9023 li
43.3213 47.4502 li
42.5098 48.0005 li
41.7051 48.5537 li
40.9077 49.1089 li
40.1172 49.667 li
39.3335 50.2275 li
38.5571 50.79 li
37.7876 51.3555 li
37.0254 51.9233 li
36.2705 52.4932 li
35.5225 53.0659 li
34.7817 53.6406 li
34.0483 54.2178 li
33.3223 54.7974 li
32.603 55.3789 li
31.8916 55.9629 li
31.1875 56.5493 li
30.4907 57.1377 li
29.8013 57.728 li
29.1196 58.3208 li
28.4448 58.9155 li
27.7778 59.5127 li
27.1187 60.1118 li
26.4668 60.7129 li
25.8223 61.3159 li
25.1855 61.9209 li
24.5566 62.5283 li
23.9351 63.1372 li
23.3213 63.7485 li
22.7153 64.3613 li
22.1167 64.9761 li
21.5264 65.5928 li
20.9434 66.2114 li
20.3687 66.832 li
19.8013 67.4541 li
19.2417 68.0781 li
18.6904 68.7036 li
18.1465 69.3311 li
17.6108 69.9604 li
17.083 70.5913 li
16.563 71.2236 li
16.0513 71.8579 li
15.5474 72.4937 li
15.0513 73.1309 li
14.5635 73.7695 li
14.084 74.4097 li
13.6118 75.0518 li
13.1484 75.6948 li
12.6929 76.3398 li
12.2451 76.9858 li
11.8057 77.6333 li
11.3745 78.2822 li
10.9517 78.9326 li
10.5366 79.584 li
10.1304 80.2368 li
9.73193 80.8911 li
9.3418 81.5464 li
8.95996 82.2031 li
8.58594 82.8608 li
8.2207 83.5195 li
7.86377 84.1797 li
7.51514 84.8408 li
7.17432 85.5034 li
6.84229 86.1665 li
6.51855 86.8311 li
6.20313 87.4961 li
5.896 88.1626 li
5.59766 88.8301 li
5.30713 89.498 li
5.02539 90.167 li
4.75195 90.8374 li
4.4873 91.5078 li
4.23096 92.1797 li
3.98242 92.8521 li
3.74316 93.5254 li
3.51172 94.1992 li
3.28906 94.874 li
3.0752 95.5493 li
2.86963 96.2256 li
2.67236 96.9019 li
2.48389 97.5791 li
2.30371 98.2573 li
2.13184 98.9355 li
1.96924 99.6143 li
1.81445 100.294 li
1.66846 100.974 li
1.53125 101.654 li
1.40234 102.335 li
1.28223 103.016 li
1.17041 103.697 li
1.06738 104.379 li
.972656 105.062 li
.886719 105.744 li
.80957 106.427 li
.740723 107.109 li
.680664 107.792 li
.628906 108.476 li
.585938 109.159 li
.55127 109.843 li
.525879 110.526 li
.508301 111.21 li
.5 111.894 li
.5 112.578 li
.508301 113.262 li
.525879 113.945 li
.55127 114.629 li
.585938 115.313 li
.628906 115.996 li
.680664 116.68 li
.740723 117.362 li
.80957 118.046 li
.886719 118.729 li
.972656 119.41 li
1.06738 120.093 li
1.17041 120.774 li
1.28223 121.456 li
1.40234 122.138 li
1.53125 122.818 li
1.66846 123.498 li
1.81445 124.179 li
1.96924 124.857 li
2.13184 125.536 li
2.30371 126.215 li
2.48389 126.893 li
2.67236 127.57 li
2.86963 128.247 li
3.0752 128.923 li
3.28906 129.598 li
3.51172 130.272 li
3.74316 130.946 li
3.98242 131.62 li
4.23096 132.292 li
4.4873 132.964 li
4.75195 133.635 li
5.02539 134.305 li
5.30713 134.974 li
5.59766 135.643 li
5.896 136.31 li
6.20313 136.976 li
6.51855 137.642 li
6.84229 138.306 li
7.17432 138.969 li
7.51514 139.631 li
7.86377 140.292 li
8.2207 140.952 li
8.58594 141.611 li
8.95996 142.269 li
9.3418 142.926 li
9.73193 143.581 li
10.1304 144.235 li
10.5366 144.888 li
10.9517 145.54 li
11.3745 146.189 li
11.8057 146.839 li
12.2451 147.486 li
12.6929 148.133 li
13.1484 148.777 li
13.6118 149.421 li
14.084 150.063 li
14.5635 150.702 li
15.0513 151.342 li
15.5474 151.979 li
16.0513 152.614 li
16.563 153.248 li
17.083 153.881 li
17.6108 154.512 li
18.1465 155.141 li
18.6904 155.769 li
19.2417 156.394 li
19.8013 157.018 li
20.3687 157.64 li
20.9434 158.261 li
21.5264 158.879 li
22.1167 159.496 li
22.7153 160.11 li
23.3213 160.724 li
23.9351 161.335 li
24.5566 161.944 li
25.1855 162.551 li
25.8223 163.156 li
26.4668 163.76 li
27.1187 164.36 li
27.7778 164.96 li
28.4448 165.557 li
29.1196 166.151 li
29.8013 166.744 li
30.4907 167.335 li
31.1875 167.923 li
31.8916 168.509 li
32.603 169.093 li
33.3223 169.675 li
34.0483 170.254 li
34.7817 170.831 li
35.5225 171.406 li
36.2705 171.979 li
37.0254 172.549 li
37.7876 173.116 li
38.5571 173.682 li
39.3335 174.245 li
40.1172 174.805 li
40.9077 175.363 li
41.7051 175.919 li
42.5098 176.472 li
43.3213 177.021 li
44.1396 177.569 li
44.9648 178.115 li
45.7969 178.657 li
46.6357 179.197 li
47.4814 179.735 li
48.334 180.27 li
49.1929 180.802 li
50.0591 181.331 li
50.9312 181.857 li
51.8105 182.382 li
52.6963 182.902 li
53.5884 183.421 li
54.4868 183.937 li
55.3921 184.449 li
56.3037 184.958 li
57.2217 185.466 li
58.146 185.97 li
59.0767 186.471 li
60.0137 186.969 li
60.9565 187.464 li
61.9058 187.956 li
62.8613 188.445 li
63.8232 188.931 li
64.791 189.414 li
65.7646 189.895 li
66.7446 190.371 li
67.7305 190.846 li
68.7222 191.316 li
69.7202 191.784 li
70.7236 192.248 li
71.7329 192.71 li
72.748 193.168 li
73.769 193.623 li
74.7954 194.074 li
75.8281 194.523 li
76.8657 194.969 li
77.9092 195.41 li
78.9585 195.849 li
80.0127 196.284 li
81.0728 196.717 li
82.1382 197.146 li
83.209 197.57 li
84.2852 197.993 li
85.3662 198.411 li
86.4531 198.826 li
87.5449 199.238 li
88.6416 199.646 li
89.7437 200.052 li
90.8511 200.453 li
91.9634 200.851 li
93.0806 201.245 li
94.2026 201.636 li
95.3296 202.023 li
96.4614 202.407 li
97.5981 202.787 li
98.7393 203.164 li
99.8853 203.537 li
101.036 203.906 li
102.192 204.272 li
103.352 204.635 li
104.516 204.993 li
105.685 205.348 li
106.859 205.699 li
108.037 206.047 li
109.219 206.391 li
110.405 206.73 li
111.596 207.066 li
112.791 207.399 li
113.99 207.728 li
115.193 208.053 li
116.401 208.374 li
117.612 208.691 li
118.827 209.005 li
120.046 209.315 li
121.27 209.621 li
122.497 209.923 li
123.727 210.221 li
124.961 210.516 li
126.2 210.806 li
127.441 211.093 li
128.687 211.375 li
129.936 211.653 li
131.188 211.929 li
132.443 212.199 li
133.703 212.466 li
134.965 212.729 li
136.231 212.988 li
137.5 213.243 li
138.772 213.494 li
140.047 213.741 li
141.326 213.984 li
142.607 214.223 li
143.891 214.458 li
145.179 214.688 li
146.469 214.915 li
147.762 215.138 li
149.058 215.356 li
150.356 215.571 li
151.657 215.782 li
152.961 215.988 li
154.268 216.19 li
155.576 216.389 li
156.888 216.583 li
158.201 216.772 li
159.518 216.958 li
160.836 217.14 li
162.157 217.317 li
163.479 217.491 li
164.805 217.66 li
166.132 217.825 li
167.461 217.986 li
168.792 218.143 li
170.125 218.295 li
171.46 218.443 li
172.797 218.587 li
174.136 218.728 li
175.477 218.863 li
176.818 218.994 li
178.162 219.121 li
179.507 219.244 li
180.854 219.363 li
182.203 219.478 li
183.552 219.588 li
184.903 219.694 li
186.256 219.796 li
187.609 219.894 li
188.964 219.986 li
190.32 220.075 li
191.677 220.16 li
193.035 220.24 li
194.394 220.316 li
195.754 220.389 li
197.115 220.456 li
198.477 220.52 li
199.839 220.579 li
201.203 220.634 li
202.566 220.684 li
203.931 220.73 li
205.296 220.772 li
206.661 220.81 li
208.027 220.843 li
209.394 220.872 li
210.76 220.896 li
212.127 220.917 li
213.495 220.934 li
214.862 220.945 li
216.229 220.953 li
217.597 220.956 li
218.964 220.955 li
220.332 220.949 li
221.7 220.939 li
223.067 220.926 li
224.434 220.907 li
225.8 220.885 li
227.167 220.858 li
228.534 220.827 li
229.899 220.791 li
231.264 220.752 li
232.629 220.708 li
233.994 220.659 li
235.357 220.606 li
236.719 220.55 li
238.082 220.488 li
239.443 220.423 li
240.803 220.354 li
242.163 220.279 li
243.522 220.201 li
244.879 220.118 li
246.236 220.031 li
247.591 219.94 li
248.945 219.845 li
250.298 219.745 li
251.65 219.642 li
253 219.533 li
254.349 219.421 li
255.697 219.305 li
257.042 219.184 li
258.387 219.059 li
259.73 218.929 li
261.072 218.796 li
262.411 218.658 li
263.749 218.516 li
265.084 218.37 li
266.418 218.22 li
267.751 218.064 li
269.082 217.906 li
270.41 217.743 li
271.736 217.576 li
273.06 217.404 li
274.381 217.229 li
275.701 217.05 li
277.018 216.866 li
278.333 216.678 li
279.646 216.486 li
280.956 216.29 li
282.263 216.09 li
283.569 215.886 li
284.872 215.677 li
286.171 215.465 li
287.468 215.248 li
288.762 215.027 li
290.054 214.803 li
291.343 214.573 li
292.628 214.341 li
293.912 214.104 li
295.192 213.863 li
296.468 213.618 li
297.742 213.369 li
299.012 213.116 li
300.28 212.859 li
301.544 212.599 li
302.805 212.333 li
304.062 212.064 li
305.316 211.792 li
306.567 211.515 li
307.814 211.234 li
309.057 210.949 li
310.297 210.661 li
311.534 210.369 li
312.766 210.072 li
313.995 209.772 li
315.22 209.469 li
316.441 209.16 li
317.659 208.849 li
318.872 208.533 li
320.081 208.214 li
321.287 207.891 li
322.488 207.564 li
323.684 207.233 li
324.877 206.899 li
326.066 206.561 li
327.25 206.219 li
328.43 205.873 li
329.606 205.524 li
330.778 205.171 li
331.944 204.814 li
333.106 204.454 li
334.264 204.09 li
335.417 203.723 li
336.566 203.351 li
337.709 202.977 li
338.848 202.598 li
339.983 202.216 li
341.112 201.83 li
342.237 201.441 li
343.356 201.049 li
344.471 200.652 li
345.581 200.253 li
346.685 199.85 li
347.785 199.442 li
348.879 199.033 li
349.968 198.619 li
351.052 198.202 li
352.131 197.782 li
353.205 197.358 li
354.273 196.932 li
355.335 196.501 li
356.393 196.067 li
357.445 195.63 li
358.491 195.189 li
359.532 194.746 li
360.567 194.299 li
361.596 193.849 li
362.62 193.396 li
363.637 192.939 li
364.65 192.479 li
365.657 192.017 li
366.657 191.551 li
367.652 191.081 li
368.64 190.608 li
369.624 190.133 li
370.6 189.654 li
371.571 189.173 li
372.536 188.688 li
373.495 188.201 li
374.447 187.71 li
375.393 187.217 li
376.333 186.72 li
377.267 186.22 li
378.195 185.718 li
379.116 185.212 li
380.031 184.704 li
380.939 184.192 li
381.84 183.679 li
382.736 183.162 li
383.625 182.643 li
384.507 182.12 li
385.383 181.595 li
386.252 181.066 li
387.115 180.536 li
387.97 180.003 li
388.82 179.467 li
389.662 178.928 li
390.498 178.387 li
391.327 177.843 li
392.148 177.296 li
392.963 176.747 li
393.771 176.195 li
394.572 175.642 li
395.366 175.084 li
396.153 174.525 li
396.933 173.964 li
397.707 173.399 li
398.472 172.833 li
399.231 172.264 li
399.982 171.692 li
400.726 171.119 li
401.463 170.543 li
402.193 169.965 li
402.916 169.384 li
403.631 168.802 li
404.338 168.216 li
405.04 167.629 li
405.733 167.04 li
406.418 166.448 li
407.096 165.854 li
407.767 165.258 li
408.43 164.66 li
409.085 164.061 li
409.734 163.458 li
410.375 162.854 li
411.007 162.248 li
411.632 161.64 li
412.25 161.029 li
412.86 160.417 li
413.462 159.804 li
414.057 159.188 li
414.643 158.57 li
415.222 157.95 li
415.793 157.329 li
416.357 156.706 li
416.913 156.081 li
417.459 155.455 li
418 154.826 li
418.532 154.196 li
419.055 153.564 li
419.571 152.932 li
420.079 152.297 li
420.579 151.66 li
421.071 151.022 li
421.555 150.383 li
422.031 149.741 li
422.499 149.099 li
422.958 148.455 li
423.41 147.81 li
423.853 147.163 li
424.289 146.515 li
424.715 145.865 li
425.134 145.214 li
425.545 144.562 li
425.948 143.908 li
426.342 143.254 li
426.728 142.598 li
427.106 141.94 li
427.475 141.282 li
427.836 140.622 li
428.189 139.962 li
428.534 139.3 li
428.87 138.638 li
429.198 137.974 li
429.518 137.309 li
429.829 136.643 li
430.131 135.976 li
430.426 135.309 li
430.712 134.64 li
430.99 133.97 li
431.259 133.3 li
431.52 132.628 li
431.772 131.956 li
432.016 131.283 li
432.251 130.609 li
432.478 129.936 li
432.697 129.261 li
432.907 128.585 li
433.108 127.908 li
433.3 127.231 li
433.485 126.554 li
433.661 125.876 li
433.828 125.197 li
433.987 124.518 li
434.137 123.838 li
434.279 123.158 li
434.412 122.478 li
434.537 121.797 li
434.653 121.115 li
434.76 120.434 li
434.859 119.752 li
434.949 119.069 li
435.031 118.387 li
435.104 117.704 li
435.168 117.021 li
435.224 116.338 li
435.271 115.654 li
435.31 114.971 li
435.34 114.287 li
435.362 113.604 li
435.375 112.92 li
435.378 112.236 li
clp
.8 lw
[.8 1.32 ] 0 dsh
217.939 3.51611 mo
217.939 3.51611 li
77.3691 29.3496 mo
217.939 29.3496 li
217.939 29.3496 li
217.939 29.3496 mo
358.508 29.3496 li
19.23 68.3159 mo
217.939 68.3159 li
217.939 68.3159 li
217.939 68.3159 mo
416.647 68.3159 li
.716309 112.236 mo
217.939 112.236 li
217.939 112.236 li
217.939 112.236 mo
435.161 112.236 li
19.23 156.156 mo
217.939 156.156 li
217.939 156.156 li
217.939 156.156 mo
416.647 156.156 li
77.3691 195.123 mo
217.939 195.123 li
217.939 195.123 li
217.939 195.123 mo
358.508 195.123 li
217.939 220.956 mo
217.939 220.956 li
217.939 220.956 mo
214.834 220.778 li
212.225 220.354 li
209.81 219.733 li
207.444 218.911 li
205.083 217.872 li
202.711 216.604 li
200.325 215.091 li
197.924 213.318 li
195.512 211.272 li
193.096 208.939 li
190.684 206.304 li
188.285 203.354 li
185.908 200.078 li
183.566 196.463 li
181.271 192.498 li
179.037 188.175 li
176.977 183.711 li
174.992 178.887 li
173.098 173.696 li
171.315 168.136 li
169.725 162.454 li
168.268 156.41 li
167.013 150.265 li
165.916 143.772 li
165.032 137.204 li
164.358 130.575 li
163.878 123.636 li
163.624 116.666 li
163.594 109.685 li
163.788 102.711 li
164.207 95.7612 li
164.851 88.854 li
165.685 82.2695 li
166.73 75.7573 li
167.99 69.3345 li
169.405 63.2681 li
171.024 57.3159 li
172.774 51.7334 li
174.634 46.519 li
176.683 41.4424 li
178.823 36.7378 li
181.04 32.3999 li
183.316 28.4199 li
185.639 24.7886 li
187.996 21.4956 li
190.375 18.5293 li
192.93 15.7046 li
195.512 13.1997 li
197.924 11.1538 li
200.534 9.23926 li
202.939 7.73682 li
205.333 6.47949 li
207.724 5.45313 li
210.131 4.64355 li
212.612 4.03906 li
214.834 3.69336 li
216.707 3.54395 li
217.939 3.51611 li
217.939 3.51611 li
217.939 220.956 mo
211.73 220.778 li
206.512 220.354 li
201.682 219.733 li
196.949 218.911 li
192.228 217.872 li
187.484 216.604 li
182.711 215.091 li
177.909 213.318 li
173.444 211.435 li
168.924 209.28 li
164.684 207.02 li
160.391 204.477 li
156.352 201.83 li
152.278 198.889 li
148.445 195.847 li
144.836 192.71 li
141.219 189.269 li
137.828 185.736 li
134.652 182.118 li
131.506 178.187 li
128.587 174.174 li
125.887 170.085 li
123.401 165.927 li
121.125 161.704 li
118.939 157.171 li
116.981 152.58 li
115.248 147.938 li
113.736 143.25 li
112.445 138.523 li
111.372 133.764 li
110.516 128.978 li
109.876 124.171 li
109.452 119.349 li
109.243 114.519 li
109.249 109.685 li
109.47 104.855 li
109.906 100.034 li
110.557 95.228 li
111.425 90.4434 li
112.511 85.6855 li
113.814 80.9604 li
115.338 76.2754 li
117.084 71.6353 li
119.055 67.0474 li
121.253 62.5176 li
123.542 58.2993 li
126.04 54.145 li
128.752 50.0601 li
131.685 46.0518 li
134.845 42.126 li
138.033 38.5127 li
141.438 34.9854 li
145.07 31.5503 li
148.693 28.4199 li
152.542 25.3838 li
156.632 22.4497 li
160.689 19.8105 li
165 17.2749 li
169.261 15.0225 li
173.805 12.877 li
178.295 11.0015 li
182.711 9.38135 li
187.484 7.86865 li
192.228 6.6001 li
196.949 5.56152 li
201.682 4.73828 li
206.512 4.11816 li
211.73 3.69336 li
215.474 3.54395 li
217.939 3.51611 li
217.939 3.51611 li
217.939 220.956 mo
208.626 220.778 li
200.798 220.354 li
193.553 219.733 li
186.455 218.911 li
179.372 217.872 li
172.257 216.604 li
165.097 215.091 li
158.473 213.471 li
151.738 211.595 li
145.43 209.619 li
139.009 207.374 li
132.963 205.03 li
126.827 202.405 li
121.041 199.684 li
115.576 196.871 li
110.412 193.976 li
105.19 190.786 li
100.274 187.514 li
95.6494 184.163 li
91.3042 180.74 li
87.23 177.25 li
83.4175 173.696 li
79.8608 170.085 li
76.5542 166.419 li
73.4932 162.703 li
70.6738 158.941 li
68.0928 155.138 li
65.7471 151.296 li
63.6343 147.419 li
61.752 143.512 li
60.0996 139.576 li
58.6748 135.618 li
57.4771 131.64 li
56.5049 127.644 li
55.7578 123.636 li
55.2349 119.617 li
54.9365 115.592 li
54.8618 111.565 li
55.0112 107.538 li
55.3843 103.515 li
55.9819 99.4995 li
56.8037 95.4946 li
57.8511 91.5044 li
59.1245 87.5322 li
60.625 83.5811 li
62.354 79.6548 li
64.3125 75.7573 li
66.5029 71.8916 li
68.9268 68.062 li
71.5869 64.272 li
74.4868 60.5249 li
77.6289 56.8252 li
81.0181 53.1772 li
84.6597 49.5845 li
88.5586 46.0518 li
92.7222 42.583 li
97.1592 39.1841 li
101.879 35.8589 li
106.896 32.6133 li
111.858 29.6611 li
117.106 26.7886 li
122.66 24.0015 li
128.542 21.3066 li
134.328 18.8926 li
140.456 16.5713 li
146.971 14.3501 li
153.379 12.3979 li
160.233 10.5498 li
166.991 8.95752 li
173.628 7.60596 li
180.881 6.36035 li
188.144 5.3457 li
195.497 4.55029 li
203.163 3.96338 li
210.25 3.63672 li
217.939 3.51611 li
217.939 3.51611 li
217.939 220.956 mo
230.356 220.778 li
240.792 220.354 li
250.453 219.733 li
259.917 218.911 li
269.362 217.872 li
278.847 216.604 li
288.394 215.091 li
297.226 213.471 li
306.207 211.595 li
314.617 209.619 li
323.178 207.374 li
331.239 205.03 li
338.853 202.597 li
346.6 199.881 li
353.916 197.075 li
360.83 194.185 li
367.367 191.217 li
373.545 188.175 li
379.384 185.063 li
384.894 181.889 li
390.086 178.653 li
394.971 175.362 li
399.555 172.018 li
403.846 168.625 li
407.848 165.186 li
411.567 161.704 li
415.005 158.184 li
418.168 154.628 li
421.059 151.038 li
423.678 147.419 li
426.03 143.772 li
427.975 140.365 li
429.691 136.94 li
431.18 133.498 li
432.442 130.043 li
433.479 126.576 li
434.291 123.1 li
434.877 119.617 li
435.24 116.129 li
435.377 112.639 li
435.292 109.148 li
434.981 105.66 li
434.446 102.175 li
433.686 98.6973 li
432.702 95.228 li
431.492 91.77 li
430.055 88.3252 li
428.391 84.8955 li
426.499 81.4839 li
424.377 78.0923 li
421.834 74.4648 li
419.022 70.8667 li
415.937 67.3008 li
412.578 63.7695 li
408.939 60.2769 li
405.018 56.8252 li
400.811 53.4189 li
396.311 50.0601 li
391.513 46.7534 li
386.41 43.5015 li
380.992 40.3091 li
375.249 37.1797 li
369.167 34.1177 li
362.735 31.1274 li
355.93 28.2144 li
348.733 25.3838 li
341.113 22.6421 li
333.627 20.1812 li
325.708 17.8091 li
317.308 15.5332 li
309.069 13.5249 li
300.29 11.6147 li
291.68 9.95898 li
282.414 8.40527 li
273.264 7.09424 li
264.243 6.00977 li
254.153 5.03467 li
245.148 4.37061 li
235.964 3.89014 li
225.762 3.58643 li
217.939 3.51611 li
217.939 3.51611 li
217.939 220.956 mo
227.251 220.778 li
235.08 220.354 li
242.325 219.733 li
249.423 218.911 li
256.505 217.872 li
263.62 216.604 li
270.78 215.091 li
277.405 213.471 li
284.139 211.595 li
290.447 209.619 li
296.869 207.374 li
302.914 205.03 li
309.051 202.405 li
314.837 199.684 li
320.301 196.871 li
325.466 193.976 li
330.688 190.786 li
335.604 187.514 li
340.228 184.163 li
344.573 180.74 li
348.648 177.25 li
352.46 173.696 li
356.017 170.085 li
359.323 166.419 li
362.384 162.703 li
365.204 158.941 li
367.785 155.138 li
370.13 151.296 li
372.244 147.419 li
374.125 143.512 li
375.778 139.576 li
377.203 135.618 li
378.401 131.64 li
379.373 127.644 li
380.12 123.636 li
380.642 119.617 li
380.941 115.592 li
381.016 111.565 li
380.867 107.538 li
380.494 103.515 li
379.896 99.4995 li
379.074 95.4946 li
378.026 91.5044 li
376.752 87.5322 li
375.252 83.5811 li
373.524 79.6548 li
371.565 75.7573 li
369.375 71.8916 li
366.951 68.062 li
364.291 64.272 li
361.391 60.5249 li
358.249 56.8252 li
354.859 53.1772 li
351.218 49.5845 li
347.319 46.0518 li
343.155 42.583 li
338.718 39.1841 li
333.998 35.8589 li
328.982 32.6133 li
324.02 29.6611 li
318.772 26.7886 li
313.218 24.0015 li
307.334 21.3066 li
301.55 18.8926 li
295.421 16.5713 li
288.907 14.3501 li
282.499 12.3979 li
275.644 10.5498 li
268.886 8.95752 li
262.25 7.60596 li
254.996 6.36035 li
247.733 5.3457 li
240.38 4.55029 li
232.714 3.96338 li
225.627 3.63672 li
217.939 3.51611 li
217.939 3.51611 li
217.939 220.956 mo
224.147 220.778 li
229.366 220.354 li
234.196 219.733 li
238.928 218.911 li
243.65 217.872 li
248.393 216.604 li
253.167 215.091 li
257.969 213.318 li
262.433 211.435 li
266.954 209.28 li
271.194 207.02 li
275.487 204.477 li
279.526 201.83 li
283.6 198.889 li
287.432 195.847 li
291.042 192.71 li
294.659 189.269 li
298.05 185.736 li
301.225 182.118 li
304.371 178.187 li
307.291 174.174 li
309.991 170.085 li
312.476 165.927 li
314.752 161.704 li
316.938 157.171 li
318.896 152.58 li
320.629 147.938 li
322.141 143.25 li
323.433 138.523 li
324.506 133.764 li
325.362 128.978 li
326.001 124.171 li
326.426 119.349 li
326.635 114.519 li
326.628 109.685 li
326.408 104.855 li
325.972 100.034 li
325.32 95.228 li
324.453 90.4434 li
323.367 85.6855 li
322.063 80.9604 li
320.54 76.2754 li
318.793 71.6353 li
316.823 67.0474 li
314.625 62.5176 li
312.336 58.2993 li
309.838 54.145 li
307.125 50.0601 li
304.192 46.0518 li
301.033 42.126 li
297.844 38.5127 li
294.44 34.9854 li
290.807 31.5503 li
287.184 28.4199 li
283.335 25.3838 li
279.245 22.4497 li
275.189 19.8105 li
270.877 17.2749 li
266.617 15.0225 li
262.073 12.877 li
257.583 11.0015 li
253.167 9.38135 li
248.393 7.86865 li
243.65 6.6001 li
238.928 5.56152 li
234.196 4.73828 li
229.366 4.11816 li
224.147 3.69336 li
220.403 3.54395 li
217.939 3.51611 li
217.939 3.51611 li
217.939 220.956 mo
221.043 220.778 li
223.652 220.354 li
226.067 219.733 li
228.433 218.911 li
230.794 217.872 li
233.166 216.604 li
235.552 215.091 li
237.954 213.318 li
240.366 211.272 li
242.781 208.939 li
245.194 206.304 li
247.593 203.354 li
249.969 200.078 li
252.311 196.463 li
254.606 192.498 li
256.84 188.175 li
258.9 183.711 li
260.885 178.887 li
262.779 173.696 li
264.563 168.136 li
266.153 162.454 li
267.61 156.41 li
268.865 150.265 li
269.961 143.772 li
270.846 137.204 li
271.52 130.575 li
272 123.636 li
272.253 116.666 li
272.284 109.685 li
272.089 102.711 li
271.671 95.7612 li
271.027 88.854 li
270.193 82.2695 li
269.148 75.7573 li
267.887 69.3345 li
266.473 63.2681 li
264.853 57.3159 li
263.104 51.7334 li
261.244 46.519 li
259.195 41.4424 li
257.054 36.7378 li
254.838 32.3999 li
252.561 28.4199 li
250.238 24.7886 li
247.881 21.4956 li
245.502 18.5293 li
242.948 15.7046 li
240.366 13.1997 li
237.954 11.1538 li
235.343 9.23926 li
232.938 7.73682 li
230.544 6.47949 li
228.154 5.45313 li
225.747 4.64355 li
223.265 4.03906 li
221.043 3.69336 li
219.171 3.54395 li
217.939 3.51611 li
217.939 3.51611 li
217.939 220.956 mo
217.939 3.51611 li
217.939 3.51611 li
0 0 0 .31 cmyk
@
grestore
.8 lw
1 lj
217.939 112.236 mo
217.939 115.736 li
217.939 112.236 mo
217.939 115.736 li
163.579 112.236 mo
163.563 115.736 li
163.579 112.236 mo
163.563 115.736 li
109.219 112.236 mo
109.187 115.736 li
109.219 112.236 mo
109.187 115.736 li
54.8589 112.236 mo
54.8105 115.735 li
54.8589 112.236 mo
54.8105 115.735 li
381.019 112.236 mo
381.067 115.735 li
381.019 112.236 mo
381.067 115.735 li
326.659 112.236 mo
326.691 115.736 li
326.659 112.236 mo
326.691 115.736 li
272.298 112.236 mo
272.315 115.736 li
272.298 112.236 mo
272.315 115.736 li
@
43.9487 119.656 mo
46.5786 119.656 li
46.5786 120.456 li
43.9487 120.456 li
43.9487 119.656 li
43.9487 119.656 li
cp
ef
48.2988 121.966 mo
49.9087 121.966 li
49.9087 116.406 li
48.1587 116.756 li
48.1587 115.856 li
49.8989 115.506 li
50.8887 115.506 li
50.8887 121.966 li
52.4985 121.966 li
52.4985 122.796 li
48.2988 122.796 li
48.2988 121.966 li
48.2988 121.966 li
cp
ef
57.5986 118.866 mo
58.0688 118.966 58.439 119.176 58.6987 119.496 cv
58.959 119.816 59.0986 120.216 59.0986 120.676 cv
59.0986 121.396 58.8486 121.956 58.3589 122.346 cv
57.8589 122.736 57.1587 122.926 56.2485 122.926 cv
55.939 122.926 55.6187 122.896 55.2988 122.836 cv
54.979 122.786 54.6387 122.696 54.2988 122.576 cv
54.2988 121.626 li
54.5688 121.786 54.8687 121.906 55.1987 121.986 cv
55.5186 122.066 55.8589 122.106 56.2188 122.106 cv
56.8389 122.106 57.3086 121.986 57.6289 121.746 cv
57.9487 121.506 58.1187 121.146 58.1187 120.676 cv
58.1187 120.256 57.9688 119.916 57.6689 119.676 cv
57.3687 119.437 56.9487 119.306 56.4087 119.306 cv
55.5586 119.306 li
55.5586 118.496 li
56.4487 118.496 li
56.9287 118.496 57.2988 118.406 57.5586 118.206 cv
57.8188 118.016 57.9487 117.736 57.9487 117.366 cv
57.9487 116.996 57.8086 116.706 57.5488 116.506 cv
57.2788 116.306 56.8989 116.206 56.4087 116.206 cv
56.1387 116.206 55.8486 116.236 55.5386 116.296 cv
55.229 116.356 54.8887 116.446 54.5186 116.566 cv
54.5186 115.687 li
54.8887 115.586 55.2388 115.506 55.5688 115.456 cv
55.8887 115.406 56.1987 115.376 56.4985 115.376 cv
57.2388 115.376 57.8286 115.546 58.2686 115.886 cv
58.709 116.226 58.9287 116.687 58.9287 117.266 cv
58.9287 117.666 58.8086 118.006 58.5786 118.286 cv
58.3486 118.566 58.0186 118.766 57.5986 118.866 cv
57.5986 118.866 li
cp
ef
60.8589 115.506 mo
64.729 115.506 li
64.729 116.336 li
61.7588 116.336 li
61.7588 118.126 li
61.8989 118.076 62.0488 118.036 62.189 118.016 cv
62.3286 117.996 62.479 117.976 62.6187 117.976 cv
63.4287 117.976 64.0688 118.206 64.5488 118.646 cv
65.0288 119.096 65.2686 119.696 65.2686 120.456 cv
65.2686 121.246 65.0186 121.856 64.5288 122.286 cv
64.0386 122.716 63.3486 122.926 62.4688 122.926 cv
62.1587 122.926 61.8486 122.896 61.5288 122.856 cv
61.209 122.806 60.8887 122.736 60.5488 122.626 cv
60.5488 121.636 li
60.8389 121.796 61.1387 121.916 61.459 121.996 cv
61.7686 122.076 62.0986 122.106 62.4487 122.106 cv
63.0088 122.106 63.459 121.966 63.7886 121.666 cv
64.1089 121.366 64.2788 120.966 64.2788 120.456 cv
64.2788 119.956 64.1089 119.556 63.7886 119.256 cv
63.459 118.956 63.0088 118.806 62.4487 118.806 cv
62.189 118.806 61.9189 118.836 61.6587 118.896 cv
61.3989 118.956 61.1289 119.046 60.8589 119.166 cv
60.8589 115.506 li
60.8589 115.506 li
cp
ef
101.549 119.656 mo
104.179 119.656 li
104.179 120.456 li
101.549 120.456 li
101.549 119.656 li
101.549 119.656 li
cp
ef
107.719 119.556 mo
108.159 119.556 108.509 119.406 108.769 119.106 cv
109.029 118.806 109.159 118.386 109.159 117.856 cv
109.159 117.336 109.029 116.916 108.769 116.616 cv
108.509 116.316 108.159 116.156 107.719 116.156 cv
107.279 116.156 106.929 116.316 106.669 116.616 cv
106.409 116.916 106.279 117.336 106.279 117.856 cv
106.279 118.386 106.409 118.806 106.669 119.106 cv
106.929 119.406 107.279 119.556 107.719 119.556 cv
107.719 119.556 li
cp
105.759 122.646 mo
105.759 121.746 li
105.999 121.866 106.249 121.956 106.509 122.016 cv
106.759 122.076 107.009 122.106 107.259 122.106 cv
107.899 122.106 108.399 121.896 108.739 121.456 cv
109.079 121.016 109.279 120.356 109.339 119.456 cv
109.139 119.736 108.899 119.956 108.619 120.106 cv
108.329 120.256 108.009 120.326 107.659 120.326 cv
106.919 120.326 106.339 120.106 105.919 119.666 cv
105.499 119.226 105.289 118.626 105.289 117.856 cv
105.289 117.116 105.509 116.516 105.949 116.056 cv
106.389 115.606 106.979 115.376 107.719 115.376 cv
108.559 115.376 109.209 115.706 109.649 116.346 cv
110.089 116.996 110.319 117.937 110.319 119.156 cv
110.319 120.316 110.039 121.226 109.499 121.906 cv
108.949 122.586 108.219 122.926 107.299 122.926 cv
107.049 122.926 106.799 122.896 106.549 122.856 cv
106.289 122.816 106.029 122.746 105.759 122.646 cv
ef
114.319 115.376 mo
115.129 115.376 115.749 115.706 116.189 116.346 cv
116.619 116.996 116.839 117.937 116.839 119.156 cv
116.839 120.386 116.619 121.326 116.189 121.966 cv
115.749 122.606 115.129 122.926 114.319 122.926 cv
113.499 122.926 112.869 122.606 112.439 121.966 cv
112.009 121.326 111.799 120.386 111.799 119.156 cv
111.799 117.937 112.009 116.996 112.439 116.346 cv
112.869 115.706 113.499 115.376 114.319 115.376 cv
114.319 115.376 li
cp
114.319 116.156 mo
113.809 116.156 113.429 116.406 113.169 116.906 cv
112.909 117.406 112.789 118.156 112.789 119.156 cv
112.789 120.156 112.909 120.906 113.169 121.406 cv
113.429 121.906 113.809 122.156 114.319 122.156 cv
114.829 122.156 115.209 121.906 115.469 121.406 cv
115.719 120.906 115.849 120.156 115.849 119.156 cv
115.849 118.156 115.719 117.406 115.469 116.906 cv
115.209 116.406 114.829 116.156 114.319 116.156 cv
ef
155.789 119.656 mo
158.419 119.656 li
158.419 120.456 li
155.789 120.456 li
155.789 119.656 li
155.789 119.656 li
cp
ef
162.659 115.506 mo
163.899 115.506 li
163.899 120.256 li
164.939 120.256 li
164.939 121.076 li
163.899 121.076 li
163.899 122.796 li
162.919 122.796 li
162.919 121.076 li
159.629 121.076 li
159.629 120.126 li
162.659 115.506 li
162.659 115.506 li
cp
162.919 116.366 mo
160.429 120.256 li
162.919 120.256 li
162.919 116.366 li
ef
166.459 115.506 mo
170.329 115.506 li
170.329 116.336 li
167.359 116.336 li
167.359 118.126 li
167.499 118.076 167.649 118.036 167.789 118.016 cv
167.929 117.996 168.079 117.976 168.219 117.976 cv
169.029 117.976 169.669 118.206 170.149 118.646 cv
170.629 119.096 170.869 119.696 170.869 120.456 cv
170.869 121.246 170.619 121.856 170.129 122.286 cv
169.639 122.716 168.949 122.926 168.069 122.926 cv
167.759 122.926 167.449 122.896 167.129 122.856 cv
166.809 122.806 166.489 122.736 166.149 122.626 cv
166.149 121.636 li
166.439 121.796 166.739 121.916 167.059 121.996 cv
167.369 122.076 167.699 122.106 168.049 122.106 cv
168.609 122.106 169.059 121.966 169.389 121.666 cv
169.709 121.366 169.879 120.966 169.879 120.456 cv
169.879 119.956 169.709 119.556 169.389 119.256 cv
169.059 118.956 168.609 118.806 168.049 118.806 cv
167.789 118.806 167.519 118.836 167.259 118.896 cv
166.999 118.956 166.729 119.046 166.459 119.166 cv
166.459 115.506 li
166.459 115.506 li
cp
ef
217.999 115.376 mo
218.809 115.376 219.429 115.706 219.869 116.346 cv
220.298 116.996 220.519 117.937 220.519 119.156 cv
220.519 120.386 220.298 121.326 219.869 121.966 cv
219.429 122.606 218.809 122.926 217.999 122.926 cv
217.179 122.926 216.548 122.606 216.119 121.966 cv
215.689 121.326 215.479 120.386 215.479 119.156 cv
215.479 117.937 215.689 116.996 216.119 116.346 cv
216.548 115.706 217.179 115.376 217.999 115.376 cv
217.999 115.376 li
cp
217.999 116.156 mo
217.489 116.156 217.109 116.406 216.849 116.906 cv
216.588 117.406 216.469 118.156 216.469 119.156 cv
216.469 120.156 216.588 120.906 216.849 121.406 cv
217.109 121.906 217.489 122.156 217.999 122.156 cv
218.508 122.156 218.889 121.906 219.149 121.406 cv
219.399 120.906 219.529 120.156 219.529 119.156 cv
219.529 118.156 219.399 117.406 219.149 116.906 cv
218.889 116.406 218.508 116.156 217.999 116.156 cv
ef
269.458 115.506 mo
270.699 115.506 li
270.699 120.256 li
271.739 120.256 li
271.739 121.076 li
270.699 121.076 li
270.699 122.796 li
269.719 122.796 li
269.719 121.076 li
266.429 121.076 li
266.429 120.126 li
269.458 115.506 li
269.458 115.506 li
cp
269.719 116.366 mo
267.229 120.256 li
269.719 120.256 li
269.719 116.366 li
ef
273.499 115.506 mo
277.369 115.506 li
277.369 116.336 li
274.399 116.336 li
274.399 118.126 li
274.539 118.076 274.689 118.036 274.829 118.016 cv
274.969 117.996 275.119 117.976 275.258 117.976 cv
276.069 117.976 276.708 118.206 277.189 118.646 cv
277.668 119.096 277.909 119.696 277.909 120.456 cv
277.909 121.246 277.659 121.856 277.168 122.286 cv
276.679 122.716 275.989 122.926 275.109 122.926 cv
274.798 122.926 274.489 122.896 274.168 122.856 cv
273.849 122.806 273.529 122.736 273.189 122.626 cv
273.189 121.636 li
273.479 121.796 273.779 121.916 274.099 121.996 cv
274.409 122.076 274.739 122.106 275.088 122.106 cv
275.649 122.106 276.099 121.966 276.429 121.666 cv
276.749 121.366 276.918 120.966 276.918 120.456 cv
276.918 119.956 276.749 119.556 276.429 119.256 cv
276.099 118.956 275.649 118.806 275.088 118.806 cv
274.829 118.806 274.559 118.836 274.298 118.896 cv
274.039 118.956 273.769 119.046 273.499 119.166 cv
273.499 115.506 li
273.499 115.506 li
cp
ef
323.479 119.556 mo
323.918 119.556 324.269 119.406 324.529 119.106 cv
324.789 118.806 324.918 118.386 324.918 117.856 cv
324.918 117.336 324.789 116.916 324.529 116.616 cv
324.269 116.316 323.918 116.156 323.479 116.156 cv
323.039 116.156 322.689 116.316 322.429 116.616 cv
322.168 116.916 322.039 117.336 322.039 117.856 cv
322.039 118.386 322.168 118.806 322.429 119.106 cv
322.689 119.406 323.039 119.556 323.479 119.556 cv
323.479 119.556 li
cp
321.519 122.646 mo
321.519 121.746 li
321.758 121.866 322.008 121.956 322.269 122.016 cv
322.519 122.076 322.769 122.106 323.019 122.106 cv
323.659 122.106 324.159 121.896 324.499 121.456 cv
324.838 121.016 325.039 120.356 325.099 119.456 cv
324.899 119.736 324.659 119.956 324.378 120.106 cv
324.088 120.256 323.769 120.326 323.418 120.326 cv
322.679 120.326 322.099 120.106 321.679 119.666 cv
321.258 119.226 321.048 118.626 321.048 117.856 cv
321.048 117.116 321.269 116.516 321.708 116.056 cv
322.149 115.606 322.739 115.376 323.479 115.376 cv
324.319 115.376 324.969 115.706 325.409 116.346 cv
325.849 116.996 326.079 117.937 326.079 119.156 cv
326.079 120.316 325.798 121.226 325.258 121.906 cv
324.708 122.586 323.979 122.926 323.059 122.926 cv
322.809 122.926 322.559 122.896 322.309 122.856 cv
322.048 122.816 321.789 122.746 321.519 122.646 cv
ef
329.838 115.376 mo
330.649 115.376 331.269 115.706 331.708 116.346 cv
332.139 116.996 332.359 117.937 332.359 119.156 cv
332.359 120.386 332.139 121.326 331.708 121.966 cv
331.269 122.606 330.649 122.926 329.838 122.926 cv
329.019 122.926 328.389 122.606 327.958 121.966 cv
327.529 121.326 327.319 120.386 327.319 119.156 cv
327.319 117.937 327.529 116.996 327.958 116.346 cv
328.389 115.706 329.019 115.376 329.838 115.376 cv
329.838 115.376 li
cp
329.838 116.156 mo
329.329 116.156 328.949 116.406 328.689 116.906 cv
328.429 117.406 328.309 118.156 328.309 119.156 cv
328.309 120.156 328.429 120.906 328.689 121.406 cv
328.949 121.906 329.329 122.156 329.838 122.156 cv
330.349 122.156 330.729 121.906 330.989 121.406 cv
331.239 120.906 331.369 120.156 331.369 119.156 cv
331.369 118.156 331.239 117.406 330.989 116.906 cv
330.729 116.406 330.349 116.156 329.838 116.156 cv
ef
372.779 121.966 mo
374.389 121.966 li
374.389 116.406 li
372.639 116.756 li
372.639 115.856 li
374.378 115.506 li
375.369 115.506 li
375.369 121.966 li
376.979 121.966 li
376.979 122.796 li
372.779 122.796 li
372.779 121.966 li
372.779 121.966 li
cp
ef
381.838 118.866 mo
382.309 118.966 382.679 119.176 382.939 119.496 cv
383.199 119.816 383.338 120.216 383.338 120.676 cv
383.338 121.396 383.088 121.956 382.599 122.346 cv
382.099 122.736 381.399 122.926 380.489 122.926 cv
380.179 122.926 379.859 122.896 379.539 122.836 cv
379.219 122.786 378.878 122.696 378.539 122.576 cv
378.539 121.626 li
378.809 121.786 379.109 121.906 379.439 121.986 cv
379.758 122.066 380.099 122.106 380.458 122.106 cv
381.079 122.106 381.548 121.986 381.869 121.746 cv
382.189 121.506 382.359 121.146 382.359 120.676 cv
382.359 120.256 382.208 119.916 381.909 119.676 cv
381.609 119.437 381.189 119.306 380.649 119.306 cv
379.798 119.306 li
379.798 118.496 li
380.689 118.496 li
381.168 118.496 381.539 118.406 381.798 118.206 cv
382.059 118.016 382.189 117.736 382.189 117.366 cv
382.189 116.996 382.048 116.706 381.789 116.506 cv
381.519 116.306 381.139 116.206 380.649 116.206 cv
380.378 116.206 380.088 116.236 379.779 116.296 cv
379.469 116.356 379.128 116.446 378.758 116.566 cv
378.758 115.687 li
379.128 115.586 379.479 115.506 379.809 115.456 cv
380.128 115.406 380.439 115.376 380.739 115.376 cv
381.479 115.376 382.069 115.546 382.508 115.886 cv
382.949 116.226 383.168 116.687 383.168 117.266 cv
383.168 117.666 383.048 118.006 382.819 118.286 cv
382.588 118.566 382.258 118.766 381.838 118.866 cv
381.838 118.866 li
cp
ef
385.338 115.506 mo
389.208 115.506 li
389.208 116.336 li
386.239 116.336 li
386.239 118.126 li
386.378 118.076 386.529 118.036 386.668 118.016 cv
386.809 117.996 386.958 117.976 387.099 117.976 cv
387.909 117.976 388.548 118.206 389.029 118.646 cv
389.508 119.096 389.749 119.696 389.749 120.456 cv
389.749 121.246 389.499 121.856 389.008 122.286 cv
388.519 122.716 387.829 122.926 386.949 122.926 cv
386.639 122.926 386.329 122.896 386.008 122.856 cv
385.689 122.806 385.369 122.736 385.029 122.626 cv
385.029 121.636 li
385.319 121.796 385.619 121.916 385.939 121.996 cv
386.249 122.076 386.579 122.106 386.929 122.106 cv
387.489 122.106 387.939 121.966 388.269 121.666 cv
388.588 121.366 388.758 120.966 388.758 120.456 cv
388.758 119.956 388.588 119.556 388.269 119.256 cv
387.939 118.956 387.489 118.806 386.929 118.806 cv
386.668 118.806 386.399 118.836 386.139 118.896 cv
385.878 118.956 385.609 119.046 385.338 119.166 cv
385.338 115.506 li
385.338 115.506 li
cp
ef
440.958 100.736 mo
441.769 100.736 442.389 101.066 442.829 101.706 cv
443.258 102.356 443.479 103.296 443.479 104.516 cv
443.479 105.746 443.258 106.686 442.829 107.326 cv
442.389 107.966 441.769 108.286 440.958 108.286 cv
440.139 108.286 439.508 107.966 439.079 107.326 cv
438.649 106.686 438.439 105.746 438.439 104.516 cv
438.439 103.296 438.649 102.356 439.079 101.706 cv
439.508 101.066 440.139 100.736 440.958 100.736 cv
440.958 100.736 li
cp
440.958 101.516 mo
440.449 101.516 440.069 101.766 439.809 102.266 cv
439.548 102.766 439.429 103.516 439.429 104.516 cv
439.429 105.516 439.548 106.266 439.809 106.766 cv
440.069 107.266 440.449 107.516 440.958 107.516 cv
441.469 107.516 441.849 107.266 442.109 106.766 cv
442.359 106.266 442.489 105.516 442.489 104.516 cv
442.489 103.516 442.359 102.766 442.109 102.266 cv
441.849 101.766 441.469 101.516 440.958 101.516 cv
ef
446.519 100.736 mo
446.719 100.736 446.918 100.776 447.119 100.856 cv
447.309 100.936 447.479 101.056 447.619 101.196 cv
447.758 101.346 447.869 101.516 447.949 101.696 cv
448.029 101.886 448.069 102.086 448.069 102.296 cv
448.069 102.736 447.909 103.096 447.609 103.396 cv
447.309 103.696 446.939 103.836 446.508 103.836 cv
446.069 103.836 445.699 103.696 445.409 103.396 cv
445.109 103.106 444.969 102.736 444.969 102.296 cv
444.969 101.866 445.119 101.496 445.418 101.196 cv
445.719 100.896 446.079 100.736 446.519 100.736 cv
446.519 100.736 li
cp
446.519 101.366 mo
446.258 101.366 446.039 101.456 445.859 101.636 cv
445.679 101.816 445.588 102.036 445.588 102.296 cv
445.588 102.556 445.679 102.776 445.859 102.956 cv
446.039 103.136 446.258 103.216 446.519 103.216 cv
446.779 103.216 446.999 103.136 447.179 102.956 cv
447.359 102.776 447.449 102.556 447.449 102.296 cv
447.449 102.036 447.359 101.816 447.179 101.636 cv
446.999 101.456 446.779 101.366 446.519 101.366 cv
ef
421.199 60.5459 mo
421.668 60.646 422.039 60.856 422.298 61.1758 cv
422.559 61.4961 422.699 61.896 422.699 62.356 cv
422.699 63.0762 422.449 63.6362 421.958 64.0259 cv
421.458 64.416 420.758 64.606 419.849 64.606 cv
419.539 64.606 419.219 64.5762 418.899 64.5161 cv
418.579 64.4658 418.239 64.376 417.899 64.2559 cv
417.899 63.3062 li
418.168 63.4658 418.469 63.5859 418.798 63.666 cv
419.119 63.7461 419.458 63.7861 419.819 63.7861 cv
420.439 63.7861 420.909 63.666 421.229 63.4258 cv
421.548 63.186 421.719 62.8262 421.719 62.356 cv
421.719 61.936 421.569 61.5962 421.269 61.356 cv
420.969 61.1162 420.548 60.9858 420.008 60.9858 cv
419.159 60.9858 li
419.159 60.1758 li
420.048 60.1758 li
420.529 60.1758 420.899 60.0859 421.159 59.8862 cv
421.418 59.6958 421.548 59.416 421.548 59.0459 cv
421.548 58.6758 421.409 58.3862 421.149 58.186 cv
420.878 57.9858 420.499 57.8862 420.008 57.8862 cv
419.739 57.8862 419.449 57.916 419.139 57.9761 cv
418.829 58.0361 418.489 58.126 418.119 58.2461 cv
418.119 57.3662 li
418.489 57.2661 418.838 57.186 419.168 57.1362 cv
419.489 57.0859 419.798 57.0562 420.099 57.0562 cv
420.838 57.0562 421.429 57.2261 421.869 57.5659 cv
422.309 57.9063 422.529 58.3662 422.529 58.9458 cv
422.529 59.3462 422.409 59.686 422.179 59.9658 cv
421.949 60.2461 421.619 60.4458 421.199 60.5459 cv
421.199 60.5459 li
cp
ef
426.559 57.0562 mo
427.369 57.0562 427.989 57.3862 428.429 58.0259 cv
428.859 58.6758 429.079 59.6162 429.079 60.8359 cv
429.079 62.0659 428.859 63.0059 428.429 63.646 cv
427.989 64.2861 427.369 64.606 426.559 64.606 cv
425.739 64.606 425.109 64.2861 424.679 63.646 cv
424.249 63.0059 424.039 62.0659 424.039 60.8359 cv
424.039 59.6162 424.249 58.6758 424.679 58.0259 cv
425.109 57.3862 425.739 57.0562 426.559 57.0562 cv
426.559 57.0562 li
cp
426.559 57.8359 mo
426.048 57.8359 425.668 58.0859 425.409 58.5859 cv
425.149 59.0859 425.029 59.8359 425.029 60.8359 cv
425.029 61.8359 425.149 62.5859 425.409 63.0859 cv
425.668 63.5859 426.048 63.8359 426.559 63.8359 cv
427.069 63.8359 427.449 63.5859 427.708 63.0859 cv
427.958 62.5859 428.088 61.8359 428.088 60.8359 cv
428.088 59.8359 427.958 59.0859 427.708 58.5859 cv
427.449 58.0859 427.069 57.8359 426.559 57.8359 cv
ef
432.359 57.0562 mo
432.559 57.0562 432.758 57.0962 432.958 57.1758 cv
433.149 57.2559 433.319 57.376 433.458 57.5161 cv
433.599 57.666 433.708 57.8359 433.789 58.0161 cv
433.869 58.2061 433.909 58.4063 433.909 58.6162 cv
433.909 59.0562 433.749 59.416 433.449 59.7158 cv
433.149 60.0161 432.779 60.1563 432.349 60.1563 cv
431.909 60.1563 431.539 60.0161 431.249 59.7158 cv
430.949 59.4258 430.809 59.0562 430.809 58.6162 cv
430.809 58.186 430.958 57.8159 431.258 57.5161 cv
431.559 57.2158 431.918 57.0562 432.359 57.0562 cv
432.359 57.0562 li
cp
432.359 57.686 mo
432.099 57.686 431.878 57.7759 431.699 57.9561 cv
431.519 58.1362 431.429 58.356 431.429 58.6162 cv
431.429 58.876 431.519 59.0962 431.699 59.2759 cv
431.878 59.4561 432.099 59.5361 432.359 59.5361 cv
432.619 59.5361 432.838 59.4561 433.019 59.2759 cv
433.199 59.0962 433.289 58.876 433.289 58.6162 cv
433.289 58.356 433.199 58.1362 433.019 57.9561 cv
432.838 57.7759 432.619 57.686 432.359 57.686 cv
ef
360.239 17.7461 mo
360.239 18.646 li
359.989 18.5259 359.739 18.436 359.489 18.376 cv
359.229 18.3159 358.979 18.2861 358.739 18.2861 cv
358.079 18.2861 357.579 18.5059 357.239 18.9458 cv
356.899 19.3862 356.699 20.0562 356.659 20.936 cv
356.849 20.6563 357.088 20.436 357.378 20.2861 cv
357.668 20.1362 357.989 20.0562 358.338 20.0562 cv
359.069 20.0562 359.649 20.2861 360.069 20.7261 cv
360.489 21.166 360.708 21.7759 360.708 22.5361 cv
360.708 23.2861 360.479 23.8862 360.039 24.3359 cv
359.599 24.7861 359.008 25.0059 358.279 25.0059 cv
357.439 25.0059 356.789 24.686 356.349 24.0459 cv
355.899 23.4063 355.679 22.4658 355.679 21.2358 cv
355.679 20.0859 355.949 19.166 356.499 18.4858 cv
357.039 17.8062 357.779 17.4561 358.699 17.4561 cv
358.939 17.4561 359.189 17.4858 359.449 17.5259 cv
359.699 17.5762 359.958 17.646 360.239 17.7461 cv
360.239 17.7461 li
cp
358.279 20.8359 mo
357.838 20.8359 357.489 20.9961 357.229 21.2959 cv
356.969 21.5962 356.838 22.0161 356.838 22.5361 cv
356.838 23.0659 356.969 23.4858 357.229 23.7861 cv
357.489 24.0859 357.838 24.2358 358.279 24.2358 cv
358.719 24.2358 359.069 24.0859 359.329 23.7861 cv
359.588 23.4858 359.719 23.0659 359.719 22.5361 cv
359.719 22.0161 359.588 21.5962 359.329 21.2959 cv
359.069 20.9961 358.719 20.8359 358.279 20.8359 cv
ef
364.639 17.4561 mo
365.449 17.4561 366.069 17.7861 366.508 18.4258 cv
366.939 19.0762 367.159 20.0161 367.159 21.2358 cv
367.159 22.4658 366.939 23.4063 366.508 24.0459 cv
366.069 24.686 365.449 25.0059 364.639 25.0059 cv
363.819 25.0059 363.189 24.686 362.758 24.0459 cv
362.329 23.4063 362.119 22.4658 362.119 21.2358 cv
362.119 20.0161 362.329 19.0762 362.758 18.4258 cv
363.189 17.7861 363.819 17.4561 364.639 17.4561 cv
364.639 17.4561 li
cp
364.639 18.2358 mo
364.128 18.2358 363.749 18.4858 363.489 18.9858 cv
363.229 19.4858 363.109 20.2358 363.109 21.2358 cv
363.109 22.2358 363.229 22.9858 363.489 23.4858 cv
363.749 23.9858 364.128 24.2358 364.639 24.2358 cv
365.149 24.2358 365.529 23.9858 365.789 23.4858 cv
366.039 22.9858 366.168 22.2358 366.168 21.2358 cv
366.168 20.2358 366.039 19.4858 365.789 18.9858 cv
365.529 18.4858 365.149 18.2358 364.639 18.2358 cv
ef
370.199 17.4561 mo
370.399 17.4561 370.599 17.4961 370.798 17.5762 cv
370.989 17.6563 371.159 17.7759 371.298 17.916 cv
371.439 18.0659 371.548 18.2358 371.628 18.416 cv
371.708 18.606 371.749 18.8062 371.749 19.0161 cv
371.749 19.4561 371.588 19.8159 371.289 20.1162 cv
370.989 20.416 370.619 20.5562 370.189 20.5562 cv
369.749 20.5562 369.378 20.416 369.088 20.1162 cv
368.789 19.8262 368.649 19.4561 368.649 19.0161 cv
368.649 18.5859 368.798 18.2158 369.099 17.916 cv
369.399 17.6162 369.758 17.4561 370.199 17.4561 cv
370.199 17.4561 li
cp
370.199 18.0859 mo
369.939 18.0859 369.719 18.1758 369.539 18.356 cv
369.359 18.5361 369.269 18.7559 369.269 19.0161 cv
369.269 19.2759 369.359 19.4961 369.539 19.6758 cv
369.719 19.856 369.939 19.936 370.199 19.936 cv
370.458 19.936 370.679 19.856 370.859 19.6758 cv
371.039 19.4961 371.128 19.2759 371.128 19.0161 cv
371.128 18.7559 371.039 18.5361 370.859 18.356 cv
370.679 18.1758 370.458 18.0859 370.199 18.0859 cv
ef
354.508 201.736 mo
357.139 201.736 li
357.139 202.536 li
354.508 202.536 li
354.508 201.736 li
354.508 201.736 li
cp
ef
362.878 197.746 mo
362.878 198.646 li
362.628 198.526 362.378 198.437 362.128 198.376 cv
361.869 198.316 361.619 198.286 361.378 198.286 cv
360.719 198.286 360.219 198.506 359.878 198.946 cv
359.539 199.386 359.338 200.056 359.298 200.937 cv
359.489 200.656 359.729 200.437 360.019 200.286 cv
360.309 200.136 360.628 200.056 360.979 200.056 cv
361.708 200.056 362.289 200.286 362.708 200.726 cv
363.128 201.166 363.349 201.776 363.349 202.536 cv
363.349 203.286 363.119 203.886 362.679 204.336 cv
362.239 204.786 361.649 205.006 360.918 205.006 cv
360.079 205.006 359.429 204.687 358.989 204.046 cv
358.539 203.406 358.319 202.466 358.319 201.236 cv
358.319 200.086 358.588 199.166 359.139 198.486 cv
359.679 197.806 360.418 197.456 361.338 197.456 cv
361.579 197.456 361.829 197.486 362.088 197.526 cv
362.338 197.576 362.599 197.646 362.878 197.746 cv
362.878 197.746 li
cp
360.918 200.836 mo
360.479 200.836 360.128 200.996 359.869 201.296 cv
359.609 201.596 359.479 202.016 359.479 202.536 cv
359.479 203.066 359.609 203.486 359.869 203.786 cv
360.128 204.086 360.479 204.236 360.918 204.236 cv
361.359 204.236 361.708 204.086 361.969 203.786 cv
362.229 203.486 362.359 203.066 362.359 202.536 cv
362.359 202.016 362.229 201.596 361.969 201.296 cv
361.708 200.996 361.359 200.836 360.918 200.836 cv
ef
367.279 197.456 mo
368.088 197.456 368.708 197.786 369.149 198.426 cv
369.579 199.076 369.798 200.016 369.798 201.236 cv
369.798 202.466 369.579 203.406 369.149 204.046 cv
368.708 204.687 368.088 205.006 367.279 205.006 cv
366.458 205.006 365.829 204.687 365.399 204.046 cv
364.969 203.406 364.758 202.466 364.758 201.236 cv
364.758 200.016 364.969 199.076 365.399 198.426 cv
365.829 197.786 366.458 197.456 367.279 197.456 cv
367.279 197.456 li
cp
367.279 198.236 mo
366.769 198.236 366.389 198.486 366.128 198.986 cv
365.869 199.486 365.749 200.236 365.749 201.236 cv
365.749 202.236 365.869 202.986 366.128 203.486 cv
366.389 203.986 366.769 204.236 367.279 204.236 cv
367.789 204.236 368.168 203.986 368.429 203.486 cv
368.679 202.986 368.809 202.236 368.809 201.236 cv
368.809 200.236 368.679 199.486 368.429 198.986 cv
368.168 198.486 367.789 198.236 367.279 198.236 cv
ef
373.079 197.456 mo
373.279 197.456 373.479 197.496 373.679 197.576 cv
373.869 197.656 374.039 197.776 374.179 197.916 cv
374.319 198.066 374.429 198.236 374.508 198.416 cv
374.588 198.606 374.628 198.806 374.628 199.016 cv
374.628 199.456 374.469 199.816 374.168 200.116 cv
373.869 200.416 373.499 200.556 373.069 200.556 cv
372.628 200.556 372.258 200.416 371.969 200.116 cv
371.668 199.826 371.529 199.456 371.529 199.016 cv
371.529 198.586 371.679 198.216 371.979 197.916 cv
372.279 197.616 372.639 197.456 373.079 197.456 cv
373.079 197.456 li
cp
373.079 198.086 mo
372.819 198.086 372.599 198.176 372.418 198.356 cv
372.239 198.536 372.149 198.756 372.149 199.016 cv
372.149 199.276 372.239 199.496 372.418 199.676 cv
372.599 199.856 372.819 199.937 373.079 199.937 cv
373.338 199.937 373.559 199.856 373.739 199.676 cv
373.918 199.496 374.008 199.276 374.008 199.016 cv
374.008 198.756 373.918 198.536 373.739 198.356 cv
373.559 198.176 373.338 198.086 373.079 198.086 cv
ef
420.269 159.736 mo
422.899 159.736 li
422.899 160.536 li
420.269 160.536 li
420.269 159.736 li
420.269 159.736 li
cp
ef
427.439 158.946 mo
427.909 159.046 428.279 159.256 428.539 159.576 cv
428.798 159.896 428.939 160.296 428.939 160.756 cv
428.939 161.476 428.689 162.036 428.199 162.426 cv
427.699 162.816 426.999 163.006 426.088 163.006 cv
425.779 163.006 425.458 162.976 425.139 162.916 cv
424.819 162.866 424.479 162.776 424.139 162.656 cv
424.139 161.706 li
424.409 161.866 424.708 161.986 425.039 162.066 cv
425.359 162.146 425.699 162.187 426.059 162.187 cv
426.679 162.187 427.149 162.066 427.469 161.826 cv
427.789 161.586 427.958 161.226 427.958 160.756 cv
427.958 160.336 427.809 159.996 427.508 159.756 cv
427.208 159.516 426.789 159.386 426.249 159.386 cv
425.399 159.386 li
425.399 158.576 li
426.289 158.576 li
426.769 158.576 427.139 158.486 427.399 158.286 cv
427.659 158.096 427.789 157.816 427.789 157.446 cv
427.789 157.076 427.649 156.786 427.389 156.586 cv
427.119 156.386 426.739 156.286 426.249 156.286 cv
425.979 156.286 425.689 156.316 425.378 156.376 cv
425.069 156.437 424.729 156.526 424.359 156.646 cv
424.359 155.766 li
424.729 155.666 425.079 155.586 425.409 155.536 cv
425.729 155.486 426.039 155.456 426.338 155.456 cv
427.079 155.456 427.668 155.626 428.109 155.966 cv
428.548 156.306 428.769 156.766 428.769 157.346 cv
428.769 157.746 428.649 158.086 428.418 158.366 cv
428.189 158.646 427.859 158.846 427.439 158.946 cv
427.439 158.946 li
cp
ef
432.798 155.456 mo
433.609 155.456 434.229 155.786 434.668 156.426 cv
435.099 157.076 435.319 158.016 435.319 159.236 cv
435.319 160.466 435.099 161.406 434.668 162.046 cv
434.229 162.687 433.609 163.006 432.798 163.006 cv
431.979 163.006 431.349 162.687 430.918 162.046 cv
430.489 161.406 430.279 160.466 430.279 159.236 cv
430.279 158.016 430.489 157.076 430.918 156.426 cv
431.349 155.786 431.979 155.456 432.798 155.456 cv
432.798 155.456 li
cp
432.798 156.236 mo
432.289 156.236 431.909 156.486 431.649 156.986 cv
431.389 157.486 431.269 158.236 431.269 159.236 cv
431.269 160.236 431.389 160.986 431.649 161.486 cv
431.909 161.986 432.289 162.236 432.798 162.236 cv
433.309 162.236 433.689 161.986 433.949 161.486 cv
434.199 160.986 434.329 160.236 434.329 159.236 cv
434.329 158.236 434.199 157.486 433.949 156.986 cv
433.689 156.486 433.309 156.236 432.798 156.236 cv
ef
438.599 155.456 mo
438.798 155.456 438.999 155.496 439.199 155.576 cv
439.389 155.656 439.559 155.776 439.699 155.916 cv
439.838 156.066 439.949 156.236 440.029 156.416 cv
440.109 156.606 440.149 156.806 440.149 157.016 cv
440.149 157.456 439.989 157.816 439.689 158.116 cv
439.389 158.416 439.019 158.556 438.588 158.556 cv
438.149 158.556 437.779 158.416 437.489 158.116 cv
437.189 157.826 437.048 157.456 437.048 157.016 cv
437.048 156.586 437.199 156.216 437.499 155.916 cv
437.798 155.616 438.159 155.456 438.599 155.456 cv
438.599 155.456 li
cp
438.599 156.086 mo
438.338 156.086 438.119 156.176 437.939 156.356 cv
437.758 156.536 437.668 156.756 437.668 157.016 cv
437.668 157.276 437.758 157.496 437.939 157.676 cv
438.119 157.856 438.338 157.937 438.599 157.937 cv
438.859 157.937 439.079 157.856 439.258 157.676 cv
439.439 157.496 439.529 157.276 439.529 157.016 cv
439.529 156.756 439.439 156.536 439.258 156.356 cv
439.079 156.176 438.859 156.086 438.599 156.086 cv
ef
1 lw
2 lc
435.378 112.236 mo
435.271 108.817 li
434.949 105.403 li
434.412 101.994 li
433.661 98.5962 li
432.697 95.2114 li
431.52 91.8438 li
430.131 88.4961 li
428.534 85.1719 li
426.728 81.8745 li
424.715 78.6074 li
422.499 75.373 li
419.571 71.5405 li
416.357 67.7656 li
412.86 64.0547 li
409.085 60.4121 li
405.04 56.8428 li
400.726 53.353 li
396.153 49.9468 li
391.327 46.6294 li
386.252 43.4053 li
380.939 40.2793 li
375.393 37.2559 li
369.624 34.3389 li
363.637 31.5327 li
356.393 28.4048 li
348.879 25.4395 li
341.112 22.6421 li
333.106 20.0181 li
324.877 17.5732 li
316.441 15.3115 li
307.814 13.2378 li
299.012 11.356 li
290.054 9.66943 li
280.956 8.18213 li
271.736 6.896 li
262.411 5.81445 li
253 4.93848 li
243.522 4.271 li
233.994 3.81299 li
224.434 3.56445 li
214.862 3.52686 li
205.296 3.7002 li
195.754 4.0835 li
186.256 4.67627 li
176.818 5.47754 li
167.461 6.48633 li
158.201 7.69922 li
149.058 9.11523 li
140.047 10.731 li
131.188 12.5435 li
122.497 14.5493 li
113.99 16.7441 li
105.685 19.124 li
97.5981 21.6846 li
89.7437 24.4204 li
82.1382 27.3267 li
74.7954 30.3975 li
67.7305 33.627 li
61.9058 36.5161 li
56.3037 39.5137 li
50.9312 42.6143 li
45.7969 45.8145 li
40.9077 49.1089 li
36.2705 52.4932 li
31.8916 55.9629 li
27.7778 59.5127 li
23.9351 63.1372 li
20.3687 66.832 li
17.083 70.5913 li
14.084 74.4097 li
11.3745 78.2822 li
9.3418 81.5464 li
7.51514 84.8408 li
5.896 88.1626 li
4.4873 91.5078 li
3.28906 94.874 li
2.30371 98.2573 li
1.53125 101.654 li
.972656 105.062 li
.628906 108.476 li
.5 111.894 li
.585938 115.313 li
.886719 118.729 li
1.40234 122.138 li
2.13184 125.536 li
3.0752 128.923 li
4.23096 132.292 li
5.59766 135.643 li
7.17432 138.969 li
8.95996 142.269 li
10.9517 145.54 li
13.1484 148.777 li
15.5474 151.979 li
18.6904 155.769 li
22.1167 159.496 li
25.8223 163.156 li
29.8013 166.744 li
34.0483 170.254 li
38.5571 173.682 li
43.3213 177.021 li
48.334 180.27 li
53.5884 183.421 li
59.0767 186.471 li
64.791 189.414 li
70.7236 192.248 li
76.8657 194.969 li
84.2852 197.993 li
91.9634 200.851 li
99.8853 203.537 li
108.037 206.047 li
116.401 208.374 li
124.961 210.516 li
133.703 212.466 li
142.607 214.223 li
151.657 215.782 li
160.836 217.14 li
170.125 218.295 li
179.507 219.244 li
188.964 219.986 li
198.477 220.52 li
208.027 220.843 li
217.597 220.956 li
227.167 220.858 li
236.719 220.55 li
246.236 220.031 li
255.697 219.305 li
265.084 218.37 li
274.381 217.229 li
283.569 215.886 li
292.628 214.341 li
301.544 212.599 li
310.297 210.661 li
318.872 208.533 li
327.25 206.219 li
335.417 203.723 li
343.356 201.049 li
351.052 198.202 li
358.491 195.189 li
365.657 192.017 li
371.571 189.173 li
377.267 186.22 li
382.736 183.162 li
387.97 180.003 li
392.963 176.747 li
397.707 173.399 li
402.193 169.965 li
406.418 166.448 li
410.375 162.854 li
414.057 159.188 li
417.459 155.455 li
420.579 151.66 li
423.41 147.81 li
425.545 144.562 li
427.475 141.282 li
429.198 137.974 li
430.712 134.64 li
432.016 131.283 li
433.108 127.908 li
433.987 124.518 li
434.653 121.115 li
435.104 117.704 li
435.34 114.287 li
435.378 112.236 li
435.378 112.236 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Thorpe, James I. \(GSFC-6630\)) ()%%Title: (goodSky.eps)%%CreationDate: 10/22/18 9:02 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&k?8hJdO>%LJF5]+R4M&B@"JrG*"3%(_8ZOeN"H\g`7fRO5L-[/$Jgn&1E(u?mX7:r!Ml0UNg75V]27-r]f.%*RnoNUIkTtb%a3CZfR^[AdDl@ub:tU1[X*::LMOLAV=KlI*;7idmM@/IQU2*p^]X648G^lhS];P&I6bUsJZl6&iB/s>p]@P1JeXk\j/Uq&E1g9q%%D`2>@0=aDpcb-;B2sSpoqmG#"X%H5TTW6gb^-=OtO5F=5lg<fHDV5<Hn#4Be%b([4ib&Ja2'3b*O7cGM[/RT0$BI:D^qQSikOi^/%7KGZg:0*CX%tYg,c7;?<<&>?h>./3,3djg]9nNtZU0:$8p?&IUo\A]>CYe/So@of!9Y9uk>&1l\`=BN_7H&krFB+\L_^V%_K@=<H%%7PL9Q-]-T[mmK(V\q?+-*P4Ipa\tPCsZ,:.[lC`jAimlR]_scD1r#[M]c9]TC_ndch2c>_aH^O2nQ3;0:o8ok6IU@Ek?\tr')lR%WdtW-Dgla#hPdn:Ra57V#hA52X%0;4H@mP=]O,O*E#'2bYPQ#E^unnuWSRfcBf4aeR[3Q*C]W,WYkE:Sh%@'*G:.>%k3(;Aom"SX%N1sf"HJURIU>o?6Y(-\*<)%r6\q$:\[:[5XRu5eu<W;,]YYM8s2?c'=3/.#iBg4gF2jZs'mCSq_o:q?[[[).4(QG9T"FaVO_juPP%GJ!OF(^(sqjiFVq;2Rm,gq`)[J@EeW1JXP(!&!>@q$W[B6HuW9[g#Z-24aY_rSRFq^Uo<&$N(!@Jq')?^KhY*="4i_lhFQ5nYr\O%;dJRaeLJ;XDcmjAJsit72jUa#/7hu7WiXZlZ&J!X)&N;2gTHI2>Sg&l-iAt#.MXL7WSj82$9kFgYY;H^:TIL=_RHRGHsWrG45=?6%0DC6+jJVdMI'*RD_;A?%a+V44'TPbFPb6ojn2HZL&`IXJ\"!bR(WV3DnJdJoIq)28:L#]9#_1mEnLm4K9\:]<-F]&4E*W/Wb>bMJ%PO!iak;h[-jB9@Wr$IJpHd@-'^2`JkF1FcG"TQA;3'R8"2=V%EW;.=7)#hKP3'Omi4=g=^NXpX"2]NjA5Q9f:,6WL+.3'H/k#GqC%iHaPYYsjKOfQ2m6Em;+D4R6+,k=s50O.:QX4m.96]3M[I0.nFJ@2U&U`(V-k^<NG8V`6m<NMRK,EI9krr%@ug1,ujM6"79u*M,9/%J[&G=Yf%95D:ipL'ZL;J(NN5qhRRhmleF,=)tmO>L`@B.*D=N*\TWFoTCY;83E%871Trgb%G+FQIuM-+[IZJjJtuG>ZK+.D\BieZ%n_V;NI+u[b8a64(b?=Pj!IH))'&WCq6hXOR=16<FnscYZcp.HO>Yu791l\.&J,(1D1&U57jaXgmBemX,bPshhdQdabs)T1ZmPqLh%8,Om(q2,-<s(uZEGQ0>rb8%Io(ukSWJ(r`Uh>b[u'^m.8F'Lg)c0NO0jZ!/Hj3rsE@90jZZW\qBr.G%1kEqknbM^\hVjt&&D]qfZ%ln-uODe7K!Ja]V<_/f]Bfhc:=8r0sW>Gd*sH"Gq>bEe\k[8MaejN`"Br?&n6!!M2@otZX5Fd8r@7YTS>=9Y;u23c9B[NX?R=(k#"%]i+OWO+gNeh@o]P24!>0`@/2(_eWK<(@gd`0pQ7_a*m)i7qX'LF;atmo76ed\#WMU.p%i(?]h1ZUIb1:479Tr8uodTg\,Rd<Z6<r%CA`\qD;/DJH;BKXYU)'AaLoK?(Ool,UMgA9-IuFe<)U0<RABh.]k,Dc!V9<@e.mOo'gX-d%KKCmF63G(oR*!Dicd-Fnt9oIDlYSH%(%+*TGSC*$Ajf-0?FA^KV9X2TV]("Gq\k0&!*9U+M#9LgF._j%8l'/n;M23F[`^BM8c6E6HY4S6L2\6ED;mC*j-hE/h!)ek9&r'D%9?'!WMs%?i*Rgme<O<dH!V%5NTES@=1_W%ob+A>kl%N2ci'*E:I043#a7J4&UpJqNir7tqW5K(+>C1F_`(`&'"1+<`N?EWD[O#Q!%@q*$P81Y.p<D]:_J&CoLH.G--*dpp\GU!^d;eU-06L1Hlk,BtC?<Ch5@d5(c"#Mo(%<5?&:tr@+.%OdgQJ`3eF9^aVNN&`RqS^i'%pH0K5WZc\G>Oc[erS#+1`'tT=c5]tXa?f%.HPY0*#5dY1]5N%QD^W1h1e<+aa,n;Fk&L"!GcF<'48CFa6BbG6,U6bH2!rO9*CeaX%^^V>@p/eSs<i!7B2GfU:+[HHhWFTfZ3ZrX&5"X]KX;-%^ONY3;YIUj!"gp4P7$X?Vr'PX!imZDL1;,ipRss*@FiV<%hJXhXS2Gl\%RHZ3r/=!q>isruASarWpG?Nk7*Mf/j-oI#OP:87jF.3#%iURl?:?sbSYlQs_Tr/U))*<N^eFk$U3fF@[_K-PYiI8PL99R*hnKRt9%07hSQ2dQ:SCHJM-d<:e_1.?G);WVeHINhs55J$4]G/'Z!Zu'^ce7AE?*jS)`3.Ai0g;o"#fei7cg(sSsI9US/%i@Q\a&)%cc5fg^%%a_Z&"G>k^IEp=;EM_!OpKOd!\2N&eVtV82MS@uX06QscAC7X%oQJRPJS]t1k<3-b>C+CW8e+SQ6*,llr_K_AG"IpKcf><YHU+_,%cq_Z;4n)fscA/EnVsP?#1VU<N1-c>+5@GX8jDU!,2uL<iIL#nmm8sMk,)%ApmJS:nkI8o4V#@-0Qe>!lSgM[0\Pi*D-c0rmPnZ8l%3PG^k=COEVlg7OZm_ZoD^\Eq]S:>k:S#tCh%'!.kC_)8H?4F:q3+_G9b22QANI,`T'jn!-R&Y"kRM\[k%Ic9@Li3Cg3)bb#&cN<L%NW3M>MVkj"gTEdNjnQ<is3UWMeI^J!j+EkWC+P&GO"Jn8g3,,tM7o:6YChL0$sKVQ(U>P_'T+dC^$8lXS3s13\/N`CKC($oM\na+%%2'b%ee33WXd?u.R-/&S"QR(haUIugmrQ=5e@7I!?]"UKZ:+Hom"DfaVT\1pX5>hcn*(C_SqM4]4hU3Eor%`6[OlVoO&O$#89g1F%=f74.m_:oD#17AHJ?^]:D-8'^pVO8@V3h99=d=4q]^5[UoaHl3G&RqQnp:%'Jh*+pf)7^"rDtc1;tNkoD-QN'Q=?&[SV\]25EQ["%md20I`mM6!ZgE4s+DNo)GO>_-2FZ4ZSPl6Pk^!d%D=ZHT.)7-9>IeCdZ;G;M^B"]@n)4aB%s,%KdGI5.`gZMh->@*GgU^tRpD8<H%4%YRCV15`o3.H#s6Wb/:P8hBjj;J)@T!V*Q2,lp3^j>bPWE.I$(,h/2)PciW^(2AiqPW:@g=d#%q&b&]ddLsIgLBgM>I.moL>p/?%/qc(Jd/$"E0)\S>Z@C6iO@&35bJptrockEgQ01+:WtN4:0TB)L/+6LqNYeg2n2YZY2EeJq9$bo"?3FHUMC6l`X>,I=#T?d(#[`XT%N0;11/e$*K[d_$OC%>IqaR>MM1;'1-LFVS)1;:Ya1eOM\>X]L%@9B\oDOM99Xq<Sd]U:\@eYG3$e^1&VSPIShrq;ZCpj:h2&t$]%%Cmph?N33R>Lf*S8`U0LXs"t*&"6[-*2ed*i@*E&OQ.s4l"5M[dZ'hcU6Q,]0>&;Gc<ijG`@3##BY'Q4d]m/sd;oCl^.jf^;VRHSL%f90iaJ2_"D(e,ckN!Xb]+u23pccV&X4IV-KjH.(Y*\ck5J]<"]W2q;V*[jZL"E$%W1ckJ>q,S!Hcsc,`lk/WI;c.eH-.Y1he=f@C%3Ne0&Y@TB83=nEl^7R0+WM7ccR3Q%6%m+QSMEgk%&bY:69?qh(c]l3]''+6VBBc*7q)<;S.^fQ"EBgJEM]n;3jrD'O#;dG3=6%$h%O0hU#ElPL8*V^Jr]p5$:FJm91A+Fh]l&*7l&T;"G`gA=Z@pj^:ZmOb@BhehM=3SJVDs;_*L@+Fn8.F>2`s>Ua<;-^F&]\l_8DK^*%1UX3:ZUGGOAP[V7TlJ`69AbT9jn4216Q"-[L(%^N81TAk^#cO5*(f(,[1]g'IYJ-V]:T*LBarfP%Cm#1AIGKmU5W\r5IX/9jZn9V%bj2OI5%6^=-=d$D]iE?$$<^>_BV0cZ??bJjL$e"I-IhUa9'[3*TfY$[p9`Xj[%@&\pR.VCf=UKiS23jrmuCUKqRMHN]X_NuinU(_%hVljW]Cl03fDO=Ec'BGUp\"II2We(*j\P;of,qSFq,maf5FoPRGO*6%o@mMb7Fal0?-i+0GaZ:g^]!'HWrHnC?iARo]&!:bhIsS+%Wq@LBk%"B`Xo6hclI/5)=_m1,maZ^[r"hJp_&W8nqlp'bT)\b8heG8t?G.80OOICFqu"g>TE!a3emC4T&bE6]c''K%pm'`Q^NY.g%5IXf*YB!K*4S!-ah'E>mrGQBR8gh(J&-&,75C]=DLoWW8aK&Zus3',pe/F>0VfqIpfCM@76SZp#f(dp+BEbHaW&Ge[?3C*_9Nhit%Wt0"Bq:p@N.3PMJpUBhlL1b_kc[XL%l9o%9?WAS$mT!rW!FlPD^87ZJT'5_Y4@l4DGGF$:Pn'7bIl6I`IQ9?6"&,]fhWTEXbEn6)%YP%g&Y&s[@q?D$nMCA:aS5Q.M!q<^Z`"2eGWWk,Hjn^(F_<4*hQ#lLq$Ma0NI+a8c^B*u1]TGG$hgAAnNrZjSb>IYf\Ip^*Q!D$+%?&-0O8=1-ALjeIN[+;/X[cOa@e,.@[NLhOb-Ws^Q:TilVOjf*@l)*&Ag"IS7F9pD#(T1o1<+$Pr:_eGtX;n;:rra/gM?";>(O_RH%R'8E^/'7711\gA5!GA1YrgUZ0*??31*p^'A=7W]tIVgq#nIfelp@J60[gmMgLdfMSG3sdWMD<U&./!)q\ae=T2n=m50C?U"GYdj2%pMV<uHoh.uft%!\f']U>'qRe[TW<a'r`*aHbH_EB,a<'G"`lEGP>:>rs.cpLCc1Mr-Do1:Gc<o>R2K.JnNT+<qe%sh8^/qI5RpV@%O(f1(`tp9iVWAn>-IgP5a>EnZg3o`f"nDJmlMjM1^AM&E;TGO3@>r4b4hQ!MXk3S(-i<)rE4Jn7jToE=OB>P*r5\%'qXS"CQ2a'F%C$4ZoremWCJ!^X*NTZ)sf6OWuWC=_3?n0Ie[79^hJ(:0`IV#3*YN12!#oeUt<%Q)S2m.Wn5B_Nf)3u]GT,j2@P%C7_rAtZErl7Mr%a)Uejb26?Vo(RW]./D;'X-GH!qc4O*J]%?1/t_BqAQ6A3r"mG'@X@4>p\$tF%U&ak$\&^bs62/Kf"8=[d"OsVLHAs0VB1H_+U`Gs%$Id0W8+jpcpXd'-$n?S@/t1)sn><:h]VhcTcc&2^&UAB)BYBs$D:^lBDVd=_U,8fQP2+r0O2CNg,jDtm3\M([lFaO9O]&U,ZbU`g%P2tZXF&?n)!I8?9g>5*<Hhm5Z\!91YFh78>oDd;b24"!lr*/OtqVQRII;b5E.Z>0GU=Sbh[qb<Nqu[uolW$6snMo?F]3[#*@/m8$%d,M,hpJo>976W4t*kQ2kRWm&[id,8+C300=.F7'TFOsks0e0A$CdrNudN.00Z<X4uXnc&#F7,%B1/6Ru**?Olhg5VDQm,XUM(e[;%5`f0Y%L)0/\u-<mBso'h>4:;F'CX(?7nlG3!VYHMhYH98%S_EQ$2G$/1GgJidi-_BY@fHAQ<k(a_Doo'PP=JaF>UZY>+k"q]@Q>]%eUW)jre;IV56;&2C$s^`J"$8;876CbbBee>6gI%6g&A%Ds'5SJ2o#=dgo]Bs2kIX2LG:fL^(5#(Vt\nD4b)13o2[PA\W[!WEI`ha%o,DcTNPg65=.WgR"LY7%TT.k[D49mh^Zl>8(r1R%;/8?`V/#(V2`[8V?hO+3H=]1O3#I#Dn?;B;XQM\$G3_Rhb?<@D.RbZ!.ppGG%eb;O#NrQEAm_Ah\Bsua-0X[)0!*VOmg5kpI?9X`0*OiVRa(fSe[nk?A-]rBP-UPuY6TYlSSd,Lr,aJ5mFf\A/j:[`*c(ajBF^G:4%6Ac:p`FpF[E37ND8unP(J4i-e:OT8/]KEsb"#@O5V08tHLUl^"E=D5NrKAKOd@aR`7Gj>J"F@c@d1u)em'lD&?Rq2D)\jB&.8hj"%XEi-$WBgj@D#)_TIr5m][5uWS;%gfk5]0LZ;Ijn\N`D1,.tX)5K!]?`OjPo,/6t"?Dh_pbaQpD/::p5pN;Nj'p6k_HQu%R5o1Oiu%2n8750+ekU^=7W>GbR">!>eM&K\j#>6lDLF/s^dg\G2`'`GbFAXs$o`gKV;2Nm2*,__R:c@4*=dDluRQ"`.r.9e7$$.*QSZJ&98J%oCmat\([Kk[F;)khtONb-*E)[85GBV"Zm>U4]I5ZK$9`2e@49A)suW8]UdWYp1(AXIO_4<?Bk79+Go,OFWP:W\u_rN\\D$g:5.OC%%t>s:$C?$OG1*6%b&fpF#q24T)#*\!;XE=bE1\nYYLXfmP^*8:3k<EuS)*(6,IA`$ANK;SE`@?i9:]Mo`)\+Z0:h,$1Ql?bO_4Qk%k$&f3KcXFB/o;W+P\I'E:28T+IM+*]q,IMO>PC-cCamkmRe9F?!<u3qqlL^co]"#d3gncC.+!9eB_<h$8JsQ(G^LUO!fjpb:;EMX%^i[4J+#5PR.U?gJV9Ks_6;a_2>km88^c5pZMW_tVQhiiN1=5#%o=)'h?VX@7kOO+:krjW5hV,*(c]YZBpng;&WB^9?KKq4c>2>iM%ek#psjDRimSSge%'N0CURb)1-nMO2#?_]1@]KP8u24Bppp%Fc`EaCZm%Fn%5H-^a4%krj4h/"CLP&$JgO^>?\b:q[EPdt%b*KY\\%BC"a,:;,DcfWRiN=<7@FhKaQbep>U.=CqJ<3$?[bUk/U]:+]Q5gcp!iCFM@NMfP5/7%['ai4sh.:$JB&/#B:KdaR[RnVSbMIQL+P%[b@Ypf(sIg$N:/TqQ&0G++YO@V9##0es2mu5T^rQ\,Q5Y.$pYQOM%\SEORbD"gNS)'(XX1b<)qAh<1qr!Cb7l`Hs-C7#a6T=<ELj%3ngjb@.j1Aedb*eoi"'$LN?g<G>]d>f49E'!ZWCO@?3uj.,,62])>5+)24>XS8K;SpGtZMYLaZ7#'ui6FKjB%VG(Z^n"';UlX:IA%VU.&5Li;[QX_&K^P@!s?4J\1$(8,a!]4$Cc<t\K#G*F;83>koh.1>`6rJPr&2s?Dq.ECka53bt#iaYtZes_8WhWZ;p9^2qr!ZtbK%:2psO$F[O\lG:.7c\GGb`<0G:J=#E2p/h1u`;T:3UL"FWOB-\0B0RLt*$:(*ESMtrjRQHVK^^)e/b8IXAT,mL\*D&hYh"Lco7t#`%IX,9u8de,s$gYR=3e#M9O.V_\n%gC?'0TIFf0=I<[sknM0=t.qX0o(%b4V4t<*NHfZ[PWml+<u09;S&_>[_)MmH*BHh!nHi@e&&+%4SnTS33hteHp4f[FL=!2U`=)@C%Ze<RPuTDF.\DOeiA?-D7peP-U62S9h0E/YL`$kO%V^;/c1I/4Shj=h7ItZ=(o(p<q"4iDo__o%#B"2!g&:]B=D`ID0"9TE?^7asea(Q3eai!X3a]=bU(r+Qdm@V[rX@LB[$$0e""NSkmPN-i:SG[$]=lYg%#lh+.4+#ELZ/!/j&EXW%g@s1A#NbK.8hH\1e[E4ASW?UVo=hH;1\$##:@#4Y;Cls\*Q.]Znf,=21uRceX`1&Em;GM(TAggGZ+ldOHf'adNIIK`50O`cc2*E'%cNcOcpdRJCbdKTJTcN%SWHr>RC<Q3tUUc!6ChIAMBITWPo@Ieqk'B,';<.LFW@IL0Z&MLZ+0AdVg-1ufNZ5#srVU4WTi#U*E-bhC%-T1`ffpV\_iAV*R#rK9#Zn\n2?bD8ei7m-H9/LrU1D?0_IAP\CUdbA$n$g2MH4?8>:"qnPB'4JA[<Q2_*`WuK;5;Zo9&Dj6',reJ%-^.iN;'2"4fin:MLVdUhUX]UM3Fh<YNHWJ%oV=s#@E)J0f<+hQI[lqqbh+#kEK.EaJ#J(3g%ChQEK)GJGC.SQ'NtgHlLam`HR6C'%j8,6CrO.%g44;5cB;P)q\ic$h1fmLs(>k/d`bJ5me=SWo&k4oZC3SN0Vm4YFT'?2QSR8ib-B=`rq^km*NqLcU]G?K50?ls)[E]:i%0"KBsgQuYgUgH'F_jbL!Y0gLJ1V*C\A%t]cZDcGiUIXqCkJThK?LB<)KLTnBPk4!_LDiT$MbNWVdd=k\IBaaGkkX'28n+R9\%DO,%EK)1*2f:+fjiiu'42I,9;t&mFpQ&'cUR-aN/$[K[S^L8c)U0"+`d4:_^?HRCNNUT5IfJu6*8B\Dp&"Qp7Y)psZZgWTm[&S5^,;-n%-_KS])a-B1qL,dEEB^hYDr'D#C)#c&moWpm(Hu(M2-O#J55k9ohrr2%>l1DRWC.YY<iF^=hb."e"?X4/?]LC=DR;=Th$Fb>HMdZa%NId'AoFT9heB6S@pX_L"b/Y$nmH@Z%bb%Uf7UOsHLnsj>*$(NuW&Ct?],PXpf^:lh:LU"kI\Y8I?kA+4M;'J[$B8qFH<B-CbN24F%B=A[%dlUF0T$2/Khn%#.U$8,[=BO6^h1o%(fhsIR]MOs]_[jMUdHZ(cdJ!2.S7m$?;_^D_h2BOpLQBr`^4('H8<%(/4P$L$Nd6+q%MN')K'7B.qR(V^5g4Ml&*q%f9h`!2($Mqg<Vje1cjQh`Ag\odfn$S"5b22MP2rX#FRTf$I:;oAM'rW`['K2kun7`ktftD<-G'.!-%k<3K7\bk\eMR'aic*i&kD:a_/oi?ROgND#RYBKiuHQORm:;1Oo8pK&q3S<)YlGPnM:ql#uLC4LPHbsjimW`7/I4!q;_9^SAqf4.Z%WH7u;Q',*NN1$q<A_LA3V;A-$LPsm2p0,>^O0b1<O'adh:V@W-gmnC"h1"3SG^FZ)Y$ugnNIQ7RY5Vaue*#__*hS!OrnY->?:]<i%p%qbXPdH+AYCB_K06JZAl1MMal`@P5n&ET(\+psR]6iGLqf=4^@Ed3SQ*r`aBNLC0XF>:sm7s8&j59j8I/>emHZ(\5C#R75a33.m%j7Tp[mIoi$Vd)OFpbY'jc\oK_[EZCK:ReQ_["esqbBL.\M/P1SYts8,/C2TX5#2$KV`cg?cWB;l2nmMfr3t;7k!$M)(>g&cWASmD%qDWCIAbX5Z`A>d*37BEl=\R$]XJcej>A%:i(,*FT?$Z2>H"-JZmN"N_UA\5_=?<qo?0LRmk1A0b>;+?mo*oH\Dn0uN1hXTD]m;&9%LTI;D+2)9a9$aR4F.hJdDM,Ju$M2O9Uc,Q*\g36*kuLU`Y>+9&rqBdQfX[V<HO7jn@'dl.D/uD8eaH.fN@NIQlQi0$CC7/=VS7*6%2]HN(qKki03tl4HUH:R)CTgSU[>R;VcL01(lhsjB]$gp\n@)f#`qa^qH9Z8:"WDgen6sIX'O"XR>TEXc7OAtWm4H%Lj8(gIdE1[;%&u*NfZXc-C1^_eZfFIXINRe^]7;[EB=\]qeBdAOpU-<U[1qefrUT@aSa1D!gZE!16kShr5I1cp-r;N(_grWMY6Mh'8-Vmbj16cRh%hn9^*g]GO_EQ]I$lOhR![hiZn2Hu_^`d[\^62b__-:Z:^8+AYgB/%@rMrN@"&oc`iIgGF6A+;*@:T#:b4jMh^7)*MMS']REf%SmF%j6*Am#b'X%rMjcNnCNoV^jO)F-+lCfT:7ETIe.au$gCoMch>r@[L7Xn^_qQK><&niKhjr2O[[3-4l6Eb=kP_A"o<qo&2H(1cVD+b%Cb;aElaq]S%*\Uo`@635J<K5HT%YE88a]P*d]#d(9$^GZMtDqjPPm@<MiT>a(i6JQo&4rq8Z,p.6(9uKI-^(6@GLWuL#<7$=7'`Q%D?^"3e(66;+8&jQ`?TpeBFc8Hoo9T0]/$!B=kVDFkI_+2)/-<R._AADp08aC]).\fr1*S(PngWQ]^fYcLfl=;2EeB.d**l^Hca=h%O_=[-P<SHG[)n30T'O@-PkAkM<o/E;GbYeUSm7uXC4+o>\%d'/]INRK$/@Q9+I'06Wnb<Ol)+00Gl&]a\d:E'Hff2b/a.gH[[g*W%F,<95VcO?<#9$cJMXa[':A(7E%no>^*Du+0]*j*f5o^8lC@21`.\;W+0><.Z7%XK+E1$%IX^[+(G[qZ.F/==hr".H0K?LX1F8L`i%`UbGf2_dO`B>5cbkt`AK/-[eR+f2J:nKpV7nPoV?Km^+?pKB(>GI>Q158iZ;Sa$KECK7Q7_HJR00Cgd$<baE3/ai;R\E-+Q.D2>K%95m1;@`RCrD=U4l`/W3Kf"u0t?\HPEIhI()rR!O<])2#M>hkj/dDDVN'&#u^HZ@md9*0$=Zr;6e<n=U0qUk%+2*iqhdhtN_pp_""%WWBAh.h&r%0@'IQg/C-$6g*ncdO,FC=6eNdG;;TfqYeO/dQr5pVNSNt+_X++$7;cpK#ul_c_Tk(TbZpldUce#[O8(sM92Mlp,H"*%:@D8eOL;BCG"5`N6@7]k=VB!j5"K%])oIVg3UMVY(?T94c^=3<#t36#YHF5/L?gITb4acIZ/8XRo4*9]COJ045bX2#@o'^nl?08V%UL;..$G0/.Hj$Hsg=<pND]T<p.._=omn.cT$i\oe9766^a_pggg^)`AB6JGn?aI<U'#q6.nX2]V]jt6B1_VOj&_<1U]@)`JAEcWa%[iB-XqN8JXLpW:1PF@CE;4CX2`aC\bDeXMMmSF>6O(I#j57>'2B=GI)23?bGf]+"/SH7A5!eGk>2OW3o>[a:#%EST4*".k`n%CG1%!#XUK61+WhnZ=Ho3_H%8>fK@mlMA(Y-@\KUP7RNdZu;LBl?JBt#kC%7DIE:'md!QPaa`b.5LmmA%/?7V^Of\GX<aBNp'</T-d*K<%ZJL0aj2Ymn6K#r*eG]+M<d0&^dXIFrP<:+)^')fHVpg!VW5&(O8G).XF;4@'MDMbQpO3!G@e/Gp&u]7tX*Xq/J%Q?Hmh*`1\2Rag%Q$VWT9<OB7PK5eXrV$^a\m-=1SNcH?0sXPJij;N4GO7\D+A)PNR%5LP9c0&rHo'ht#clAjR]M0Bl%>oa*M316+bMO%emS=&e<"`!%oeGl1nt&fF9fOtRD[0]*W/#5pJHXs&V_QQA5u\$uJ`k4K-KloI<t=PUf%2P^HA2I^dP:\C,4pV!!,i+h8jqMF2_jRB_Ha:C9@.6i%G3m'+OJg:-4r+oVF0c85p^J(jeTj43V,LY:PCX%$]K^tmpSGruHZhiaqQ$j+;AORe*)$%8@V*]\4Lme+Cu]q3>btFn&UApj^AdeY%%ESWsj6qh'4X3lJeT)W%f`ucm+S?-kpB(&;9P*0'_L[ARBRc*hnp*$+;Bfp^3t/KW*"b.t4'o.p8XhocH[JCW`7=%0;]/CrF+lUN%guE)>0c]RiE/p7F+T^:6"%V[i7!G]<C[a'D-#`WN=da77#qOIof9@am,+MGh9)BEE*,Pu8^DNK9`VD-bT$]RP`H_)_WLg`?Xg8J5%hRt<LqW&8P>:6*J>>Z"bkg7mh]T2"9QD,lc?i[CT7tS=X#!QRR\[o@G1o.Hrahr/=0j2g)58]lDap):[7/MgWpA/Xqk_CQ@s.&mp%j9d+^-l@!/OH%0MXXC-i%Fc=6Ml^RP&.#9^<YOiUH1+s51?Bd]jKZ<'<7ue.^GK*'.!uh>C%u6RrB>n1[sppaNb7gTL"/\DH$l^.%1ka#WR#d*00P"<OAL%(W.^284l-Z?[Qbcs2Yu9r3./J@j(*O&UP%%eXo_Z.%EeV7#A<M]3Z;>S/g>nASMDU:564=0-oOX_0V'ktJ%W,O"%rDf@=oOVSfGfgQ78CRg9?f)OAdEki*<Mk*ocrfM,;.e0s,u99<1(e%$9c'fbqfroSH#7fGRY@gnakSZ!,.bofk@qQ+5RQ]s%lb%U:i:?ial(VI@-W7tF%-/-89Z7jRFIahG')fq/K'C"5@\b;<XsMj"f?m^sUoDR'>[WD,?G3/h7Ti+8.T"ZfW+ZL=b<WZu=BRR=%').s%/H4_+SUp9&+sr)^Dc8/Z:baH=;G-F1?j&rt$CiMUkZ"!T3/+k)M(F$>^;@ZOiA'^'cXrS.S$j[[J,MRObdbQI-"lHp/qYcX%(f(WIH3RYN`mBf-FQjZbCqYk#6^OB1Q^03_8.JpO#$j2mE;1EaoF/<9@6?Plko"T*Cr)fdkgD9NEeX&Ed%tC%;09hqEp1rp;>/HU%Ep1q-k^m-N;0(mK1['KUej"pB*0?\\@J1J7D5YCh-YEKtr#)G+8Y4ef&++gsgT1(T)=jU*>2P-u[AP,C7"f1HoYN_]%MDF+]Z54W%P8n9pcogu5g%7b&c"B]S>KG_j$1ID\<44dWpdg&)T/i6dI)UR,P'PJ#RlUGZPaqR%`sn?_V;@FsoSsEK1ma3R>V?<&3Y^=)=9@"Q%Tcd&+8\lP,\&Yg6a0DDEa[Caj/QHrfU2KfS]7hIQ#BL;Gq(etj==1Z!Dqd[^UqXrg6\U,F\KspCb._c?2!o(5?r^Mk"3^WD.gq,?%J^(d4&Dj[k7VqX_bf>Z)X#>6g*o[_bH?5c9%!rbsR[@VH:l;6nj3*n.f\a-@`pI=BoWb@\XM<e7U"<$0\.b2o1u+,AMj'[`+.!.#%YmQ>5?oQn`F^gFp^@\0.1<8'2mNb7=#@joaVc@bPg0/]K5G:_!WcXa9*]fQ+"7IgIVY,#.qo->]ON5sH5AOYAJ3:Q[3AJXs&B`rH%Q(9kSK3A3!7ri4a+I.YWb(qisgW+%HBZ?4E63\L,i+U$R=P3.Z[sJ1I\ndjm4uT2;n[.%0JPhMTU>I^P?S9JQOt,r=:1EAGB9du>%U$h@FF9Ws:Qc7VCEUBV?HO4=QBUdV;+%E42e$*;`QD!p9YB7XO"B4E:>bU#FO^sq/3Q8*bmJ!65j=S@Wg*]Wbi*:tbdugN<m%tkM%igk7U9omf<Fmb/r4`[`5<\.klV<7Wq9V:GiDMoQ78SUks$$%b*-TND$D?YdCa.Q(ZXDSDA+%r-%mVGpE9i&*ban=mtep3/@ie1/o%B%UZ]JUX#,M-Z#",@`dh5TZ>X0'S![Z*XqOC`]!ndHMO3i_m?%4hG30h=!`o1A\BTf#OZ2ifRAF%jjf-;VTOUOn&/?qNq_qqkJCH%_KQHf#;`+c/]K$q7sAK>6Q=f*'9b$3rY[UZ34N!P)6(O8k7-F58au?3`:Stpc^:4)F(8dujD7[+)t,qHk0'ADqT"S.;3p)L`fZIp%I\EW/$tM(LfF)mW*iBJW/M;'%/<R97TrlTL*[DPa05h)`65TKqO$uAOP-P8gjjaeUb8;1lHB:!j00QMaQZ9!m_YjR).(Lu+OK'EM%B+*7BQD\==@I!o_9omA)6'pna^?7KHiA_mUO'@"mI(3V1*ud<a/j9Vgh"bn67AshDL[,VI3i79ailNED@)%*!fFpOairb(]LPnVh%amHk5k/50.4,T;_3?Klk.03r"LC:1V0ViX2q/A's=MhKVH;]LRTSqlh<RVO.F%g-*LuDn#1.t;O:R&e:[!sfVH9F$WN003MlUd!C%cFh&QogFc%6$hSU@oUdQ3VH]NYMC0?"5f`G?)0O"U@HN\p/B'eAh+Bjf[:FQ6:C%nrY(pg23s3"PAY8[KjIf'R7oUIHn:Bg[r8I*%810C1j"TA#+N*NSZ()"loq[^Y2X?Xn)1`3K[/^f!Gh*>UPJ!M/J!sDIQo.n[5%:DHBkY>_H;87o&M?J!=:"5n8uEQVJW/)3j2ad)%rA2HP<2aV\)6()p`fQ=_:7C4a8?GT-/Z.-_/L)"q)2W89o#3AT.akdbZ0'N.)6);MJI\-enSrtF+=W)C%N8l2-gE8/0(tCcnnaqP%aQD(eWGm]ACojUTW/pV2kQqc?LfCm[FW#*Igdln;bc,Q6fp0IP_F;`m\nh<jWGo+KKs@Pm-2GS:g1MNmZ`o&&q8k(B:Z2;1_+oZE%l=8FU4&?A"cD:=srTq?/%V2XlHk?)Z3m<""I)tebRg\1koLcBQBaZ:7F9/`GH@0hN<\bpZ8%Oos,6H`L)"A_25bIi&\6*j=WZPN.%C&bjABlAF%?Cl)"\snK0mI.*"X.Qk-e6J]Q=k`n]2-&NuhcaAHs1I(^Z!bDGSPpps;lO*Z<Ze`;[E1#O$-D!Bn0_S_,eG)##BR.(%@>B"=A[:(?jn3?7I2,?T>?e8c>ULi0>pX*RiQZab8qn?lX.@V922.B3InNCWl]YcOVC+<[f4lZkMO/'B-08U\Ker'>a_n#R(2,Op%!_-6cH]:LYh=-$?7T+u30pe&32d*6t',srO#9Q_T)TDUK$HDVeO/-<q]<l+XBe-aASPN0krC2/%j"$W^+4ZMm4\M4"j+GOn7Y-V;%DdQJ]X#eK1(<B;22S8_ZeP`8bH:<[T@sWut<.<%EQS[.$Yh\M]qk=bDHu27d;;Y!7M%Q\O[$^a)+h(;X(8fWP$h"[EAI*7tQJ/Y`%3E9RR9>Ao9'(:[f9(#ZT:HW?;S;1ajNpS1(\9m:GcVteH-Fj/jE'8uJ%@ms]aq^.)kD4oRqGJu/lP%l/VG#t_a-Uc6>K0e$^0U#N%f0JIicO`\d3_O>bqr>!29<6rqq/PArfe/r`kNO!LRr2=mb[B+GEHZm$Kc=)O?!K!fr:r%AACJNn"CpY,`,*#p>e1M&*s^H<:5lP%%3h%`W/^`A=0kJhQ<RphsOFab&if*_M&p]RT]"!0WJ?0_h2I0Q??"@SY%,#`BI[9K6E9#$:Mt=@Rf'BiOku,g;)Ik[2>V9;AG'"_W%FE'X:<e%4(FE(TDSnpN82I5,7jU)*hV\uf)imob@)JZ'a]&'I`hC1QT2I3V+3R2HPJS&`^CqAK'n1:teB@@;O@tS@A`E?<RZ"MP)%<C"+FA'Lm/Wus@pCq@.4P+ENcOgF<3Ep9=Llfd#DETpulSWRo&e&CFs7HM_VflV4t&\9Q0/D5+_1:bDd9c'-hQZ=2*kQ]uAlrKSa%^rZI`:OQ3$N!Wr,Oa3"uRj2.s;eBp`g;USjX,H:AWcg,HI<DOC7CIL,Ha@Pp8\J8ak)&P<:b8oG^fK&_:e8fVNpfqcQSPgt9Xi1S%KMQSniolE9%/KNuk:&$F,)sL9bYpYTonG64_A6"mhXg&^=<th<=f6N,!`CTFU:UGHf&EmD$_ML*9dLnZR_*)?Z_(ZU39rGG.@FGo%''V0B$(`31/2"LQEBsEi0Opk)[q*#2/rN5>J+2cQ&j;+$(YrZE<N;j#F!l%d#)NFWoEsjK(CO/]@ijj(X1*_dj]SZ<J'+#Rg-7t3%L:03+E\>\m6)I`m^eZV,1d7&)cZKEinaf#ao8b&WY&EZF/lRL5EY(alX>HFaCFhb^#DoUu-miT;@>fA@Da)S5CSIJ[58u(d^B`6<%MF1XI&<2E*+($kSq)G.Cc8.pWoa,FuIEbB3I52o-7c"KG=qZkucP6YbB/l"iZBD/X;(7TAM=Br/9]>u5>uXu,`7gFpfV=;2h@[^-%b'EohRP(GCT*gC><Or9HGf`!2<i0Gc$kLF^`2WZ?T8uZWLAP:UPR,dik+WI;!/k13eAi1tN1ms&89I_=.;s#](o")O>K5f:.l!/p%&DHTcA@cHQJ*,e6r2AmKV>$56Tm!K9T#'tX'CN-j3MLcN;+9qF*:P/D#_Ad!1(:\1Mn7Mf:Em^#T>$^B)9Hin)t*Y%b4n'dL*FO,%)t&Hq[sF,TmS^E3]&RZJR?(P[A%F+m&,BbM.;pb_8P+-]%6UZCUV2$FP-S=L3UdK%II;Gfm.Ff[^Ypg2WTG%n17#j2&[%74]k1'A%X\I[Fab@uN:TUZmhT*291)Q^Ybf;F`f&$C_bAJEoS1CaT:iBCi)%f]k(_UVh()c>#DN"1k-i%#W?t`9m9ZY./VCr&5\&V>;>Bj6A%a4sQ$).&<hf*^=1Q@,o18.EY%`,sUkfNM]4ei/Sf-R113fcF7^7)St<jC#%h<F06W;eJ[2\nafPpYkL39_?Pt`8o`'grm387PBrC%o0A0VB;?<LVD2X[$nK;nLgl1B</Q*78Og\g3`.W-\;NXo>W8j8-(`TtHY,F5d%6U:f#K>a\mrW6(;6J_8-^nN($hA07Yg5bhrq\_%OF"CokgquSG=^e+b'NL%dB6DDR#5E;VrbGbe>nh6G=urCaY^>MV;5HZ$_3scH/63['t1hWY<QrRh/7.qGHK3gQ-J;UV6X5b^bF(*%2^rtYNH"WFG:@PCgVmCW-8$Am=2<n(S!8j!4tWB2;(7_?\$5FBP*CW4rgGKfS7i(OE]@JX3VT^5=a_hI2QB_@DgmRZ1frU^fRd78%d7/V]?$!L9"r[q`M7#Fg$_;h:,'qY-EV8X:,pE#$E],X0Xo85dND79B)5@N;\FLQJF"WW1(V*g)4OT_+beI42jF`HSrj=q>:2KR?%@K"ef;PWop7ch=%cLIg5`!KJQO)K1S)Kg3jQPW+1rBuVL,k;Y3VW\#.&kSJ64f]Z3DC)QXLp`Och]?C0d?m#WE^EG@=trXI,i%[3%UZ_'C<'TnBS?tosRp=n#jW_1$I;!2O+%qgB2d>6h"YG@^,WR18:Y%.<#"2(]"q$&U8o-gX2Q"j$S#sWEWj!!lK.#o*-5qK%@Hlch%B"?S5/@6lQ!A&QfjR?;dr?='e*,HsLC.45*f[udt5sdL,FX`9<1%^WSd^)GXOZtiX'en<:4<V>5`+a(-IsPU7_sFDUlIiha?4>VU%)5#$9NEpticFSFlie+(Kj2Q+Sgbu>7R'MjgDi\=n#DRC`\ps)Dp))(lKJehFZ6&L?lQJF7dFck6E?%<'3Ik9(`VNai=BT[/<Yk^;%,\Z7FCIPRACQjP<A'W5*m^;e/fuP&d_&8f[e\mh8hG)(3I9gNlNfjpbMK@IuN29f16RP6S!XNuGT=PTa7hREDa.3q'3*7Ame*VWt%9'/OIn'Q1dr7)fIa/Yd&(@oJf0(nAAbcKA/cT0(>N<d)F';mZR.U\Y$a/3lHcFHPB"WV7T6?s>&X-ZIh6\`cn7.-+8=Xc_Q_V)=G%Q1_igGE<^.HbWAM6#,GM0n#QJAgCF.P:kXk*W#C`9GV$e*5H5UpCIX?),*hOW^]l$IFF34jT+<*&"a"B?,*0T^d*S<&6XPJ3?13Z%@RF`.7SkDY_X*879j45fDUd\a)`A'XZm7(\J3>nnM:43%NHtUEH&+#ej=Z.7-'A-umSD0-,21M]QgtT-,MUS3nqD#*qPPt-Mt8EW%s&-T12mSG';EhOOB>u`'M3me\:?#Y?i!jZT?^qpMr0QuNhN'e-9DPmM?TH!"Hm,ZpG3[Ga:$C*K7AeSmKNnDpEAeNflSk,'Y-FN,%2;5`miLr[RRtca-NP3psh('2'@l;cLIM&Z?h!-ibfhg(CrR/AGM3dpep\H2;OLWgol"m:an+FkWaWo^/QQ@"Wn6CrpY@!#XXte_t%a-g1(mT`Q%N-MO5qTsQWY8lt:^[tb/L:RC2k$Ggp!Q@R-%XtTglnYE0C-KSLId%GW$"lPZB.%Kk;.B)n5jKBR?GCSJ8%Uln\CWD4%<keZ2TLulK0AY,PLk6]C?GF"K.K<G`Omh<L6dC&PHi;B.U"(7&]mf2b.Y3EDOm_m8:RmEd80-u%^\A6QH)k<5G(u^Zp$3'>$f:.r%j-59n:D*?tV),G_7!9#dY@$W[NMf+IPr/?NId$mbiJc:Fn+@(MDtVoNf5o6fOSAUJ:S>@_D:Eq2;JGM"0mOc5qPEWj%r`WJ#cDp#%n)G?Mmih[2^VR6:ipZP5h]bgU[N4^@^N<2AF5BF%f.[)'^[Yj2oo%/;'uk<u?i#4m1l>\nHi;B2oc)jR^&`gBddH-7q(NiX<kkop%a4Jq/c>\(sn%F1&>f@N<0VdIif9:"_]%,-M(`MpN57bG:DtP%r.rB5_-P=B'][nf2c+3cTpAS1^oc$EXC]Ab[ZK8c[HEWrB9?+Tk%LV)/VYaDJYHi8[pLA,TY$f-j`gf57Pk:,e!^Q_[B#.iD>JWC*pTLXkKH*:S$TMpnIBukZ"P1&BLIP[9Qk@o3")c_oGYMW`2jfnLU%Kc!n;Xa[$5%gMLq9?2in7ON,hHi;A-6Z4>l`-_I2'4QBH4PIJtl*pN.k[R!9l^+IOYmrRMHi:880VdIi(LG5IXa[8&[0,4MQS'9S%A8u4qf.UDh#YbW7.Z6ILiQt-[1<YC.Ll]Wf;Ymct;I[0YE:)(+Ag075#Mt6b(*e4N=?Hu[hL#TkrTn=Hj[G-]]+BYD"Cqk('6JCf%,D\#uCh!*MmX8QD1ilXG&)Cr&kciNRCRt%7r)<JkBrS?762tt9Q;).go4tPZHEYT[efAs`rFYoljMYAKDPCB!.ns?"\!Er<^J&JZ%?CL&41\G*n9=]XsIe`*OIX+&'g3EF5r9L#)m^gHJ]72HZe[L1'kJ'2D2_K8G8+2dg4*.`PGEmlmhq.#ZPLn9;Q(Mt&?T5R`_YNOl%]<+k)9Xa5g;F-`M[5.LLnDSE(>r\9Yq_S1sLpUN&DRJ6bbGQ$Fhfb#,[*=fS_TIM9Ti@<M25U0F93'Z5C)nfd-ca!UmH=/=pA;&$%REj%9nN@A06=a9&rRkLZFcLBZ8L>kQ:"d7fn(O>1r@+PbPBncI''hm[V/)Xif%4[4Ye""EIIOFjjEh#B2ZK;d:KBh?c@9+nK:^lT%BNiFi?]GX4il9+cIK*07T)VWs3h:Fp)OlH0o:>iJ+6S!OLATrN>4@\B@@;#BQgDU#^B#o%Wh%8shU4ghq&<]s-?,Q-BK9d^l)>:@%T-&bVaL@&lK^cHgqEskN:N.B+m?nq::.mCO^MNn[gaI=.[h`6/^9kGQm;;pjBRf(*`TQ:PY4^h"_)5<GX7#W5A*)JEe1Q_[gUpkF%B!S:>Q*m/9ZhS6X@;E.;?Cfp.gJbSr07V1\.aPMcMMos=IX(\K.]'24-1,UEED\18r[ab%T>l\C-%$X7k%a3N?b_sZ;RM[s:X+tU%Um+P_NkWAhD7&6encF69;k))3!+:HER=Q:BMtBT5rqQ"Roks3[5l(5(j(W#bE2!g?4pZ=R;/-%!*m=j2<!rBV",n304M"?2]gp'"%K;[7lh?,(n?tjrUQ[Ea77jD#X%OZ$5Ck2rV$=%uAHh"q!ZkTHOkA=?f=@n;Oo2rh^V,qfk3n3Z"`c^0g06hVh>2UV!D^q@,nS'Ep%?`!j,B(:>;:IQo.?raG&:C8*]Y<M<EcrX*3_q,imbS6mq?!Sj!S\OCXo^a7ie`NrEDd#=@ALkpY[%h;oo>:3q484/57CeouU*Qs:%AuK6Kp0+YOo0\M6\GC6"&Sb8H26*LPcGtWsQ+")D@2tX$Di_4u9lj[f-ZTBA^XkDJq6b@t.3Es5o#!sND=7Am71T:>U;(*if'Y#&%JmTA,[B6WZ.\lsn_hfg+2(g`^"IQjpIe0+d?/(sOh2+q]PDN;,>fGON%BT)8O`FF.]*=Yj<6sCtRAg#'gm*Y3?aW.;I]P[2`YfGN%N.pZBX'H^g]f27\5tR"*1Q\*<qGmm+)350DYo1ce#=d1[Ak_50I/:@f;<kfr'<g)8YFV9'ZC/cc]`R6g?eGD\5qp@V@ai+EpPCg[%a?l5CJ8$PM&Hue*lYQm!QFu25MR[A!SYaLll/#/0C<n\kWD/s'<&<6)J%X;:%RV]$W4@9ZrSb',`)&\+5;J/rH*M`1l[f0:F"7gM%qh5R1`L1'Zj;)fF%c_`[Z[B"8FnltuC(L0N<Zs(SMZKA%RuPO%<F,N?f)o8jc+_u8r-0YTJqj-1.9Q)bnf0:-&_UWK2U%3!aJ/*-%bW;uB:FF4I('SK"1(_KdMdjpe@0DJD6SkA_CLOD5oO:k4aE_4eI/?bh$*+R[AVu/k`ricXW3B=uHuB.+R3<uM")oNdpeciJnU>ua%#;cbMS^j_N?a]i_kTng!l8>l+ZS(ND(SRAm_[^.]EIAb,_JE5I<TncgIMM&)FE]':^bNHX=?E;&]l)OP'k`*F5:Iuq@J'f2p1I\s%?R?S.O\H>i*^_a@HBB,dZK`qUo,D'!CSXn%.Y@Tt[,p20*43X!3fqlRAg)8/Z9'MbY/\F8G'"?=>_eOABDlt`RV7tpq*^#3ju&d\%HISa&BCDbED?4m>S`jJm,.!PHm!Zb&od5XCbm161d1t@&Pi%slYE+n>GS2q,L!\3d5NF(,-%?Q32_WRC17j*"cFGk;\,I(,.kC'I%-f-+:NpTqBS-4<KoSlYQZXO8VlR/AT=RONM&<:b:'>Z!Z3sd*_PAl"mm_G<Dh/C9Sh\Qke@!W.:R4XJqB-ao]?Gn+&mqNCE*_q`Y%n3DZXE3H[I:ItA&W0CIS!#M>d$l+Ha'8J(4;W^9FLfUa.]/Cb)#@<au'J[LL4q?A'@%:++-&3Cn[X!#/'M$_2A!r(f\H9\A6/9:N%<r".7Q&_.#I$h8jAqP>r5i&EH4\M@s%ki^<,)DN%EL>E%?3[IOM@m1JQ/7?YM,a]U&?Wgib2hYh?[c^p-&u!L(SXn4n8]AaT(T?$%`\Ld65$"Q)K;8pQrLPK$]Ms'`cL8GFGadT3F$B0BJPBI]Dio&XE@b[#Eu?qZi`Kq1#rn4ccf]m>2B9]^A`\;'NqHEb^p0Sf&]Cpt%LQR7"Z$g""MtS?I7%Te!])<oNTQRu(/!uB:^48Vs3YV*K<bC_d<$KY$i-jj<#\'XKL_tu=Z5W>K6r%B"&[iF9aRd;AA2=&I^[!3)%8m]1hJu\\QD*_@/?j3\=1TbtI-S;mX<cqV.EYe/O4*C)XBoUA@p:e15(?o,?[b%[VbSEifY1@B4Zf9I&3edq.U0U>Brg`e:-KXZI%pprSG>2en4pj-V0._p`)8pbbXn[on"PhfNp(#<-$kPPS7J'Z`U[^m#p<1C%lap41Xs+.WSojV2jfIQb.o]_X=Z@$VcH4R`RcP&$Y%B6E'd#3Tm%Z5@ftBR+6oM!-r3m,=7XL.LLBhr2D>8mh8aM[B0)]"p8e$<Y7fKhVQS9$TiC`qh#rbif.JaGE]1=t"Dh6=aGV#6%<6%f*eU%Sen;HHD>hY178!=O&P,>+O4<sU[e3-T9p_+Pom7"f%6b#;XNM"jeq7b7J5]LnN3u@^p`m\eYf"c'CF/#IPiWT$a0Kuogfl-%ok&+!q;aRueW$!nkH2G<eHpfZf2l^i+E@'qd+pP1\=8YAZ^Th^Z5,j)q\/O5/.2"Drh:Z7r;K;cmgo0Ti7!Z8GH4C2hmG=c&'Vc9%I8-'#*Y#,9/E=nke[S"o;Xj@Z,TK9,2i@P*h8cUDD.``c:%[T0;2<]r++9d.n(>PPj6.#cJ]RZK,=A2D.bumLET:Qu9r336n>soT%pnlJ&;fiAk(jo9HSghLrid=])B.[cNY$*[RN^8.eBCCh+qkX2go\@YDk#QN!nt)jf1`orPG.mmcrpT8Ulf%fMhX'Bko;2#'AT,mL%\*=L+a*O<q14RptN@Y>t(CmS*:2">(D?].qk13=Pk@Jl&Cpg_E;n63Bpq]K.c0;j@\>sfX$HBs:bK#IMj0.mhiid!>o]'S(@c;b2%Ht)X0C279M3RU`=`9rVKs$5I`FN=5m]mfpioV:-G^Z`gMN#QqWotJ*6G.bS0i-*\Ah2bp#e^dg^Ek?bs<M;c\Bg[jCYBL6GcqW;o%j8mMTX+F0&&cBA3=M4RG%A!N>2)2^BS&Fjaj0+`)V6YOWU]0b2@d^e32R1d0F??bs:ioQf(*^snWHU9@U*ZG$LGhY;e$$5SP;B8k%_M>jNF[o\_8YE:X<J'LZ4VHSAV)'GQG_G/<]T@X.,l2P)(Hlb@.3b5J(;1Ld,T=VX2.JNe,TgZ3QfWk]q1'a/%5IZd@kkc0^'4>Y%>.#2lnEp2OL4!qW&B,7@+W2&3H"UV1+NV8%gYSq+_WEpRi!"(gSO:LBG>8k53=A/om9F<MaFa?d['Ds&:@RSu]d5=O!$`kY<)*s^%/.cGpY<)1G9L4u;_QQK-HH"D9]eilOdH7<aF)kc)O&g9E.,(k#MP:j&q3CgN\Y#-o<qU"0iCl64Pbb.pI8[4!)D:,ilsHBMip+]%%L9L,6#uKa&l>i_KnR:NLjd1Db<rQ?AIUS)EGr#u2ZIh$\\9dj,b]FB/IK\9srbsS73*Bb$5:a%`gqMU5j%m))99u>,jl[m<n=[,4%YPKmJm&pGT546fGZ*a7$-4<C/6M]`;LoR`fX6,L2D[G\]cgmua.eQ]g!n%[G3)B'kGqu0.n5]=dYEZ"OE(/FX%s7t,8N*oFc=VUE%+JXe!).9&BaA)DkDk8/Vfpu68>Q5\\Au;>>L+sbE.gm:9/d4R;btEpYIhRNNIo'.Z7[\#8.])PaEe_3/*%j"5mb/a^\Oj]1UTN%=%_L:8"4`,%JA)`t[IH3)?A6dL@Pb,(i7?2P@?<gg0SJG%V\+eolrW#6E&*2T2pk952K^Jj:H'#oL=p<G]G54C>oIO=I30o2[0:>2-%q4XOMpBMP)I@peRTf<!R,ah5)*m]0X6uD%o/1:Q6Ee^iBJ8.'GGnu@s*SNcoXc*gPDXrPA@Q+)LdS*]aPMRq:A^!W)esQnHZ1tsP%WFDPV]tPN>Od^ErF^H[5CiXQ5I7N]q[H8_2;7T#+Z<AjT<@IN3ZP9CulKYbC<Ui0j#YQAkV-"+/^[9d@-2ka(N='a>[>8f)MrK>)%Jq@7?/2Hj%k>!D8-rJp*)k-Sq$\'#6[5T55"XVIg?Iet5&DVO*QEV/nLGHp="m$(o2F>ut(RnPd6K5F>8;[#PpVZbV('7ERe(4!L%'[ZQDR"AROY4D8U]:=Q6;J6^,.'N7PZ2*Y"'WbC8["<WjZWh:8!l3k_Fp.tp6%c]7@i_AA$l`YiH\-=FJQ]p.4E5ap"I2lcR#=q+%Tn;KN2Y2Q&&[#LbNZMk>Z;SWrifJTXO+n=Wnr,8]@Nnq[2gJ>W;&Z8AS=674MH">:"_(suXbt*.%+Lh;gPb[6_PgInc=%J)'<9-2%&W;TG@`B%]#k]?E75;]#d\]%pjLB'u`K?5h/+?CCAo+t,e-o:?;[1WuZjKN.@86RYeX>2QW.`<Yk5B=F(W:%K+q(U067*[F)c\<p%f?"b*X&p8PcV)4WNX\MKV9B5)iE/kjb,E2`E1L6B\7'%Qomq'5g'bSY[I"m57psnH+51M-*i_J`EZJL2B:T>\6^UQS%hXZ"NJ^\=%0b,FS,]_URBN^Rh\7csk,&9eO]SuK6bW[`\2`g;T-8R.lK$Dk^1^JH`+kYRB1^JH`+kY5p(Cn;'G6g*7E_I&<\3mKW-hdaPO#mJK%pam^Vf]*IX*d^_-C^>3e&/U!_mLX1C\*a^B*d7lJXaX%WG/"T)mEj/:YO]A,\UVt5ja4$Ve`%\A=8C]&OtZis^M:UV<\Y]>kca:L%T=*HHY(3!4GMCB_i!*)^:]SR^^&.e`"jFU'qU9NWYkE:SSQ#.X?\/7PgNN1gk2\DKKJ+Z=&+=SG<&Ur*jU]0=\LWs"h6#jqmW5F3%C]Br47aT]5iPjYSIQ>_cn"B#>IMR7)gd,Y!1l&\DGL47>S<>PCcdfdNn*oKC]'oiPcf"7e:(^c_a+)!nIJE:N5l]!-9)^5go1d=k%ii?]P9/DHkmTOmA;2VfZB_b^11MqZA775InI"Pjr%NqmP349trMJ<aI[T-8A9O#JVHI4E@<PiiP".2qbFiP7O__DUP3LVFe0JjT8%22e>@\,rO3-GF71<C[hR>_Y5H.U18!JCm:(=qVBH;\8(*2;OKM.N3CB@BO9ALJJ*iF,Qn'e%dZlL%WnpV5QD3/8*WS_d#iW"UkX/%W^Y+X;utBP#@UdJ#-83"AiKe=Mi+58LuLBHJLj<&Qr\;d'k&e&k_OcBL'<!(bp"]j.U]--6N@tI\1V1#j^L4XRb'(k;_;h9/h30S%2RVb;%'g>[&g1D&@Bie0BW/'W@&Bs?,,fBVEHV)WB%oA_Cs/.5.QYe]XslfW;#"<]+U8f**ic4W^JZmG`?^i<kdH"UJ/U+1J0P7-%$u0s&*H2<s#Mq9@b]7N`@(**B&.MK,>d4E"EEj?IAeqZ/#]]ncEEE3mpIkTD9UK23K"n_sWNbdjZf+VJ,b,k+@$p<uRXc9QJg5t1%$q;P5=4`10dbLRs=>Y>kIMdW20\`m4!Rh'ho"#=;U_u!6Y]R%#h:#d>*@;_U=UL*+@CC'sEZ0*sf5Sr=*>"-<_=2T_+WM$1FOr>U%B"9gD&('%-Eq%Fp/-.O9S1&ouY%%g+WZ'M)B]$$2V?*\q],&b]/n#Yr+2V9RRtZlk<#lO@UC.VFV@FlLRG=`=FB"VKKK5?0$Q(%I%%O@rSoHmD,ULRki;H+)mJ92+'"Vh*p3r#QQCe6KY!RdqJ"8J%qR',?kl3+C4`>0R*IK9jJ<)r]n$Q1#'!7<)d[<6:#Ga;o]:LJ'>%#Fbl*Eto![9Z&1o?p)2^/5=0f!06<&S\PEf%IB"405(Ck"D8:iZC.%%#LsCa%@B54.1BU;Q3_OHQ.nam<3]_r4I)lP(cS*$]PAu<%kl=D`*/<--]aJ(6E-5*5WO6#`6.ITN,/@GNPq_DbQ31`/kR<*H!i#mc/f"^YM?XHL+PY7"JcWHP2AS+H-=H[djQZ_dFi%Y;72/.u%CBCEcF@3i/#/SfYYQh,1'23&AN%gaSVs.qM>\!j^XJo]%Qtdk\".3RY$r`S)!:pH$-)kCc.,t_`(V#33;?%Wo4:X,*JAKqF&C;o.%\>=/X#_Q;cNFB93+M]cR(Yhn#$+Vr:&.=:*@?/7#!#RCkBYab!BA!-b#q1bGZVW9a>Rj3(9d%o*BMoh`Lm@0>MDJ0r'G@8CZC!/2%%Zi%Ib6"!'dgS;d\WI^0"Q[Jn""SOkYZ\2()A/`Y"0XJBZ7V<<MFB3a$4V]["e8BM'a#<B.[=DEWURMX[YEgt\T)k_CoH(-T&9_b%^goi%LhS>D#eCM91p>Y+;6_-Z'X3BI(17miR;'Q24,A\NL_GcX'Bg3^3OVO6bHM+?,rNV1Tr0URn/q0(@?t"]kQ%k8BSeSQQt5E^%9b>Jo:1W@G9bb1c8'i>kS1lfI@622?L#a!<#/EoC!&ek3SJoH^0l``b-F"<:dRL%@"V)X\B\c'Z">EqiIMKAlCEX*s&YLPg']sQ=%Z=#9r"=WP;-t$m^C/QCO\)X-9!AKU.>g?rA!@.qk8u'3($+[(=&e)?DfF$\pMNA=8U$)]qC3Uk"+[ubf'nC8j*E7KT>"teZA7C@.%)WSAb.$'Mn@";nF!XsZ?!oU$&`IN(kR\LM:G">mpJ]/5E#40pN&C;2mI1@`5UkP0?nc2o5TG*Jl#W'Ga!t<mr(jpE;D#acGUi$0j%2fX@/d2e&Ri5VEVTLK&<&G>t(.eF+A=cI"&#m*Xf(6:/b:jNpg(JkCS@(d8F@B_)5@M-g`/Qu3eN[1M7#5-D(5h<LNl3Y7(?qU3"%&F9Tq]7W]YQNP_<4U5Af@fYs?R)Wp#0[cp4"tP4U&fI+WS-cP3<$HE#]2%[g+\P1O"!@t"Lg\S<"ggJLob7uOoHVsWTnr'!L&ai1%UERSW`8TRIibpn\#T/W>Z\7&:LAEU>J=*kJ9kZ`k@o^rF<Dl,6"0>dL8T+V%&?sJl(p#'L;c-np=$^P%QtNEs#be1NaTd<A(';lP%g19%FMNc=K"t=CC!iX!.5StUbf*AuE9V#S"8kPG,C(9HX+NY=M"W6GR-@S@M:9((GapBX9J1R&KNIiFT+Ulq,,nUXP%8`)N&kl]J%K"M,D'bmXg";-BW!t>[,.l1GW&iAS\+HAaUicd]/d:cf+^im^O1ttQ2"W0ctXNtjJeKQZ#&$!Gg7joAX13DMW#'Q5e$t-M9CLO`M%+ARHt7)F\:-65dXJP(W51(87A%7h:DY[[M[oZdM<$t5/gb@:O\3==siL4Uh.o40!+)Ce$<o:e/El![Zu_*E-?$"fsGj:]Zk\JS!\%&tOTBOeQhMQo^l?Jq68-/a18C?%S3S6Q#A@cm01bBSK58Ou-8_aAe@(%+Z<YaYX:#3>TLtp1ZS*!(!OmgQHtN.OE'U!4EDAK1.J\%2%IM^(b6$%I4[30%$YO8=q_=_,.@T1*=sX8"Sil_`6aB/(mn[[L5!43XUtsIQ21P;Me%qN\-2qqg&RP;+\+s<."Md_fQK\#E#36k%j:bY!(;[e(Va[r=H<'cHa5M#g0I"%8$k?=+lU-@4/HpfA88ni%jcRQ@`i(;@"JOKO1Kd4,9VE1F9[Knm8u#fM%$mFQeg0nol_A?J%L`r$$^&hoI1j,Z^["TV@14W22G#aN0L<?p![LMFe0];n/4,=SVd;=JdFi#hblsp7PNl/';,cM-c$L0__!2PASX;G?*,^1qp=\p;9%eO[h"B]YV7GRfW?KK777&I-f1[@peu^'GC<U&gFoi(40"=370<_h+]n_SARtqLft;Qt(/b,aTO'fbR.^"2k8nWn[fGij@>\"A#FV%(h"2sCq5?%ZcT/##m4V9i4CT[rX:U81*W)Y\t+EO%M8.5"!LBe!N,=qe7X<B.^uI_]Khj'd")&qpoA@^^hKa;[)`iV1]7="LYg\m%@_loSNs$IJ"LE>FdD+\03l>2l(@o[/.`(%uL-\!DKq"_q!uUidBF9-9W<g,%@76-/WK&,f%)Z'YUOZpP'gh3;FO:.=mDt)S%4%=`%\;*2o&L0*aj?mfW?7QotW`P0"np1q5"=(QEd@l-"bTJ6%P\Zr5M`GC]*T\QFLHGS_?kB3qZ>`l%2Xa2jCUR>$;FjW,!.H)W<jcr8%82jDadOH$+UJ>upc+R$iDUouCJ5OX(G7j+GMJ=mr4#SPUV!j_YAcPa8V,0t;>S8RtRr8R2fOcLqk8pC)lNlc#P!^'<)8clPGR1>*%AEaZunL2IL&VL?NKN^giN>;^1ZRs=6D!_n`gFAOgjfI+_22F/LWg_.5*0s31,a!XFN("t8!uY40i*DXX1(5#$m;b2u4Ua.-N7r*;%,7L-&[`NnmA\8#gXdGgl`?o_plr?bkY3KcW(DBZf'&;(cNf7SU@d4B.f\.OU>LPE\)&?'WRd>PY/.$EP-k/mt`A1R/#lHF)H`=5G%Jo5T`o\2>V<tq5h@,=/&)Smu1HdLS7I3M!5":XG0,"sml)kpCCCs-7,#)WX[!&/>#Ce/LXV,6p<*#><89q2r(6Q-IDoEUlXBUuXl%TbNlC(/kreDpl*,#4"Y<FAeqT'(_.".#N>b7OeZ$Y=9]QI;62c&7>o'$K0aY,S2<(4S7@,-F!bLH=5)+86u_a&WF(Xg?oaB1knHq%0_uZ0`F5<lYT.']]4I+i\=sfkU8>((AdcnWRI&0`QlJ=Od5?h>1Q>B8o[(1.g^9MK>Y[_E@1g_(Lc)IOfO]IBGV$[mS%GK1!&Y$K%")dP$#6`RM@%9&WoU@<KCTF+^EB35)Z=JW&>RGh5h@Xd2OW6eK]B_GX&).Fe!;Rq?"e^*/e-;,7.h#qN+8YkW"W\=1aqpoT,\kA.%2;E.APMf.>SNsuc\JS_S72igHrWkkK'Kn,M"!XJ2O9Uc[H@T]ZY:OGX-@0T,cXun_DS331$o$W`dEks-=XLrf8(MWE%N.<f9hN*R%4J-dHOK%R*9hT;M!"<sqQ!f?N3*j5="uf'T+>TEPL2Cud1bQn%6+8Q4I2[CYcthR6\0<^s"$$A+ZDjb6j>54\%N*](Zr*b_d-;A<%+J:-ffTlSu)TF7#:5u`A1fEXRA^QX>o"/SQdu'h<JkRs06j#/IK[C>CV?oTug:&qW65@d"#<g/`K#67SBO/6G\nL:E_(?u:R4LZ^%)mqbeNH!Sh5a[6HGE!#U@YG(T<S9&3-Ci2H9ti]AS-4jf1(6>6(;gR8i\iWX6Q3e^K8_LL3<T[W9-[K2fr3CU85k<JB^!2t.ffMd%,Y8OOnk+&Xf>.ZgAg+$$#.[JKQP%3BBQ"#>#2>K[i,IS,M^`+i/S&n3D#i$W"sh(4hl,`A;\e;t)N#Ddgbl=AVTLS]\9%bKZE^U$%/j!H;>*CH=@B]lFlT47(-G<PLG85DK@9#SV;d[mWje?1E()cGZ#Qoa#ajoL?4NS_+5RV0@r,<U0TJBVHnkpV>GMU@'LaE/;M@Of?%4>of$d`R)J60d2-')J,1U)A\*`AX-0!R/?e^lb>8B+hu.%#98fW&_B#Xeh`H6DYT/6q7N8WZ?2bg1VgRZ\HRc3J7^,#M("k/inK!%oU^jsFE0PiaABEo+Ne)P/b4])j$Y\BY7Gj&&@EKeJd<Td"dKbA1:^O1$l<2CLi*DgA51,?`WZTpK8$$XF@Z,S&I0>R(>SY(d<gD$%NN$tZ$b$1RJcT1U)^#>*`)+6Bb>Bhl!]>\&ahio;qjO>ll9D/hlOC-3KEjT?8N/pPg@V%NU1;qW9Q!nMrF^/-"6jfJW7+u;3=#AY%$Q*Q_/ihR<<i2Q!7BAcl0JR;XA17=ud8S5W)Xo,A$n@$-AkRYf`sH&MQGRGLA1`'9&>nZ%3It]F%YL-bU&N80$=k`*L8$$WYaLG(%g+"k3$N`UTW`U&(@G!WO=Z"n87R%m0<0OjL)H[cgCU:4!@A$`lIZ!GHf-`;4?8-m9iMb_,/hWo5nd$+$\idhdns*ph_o;q]HBq>*%(_'1qEl]H<)9`>*A!D@d-6fb@eY2Dl?8-I>)rtV^E;u@fVt!dqK+o@DapXdSOSW@\3s8K(7TqM3*#7_^`'%,T(,-Idpp`!>Y]jGQ%-)Mfi.Q2KH'cWp&=C['d;fHG8cK.!)b7U!AJ,j'B!iD[BK5.=:5M&/WJG"!jVD?Ok1C,oD=^TV(*'m@9.Ao)I6*qA#g;a<&2oVi9%.sO:A/Lc[d%obE:a?f!o"AHj-6l9;j%072Yc/>-ia_9)lUJalql<J@?BW)Z@`e_4/@>T#Z.&WhISu3D_>BH#O9P'PL_I-3Q]h;fD%@2`oO]$9!"$mN;%@6i.DS]V?Q[uW,kOtbVg75\4-Z4KK_4Ml2kGc50$Y,-$WSH+>ZlFI*sGl(<++"$5=^bg/&A/rJ-m`-o$S(Wor%l6C.1UUu]A)o?RW&+si!'0m+*&9$>+H#PKHbTTZ"9hiD3#6QnAce(`)9dmSRCl<XQnOJ7`AZ,p&U#X/+AkO"n0\T8EV;6,/An!`P%6SR@"7$)t#0Br#4OG]MqW5[N(CTjJ0LcVt>_(_/TdFKLr<,a5fJs^+X]ErXEKIJASGA'kf<*^,"*68.S6k_92'ZJ-(3E-E36.Q5o%<KSD#[LA$80m&,M_jDU)W'Tr^3<BBl0ZTq:U'9=1_MQ/Y%-CXtj1l+]\57FOJ7@`>6($;<7i3Ys*'hF8#D-('!b8K?8&E??7@9fp%eS/,A`om]ELbRa22F[@BQG>0X2$]VFJ6YT#"H9'M&-`KV-=@sU/;bOT37\4@VL`Ll4Mt`9"(?pZ+][`sE?"u][';#q8_?N="6o#I%aHKHk&>ml>"ZZ^u^*pAgLosg=9H&MV#)Z*,I0hB@*MMl"P6[LL3eWW+,2:,"&AiqhH+TjZ&r_nm9j6D]7i8I+Q/]Y/TM*'Ogb;Z?%;(N641e)SjKg?&%jhRp-'_*6Ef*&r)<O%0^5sn4g^q;:8[+c37(n+("'c]D(1l9479,\^[XNl-U8bSCKBYd81(ha%aE,j7G1-%tI%>=:<R*#:![@O"QXe]:)bN=NE'?k-@G69]`5L+lV:[_P;<`$An%KLJOmN4f4#PBH"K<fd;<a-Ko*7jr&UfnLE>-\MNd%ac;#EF>l$%kS('X>B,:+N$.[e"K3=M45CSq'3kPI45jE5\-Kla0-J&@d+SS9i<G\^RX:?3W'R;7p7CRW=qo1T,KiF(K1o+Z9ls;kK"R956:op`%V'8T7FifT!oqJQ:JuCd9NOC%Abl`>5@Cdq%<q(IA+&,2H$Bbd15>l#a5^jhLf0%GJk`-erEk"FS+\[,e4fLk^VI>.R)k*0/@cn+b%"HgM:OHjL*lCsLSWG$QToMe*J,#$t2'i.55'LQ=5,ro/(TS$B5M,+m:#;:=j!Lft(l0)gmBVIO+l\eZi5aZ;m+tOE@Zs$2[dq)'g%6*$:1U]UB%_DG]583KL2F^>g*N6mp4]!Y[pP^4(]Us11X0=5t@p;9EY%7.AE)GoTR$:tk)#d"Vs?q70o;EI:6lA0&+(5YMb.FgeZ%Cn_Lm,1o#K'O_[n(XQI80W#kQJ<!:BZ7m/l-B,r"CUd8LejspB=^Mqj28V2DCeFXFm:RU"4?X]nMQ66Z6D$cC)Cu*\M9u.IW!5&o%ant3$JlIcSnZ3"U<-Q_)@;V[.mCJUP%p1+`'96/?H9p<?;%.15nDkIYHVW9]BTC858<X?gJoc47'q4>O;0kE6Jt\#R(qaL]+\ZrV%L'a%Rm<2]Yb(Sl3+BItoq[flQMV8KkO_D-qA<cd7_@/l#[)+Fa9:hk-"6M,NJCh#F.81kkmVUfGnB><oWQYT1Z^ECof#jh7NA-(b%S^Ij8-\1/p'@KuQMr3WX8C+5)R.O*Dj'SQ@(a^Bi,bTqZTp<=pXMZq"8@TWNVD1I/>SGc(LtM6&(^O&7VEO2/^oe'.Orb2<$2Ne1%:2n^[c1\41YTQWN-DW!nB2N[kiNPV0U:T-5nE\F&-l+m\K`;8n8s"RF'-W2*'-"YI$.g1Y7tZn@-\P>fID^8)Bs_[!#V+Y4Re6P;%4E$R`L&>A8I3pIET%f3C<&6o022rg<\K^!d6P/Y&2LKE`PCWk!;bnXM6K-XOo+*:+1(bG=PE72P6Y&>m,#Y5pZ-qfk+O+<bQbH%c%A_t2rI$b2'?;fbI7+M@7\2rR]7@55<DSgIP>X_D`FKcr_W-=gT(1An<1be0t7F!4=I&1$`6(1R6\EEfZT'&X_ZLAJO9P@Ft2]6n>%/)3\Dl\mN],Fpsc1r<5:%=,4@-eg,_0Vu5t@Dn9H^/l;"]JSiKo:5Ti')&RT9]^[qcP;Kr6a@BiZ7!bgZ"$kHp/(l_\#.p^cm[J&%$!V9^+H6(k_r"?W.EA]shSt1;gZVm9DGZFF'\lW)A7uZ%_.nMUnB`QnKDDk/(a1%RVHN>ZBXCLW$BEnS6($;eo_)ckd(9YZO*>FP%,3$_X]cE*LApBqFmK&Fs_03T&=+i7>mH*^a+\WQ=aE$_U[1uaTHV.b.$=P8adW-^.UYSZ$7$ej!W"4Hr_8X@4(r@gkiLN*9In%#6%c<G3rRghYM/:-&jW.inc%G':B,Ag0Aqod5IKW1i!M+p7boS!#32@E)$FB%,R':XjbK,LEN4h:AZg8%2+l>9Fneg]A^hI\+O"@r,C%4\9)4G`jA*7)d`b_OIL"m&I]E.JI!XAr*"-\L3:hTKq?R(43Nd:YRAfkDCitKM`;+?n3(&N4%N&0kp!e>9`d+&]1fohW?VnqJ7@%%S(%]WM+ui=2SsQkq^+88adQW3R^Y;[\s>:(\VX(ILtE]6S*^J;/Xn]a`MU:?_32I_0)"_TfFe#"EfV<%,*mFZ,QNE9<a94O!.la3%GP:#'KSd[OMXU_$J\b(h+i>#84QF[K0:W'f3*1hjLp.+>mF\0)_BTV(ER:9n7R:W0-Q79h('kR>7p]:%R?Ul7I"P*getBZ0%l@-p%fSBq@;/)Yg?PQE_ABCk1kRs0/,IC8]$<b1hC.(Ol+ACt"#VW33/8.Zc7DBt(ii`DL11Yfk\/lM]K3#RR4rJHp0LnMYak.T=k/DA^%(`n:.]TFgVI1R_N^D@POh>r1+13SI]"L.!8C=;A3"X9)0JV+DB]FocT*R>+/65YM]H<#\a&POlh)(%et%"Yc@S;L]jk^-`>"CqIu%(S-76Q53d<(P+P(aU@edR*Hjj1+8)hXHpu\0`nU\k(T07N+K:2MPc:#1(gV-7C[@Me&EMg6gdA/)qSt]@cY%/$HLbT=?;%j(etri%7kfr]nm_1rk1Ue^-URTAN\hBr?Dns^3(?Y4"O]%ZC\&_T$"ehl$jjjY81tO:<ncKrPlZer,b/N0"Z@!P3L^fb8_Bkp"!n70AWW_o%W$E4XP^%bGK[hF6?XA70;$?&IH%DJR3FWs`i0,Q_#'Ys?:ng@CB2f(s'#h._jTV(cAW$h4)3@H15\$=GJZH^<fHQIJXXXM/F,6Lu%K-_jSMpPQ</k`ju'qqlVXHrVu$X+ErM]fht]HCKhJM,9!N8m?oci^q*?XfuE#F<QC@"_B8AKZGh=L<nEP]=\m`V@%b;_6pj8IVh^%p>VAMVK5Li(Z2;l^^]Q-?5teIku\Jcih]4;#n2u:eL8WimkbT*XciRKKAgC32L4n]=*jDl#d^U/fJeDtNp"c0&K\)QHp3ad$mS90%%!%Zmk2c2V_dVd8@jB*R?:U*XM5YO$`JdEBC5O-]&IjdTOWi[Pc'*41\#m=,H8Ue'+J\F'lOa3DMq08BTqDK*e;l:]M&Lj45Ji)c%6KSQH;Pptb,4I>o&13Q)]Slr5/TMi89MEe]/!=m@-8;*AW3W>NbB#q9@5&S?HjG]5j]$+uj@u;M.X@mbY<\K;Edij=_pBgpJ9(a&%\d!F+*R9.sBcX-2$b>8nIiusC,L]:!d:f`&jSD8&$**L3aRlc5&14@4b>(?jbfl;C//e[bR[cIW\LusjjJh]J@Lu!E=Whhkm1i'#%S]DKaEcZ92PF%/Z0Tj9>V<jk?Ui<c'bj6M!Vp<Q0$m:O]mQ%1DAdY5O-A"XuKHf@abm3g"&0r[Fb>6P7[[\#^A/Z+A8D.PHP+<-g%I#;>V.14<pYq+cZ:Qa,Ui-%PH'jA&Y[jq!R&-?pm+H`fqIT1L:H"gPt3tp3TUjjO]AhhCa1%MGeMRf'KL+nbhl_U-qbS:s;e'lYK%T^.Pr15u`O,$r;_G=+TI.b!`P=rbCQQJc*G*;V6$NUqX2RN98`8Io,g*l:>-LmPQ*Xq>&CSF4GNIH7G?:+.mudJ(Ka:bk`V+^Y/C%1m:db&/67n%M<;V,%FJ\-_b*ABJj*3,C+BJ!TR]\"M$Rs^IX2Lc]`<EH^U)Yj5gCtR:(l3/22$0M3nP^HPBf'-G+\+c8t(":'A]2%8"'@5?8c6SH"j#6$YJ3]As8qs:\_Q7Uf2s"lr*D;;oq2(Mo8YY`/66Q%k"u`Mc&O(,+0+&+PRI<Y+.J0r^u$no$V:cA6Y"J1(>%*%SJprTHJ,k8ZT/'&bN_OBWRsQ/P(+)+n91Ci,`J<sh;ZpZR7rPni?j[)a6;+iS!RGj1;[:V](6Q%aoBT$]j@G>7WB\9I[Lb,0Go'`%E>nf%1,W>a=<l%!`Q-0>7]3VjE'Cd&f-W_i`HfoVW>j[C6@"coh["6^Gf@i;-dT1Qh@s,2#SYs\?H0NFMB_)gbY0C.2J9J@r,i-F%/nZ$E4EpF0CLS/m3]t8!_)c,\4F4M+3gH%<Y>Jtr)G7n;Y;`Ph/mspHO)AmpGPBP^&LR=Q9`IUa\CeLhNX7t<&5_pS!HaBl+tloe%3e6X<6G\D+3W[*.L8I)O!+"a(:#I%8J1qSElQ(k5DKJo2]sAC!Mls?Oi17-'0O#Mn+c^"sa1BoNo8[WPQq.8ONcm[S]?-qBG6A&[%grU!>3%=u<,37?;;?G\D_Dgg%4[FOA%Z9n=W'H`h#G]A(/C4p2L!I:q#dZGX=:B;qF5ij:H3X6-KhGPiZ@O,Z#:+7(#J02S66VEV%5ZbW1*8\dY#d[2gf0p_\Jt&rQC#h8t#]_p-b<&H%^&5Z&pimQ<FTe95_VsXJ9nG'SF[ba)'D23\@EF^.d.+<^dndo=-jX<GgH.@u%pB$#JkT-mZRfO`)br^^b@7'AP%W&rj!hJ@njLHnQ59Nj_^#NH2-8l%@@q',tJ/&[b3#UL.&2p;-ljUa!J=LgG%;mGqro9PYK-2A<%^hGa;[pX2p^NV.;mOdY&BU01T6')A*nBT\&m0:b<j`s""'&e"di9]<O4U;^P&Djr]\-3IhQd5WI!";FZig:hkM9R[A1a1YRO?Jo-%%cL.dq(2ZG'DZ!,,iQasomb_Co2snUln%Mt%t>kPPO\s@,$@4`$IrG<[\(n&kNk!HA%T?YY-'N$E49[F113`+<UEE8lSd;DG0D'R%a)Q&h+P8HjJQP[')1jCE3C+-pU*)-6i".ud`aFTF,B=n4&qS,sS+V2F3;[pgXmW?l=7<e1*Nq*1hfmDNa0jO+f@G?OOm#=V(Rgf4%'-b84@A.)#2[PTAc98cP>T';LTX#h:E+O9tHEnl?DbQaiM+O8rhQXNN8H+;;Rpd="Pn]EM!AdfTVilWJA?pS?SoKX*OKs1]WM[bB%/Y8r![>&20N.[8S$BC6XZd?$e!AcZN,gCqIUo?d4P&%m:@[7p*_$+@TB2A':M7LSl)VMb7<McEX,lIdT0&fD3"t.U\[B_&eE3biV%(!4IGD<gtVUh"GWbj%+Wgh#ufN%M&;.F+T4bU'JW(#$>_+1h&JmS"F(Xm+]6J+_[An*;aDIH75#^&IS<GFj6/7Ci3GL[TW\F"`%?%X-YJhjMN(Npt43Rq5-[ea'^d/UT"Y<^[Zp'>uL[\ia^mB`chIU48o2_(SfiE^WHMt4a3KCL.-CUV:T(#*sSMh^ir!9i]hk6/$B2+%?2a`:oe>XolK4@5?;JQ5O?)(#FED$UPuh:QgiYS`H8OmMDTOE4]H5pP35^#hl0,:n/$HVBicR6TGadm\cHe#E]_:Z1L6-M@NZJm[%jn5ucLJRW>[nfL)U:g&C'!B,"Emd$>7h;c8np6h/_^B9K_l'77?!_e>6J(2f1$MQ4UPEJgGs1N[n4Au=\BrVj26X[Lna#[IQLst#%d=XB]]H5:>pf'k3ZK^QRSl]6:i];J$,X$!doT7BLY?S0Ik=&9H:Ie3:]Uni_n0sH`oL<rpjN-Yd]+,qS8P,O9*Bd^!HBPJLLNcYE%gS^gE;-m&DFnf?>8p[^`oT[MaZ+LPg[n0.%PE)5RGs1HEiBoFNkpST=o&]P#?AFTcUnhMbkUDnN,B4_f%[3%sANG-hk&nI^po$hX%HM$IcBq!Yk]+,p!8P+sZ*Be!*HDdp`LK7=$P<h]7jh)YeFnf'28pZZakR!g3gU[k:5=nFB2B=s"o6PK0i<(DUl04n:VgDaBrAo=f%,UGUEFS+)/l^$l+;3@*-Ui\FLaNLa(7m^*O;GTfhKW"Z-]_@VQP!1ZBbp8m`lgX=;8kSs8l"GhA<*Y4QE`,f`S#)n5`Y3\>hQodF%8T15]AgC1%Fa.gO,pb]&3guU%+kP]OR$<j-@-M@%neb_hpK^ZpdQ:/nZ^Jl#3kW4jP*-jr*R/CAO6c:Q8kM^%piJ@QH).X]HRC6k%kpST]rB,thiLQ-rPk6BNdB)P/\IS(aUnjeVNK.UD#@E7qIo91mUIds3VdlmIRlr2Ll-ZE():_*f%WCa1Unl%bNb2?'krQJJPEM(M%005P9]sH>Lc'sr^o_?k^%.#"F%WBmnUnl&%Nb2c3r]7\`PEM(MG<21P4g=8AQ:snCHLg95`qFSZ_](9Y.I"sLUD_fj^CG1nUnje6%RuV*$Du)N-`KHCISd%6Ee\-h*n?tq]8pYgIBSQ7A?&,me;Gtrl7RseucZ1&_5"S=;:F@1-r,07ZDjI2pUnjb'iUuO+#"_EZ8iiCQ%Sm@,\7T*,^P1%bEd&t:@+XnihWMcMZip#qJ84lKH\k1!YPEM)lDGkMoUnjf^S!7/4.4H_1-7)_e8kM^e8]_g5P*2!2;0'XOUnjfU%PUnO<.4OL^9#d6_Pa$9LOt.k*,phBCjGHN#8P(ii).QQB;UREpY*bH<P]W+P0d\1m-!d;,MFgB28N/*/@T$*%dS3?RR$<i"FH)G6%-7'rah5"S?8P)KFf-n1=;GpE@9hMRUPa%DSPEIXI,pajCUL]<T8P)M*.(Neb;Gtq;9#d6_Pa$9LOt.k*,phBCA;j)O8P.M^).QQB%;UREpY*bH<P]W+P0d\1m-!d;,MFgB28N/(9@o?3&dPXY:R$<i"FH)G6-7'rah5"S?8P)KFf-hMH;GpE@2+klUPa%DSNKQ"C,pajC%UL]<T8P)M*-lHMm;Gtq#9#d6_Pa$9LOt.k*,pai`,pai`,pai`,pai`,pai`,pai`,pai`,pai`,pai`,pai`,pai`,pai`,pai`%,pai`,sA,igSL*sP*1.6loI^08P.M^).QQB;UREp`gE!TP]VnJ0d\1m-!d9VN(HT48_5@.@o?3&dPXY:R$<i"FH'%E*F=o)UnjeV%JPP$DG[ZbuP*-ji9#d6_Pa$9L:?U6fj[i':8ii852m1&VPa%DsF=c6YN6*$&P*2DK\s4cm@n]KeHC?9#@o?3&dPZ=q`gFCn.4ONG%UsHgkP;+C1,s@gkR2KN*`h]E+Vi<kj=%pW$Pa(gI;)6.eUnjf%oXQZqjGc`&8P]kFNa+;a@o?4Q;aPD[.jeb"8kOCJkfkm&jGc`&%8P_7X"g45O0e"R9aelPe(m?m*,pb^RoTm$so#@K$UaM>^-<Em\R$<j-jO)^pN6*$&P*2C^H6?HI).QQBdZ['0MD6Gr9M.p'1?\aZ%`T3"M8P)\X4`IQkN%lb1l#EVFJh\U!9M.p'9^/*XM9-^#P*-kVH3db1).QQBdc3b,LG:,o9M.p'>j.l$`T3"M8P+sH4_1_jPk)i/%qb,Oj.NMj"Unje*F9krq)L5h36D\&gq43[3-7(fIF<FY4Wd1?n_uK+:G=qRrPk<&Dd7hrj_qX.@U0H_H@>"U'?b6)<J*-$7rmVel%nj!-LSPQ,WSWn4!*R,)?Y/=K(_:'@.7,`U3"+ThgY(#?MGESRjar]ZQO<KfH-7(f+3gpXe^CG1D#>`rNk$X%\oTS3ds6Y;ToeSf@%P(3,rhu?2SO!6h=HOMM'nEM8F4U#pa,J<t9]NH:$Krh5s:cR=Xr=O"c5Pof1Id1:PqXI?frRa:2pEr.Qor#M;s8A.bJb5ke:ObTH%<[K86:aW0i@qs[g8Iq8MAq$B63kTk^%/$p#RM/+.r/3cBY5"3q*=VF-^?OnnIMDF0^(LDEiK)q>6Lp1%r0sj<oJ_Ci$NCMP;H<)?%p6`KI.Hpl\d;88m\diYT[nFlLHM(DXU[Yb-n:TYAJ+OBOn99<FeT]8>^U7Brik8Fnb'U9Trp81E]Gkt]]iVu1$a7;CMm'k`"'7_^%<EF\0<H-%Znp??`hJ.U8p6_*:2X"h/pEm&\gZn0(cPV?dW[]USnXoe5#_[]cCV^a>!P\-mX)ECJlIW`8l@jFh4nn<nQbNe*q!*'/%IInC2a`%'.X5ElLWuq1!n5A5)_H26Ga761d!Z<WW_lK;loGH$(XR8eiLUYpj,#tJ)0a]EE?!+4eJ*K+h/H<Le?N#lg61J<.k%ak3%X)dt"=,g;]CqKOVB)MC)[]@`X^d%T8YXafs7D'>k.&*Ibj!$MkHgDu)<.IZi0e)?]da:bVX^?iBh-6f8N@HQ\*rY,k"BYNX07br.%9MZqOc^Xp]ktD$Ll1n[I^$prX(]N^aKtheWiGY5Mr6(ukrs,G4>b0HHG85'fdC?r<KC/2)^':i@hBncdkPbbD/:=btc6Ra19)<@G%1h1mEfAR26eg^MM+ta3-q_S7!gb(g7n*9Y\E:l:oE5dl$F7j>+Xc2cd:+uUuV\fC2l%M?GHJtbt0Dmc,(]WX^_ggkAgcmoLg&HJH%s4+;TY.j%(Gi\`c!6n]3EKNA;bmJes))<C`<3nd$mR^!22BC&p*nYU[9>5*I`i,IFdA'.Y'8c5iHnA=X=5JAuFmlp<de@(=2W9*L%H[>4s3'I;^:@J46dhdE3l+Ok3FSA!`I6\@[s2sTF^OCLfs#b__eNZ9(IJksHn5E\9ol!'Mp\aP_^hM=\,90V6Dst>&]EOI]*\f^E%NBR(&n0WS4e2'SAG(9Ac_7i=cqiPfKcmYpd2a)6TjmW$F:@J(,V[rdgdu48%kpubsl$^>>oZqsOl#cB9qS(Fnq!XdY@?3WuHL@\+%cO4[h5>E<5C0q)e;]bl/?"he54_h?bE(G8\n6Rt7VFMs^kr(SkNP-RgiN;t=kSdqF[9'_L&K:\fWsI>Q=3K-pcb^cP>6"$T6\"@m%idZ,tmQWh9hfei2+$#n#e*1@QO8m5aoDbB1H\=cc=/QT/r9;2$drP+tJXlP\mt1#jHeo:\nb53Xl1'Nn#'!Uq7ep:2cZ==m,UGSl%F>O)HB<T4BpJ"KZ?UTbbD>Imo(ilBb^7tXbYU;R#GHUGM]^H7-YLAj;:T*B*me#M"T>'[L4,s::ksDo>CSu[I]2/IDmlp\b;6GED%1l:iQ2uN'lo+2p,^L$l-0=^ifcQMZGG;SOG^\^A07"mRW>cLXaWDb/jOcF$W&*Z-fS_jQ=5iXNsK^hMD)Kk5$n4$ht_V)ZnRB'\#%s2jNWr3*$]rnQals7GsF5C2%4kNVTPkObfC@T:>qgf!3)OW/f4o\s4@]c`7JYs$DrMe>KLr2ppcj7ds%Y8+5;(Ol_J'&K!rA(":O%8$f7OH6(krDh<:h>#\e`.kU,R7t3=:lL3TF)aF*=jc)K#p[h7PT)\O\oC"p"'g;EN3k\047U_7MDZ<l9XT-T1\US_t&d1H`s"(h;%T=t]DnU&"R08sR`ou3`?1$L-aUD_T:fAY!R3Do,Se8/X"Bj0/aW7<*PrP2Kd2h'43+p%[-VtUSJqs3<l5CIk:-Vbc]A#K'Z\1!;5%`(9_"Vb^[iB20QJ=iU%UP3;G6X77h'7eKf?#V%JAKj*M^6pMK)S7+NO:ELV%S.<7CDu\.?H=N_mNPZWaqYS+@rqJ#5S,B],cBR5U%%/eDcZMe9fI/h(J7FA2*9)PsCQi5")$"No'e!L$okrE125BhGDYFT"pqkjr1,=NH1kgWtc?%eqKs56s]%$*/5dA^XU@*4I#:Bqob%Q6)=Wn;d;1'^6KXpU%.p9gg>plVG5!HfOjK!')?3H5BQ@YBeaMnqFsNrqFlsreJsXrsGM@s-(oePlB1sbPs=8j"I%=>^.K8C69Hh%UP`7RnRphLr^5QKhmWlNar($.n(^$moL.0UXQWNo%e#Y.:>q,Y%FghL6KQ3Opeggc73*0+-DKN.mm^F)YAF7-l$`U$oOT43ro30r%^IT5?R,hU8^%h3+2#`-V#G=nCIK^s]7p^TZp-s=gn4#8n7T.8d2^*85,X%!+2#DQoYJY_MZ]g8`.Q9h;$.4-S2[VM@?!drHq@dsN%J+^DbP;D&am,D_VoAe`$*\AB&^H9.(5G,[Ln!uZ;:JSY/2oqQ)QAeZd7X<,EI3):baJ-NjY@Rl5TeYegUSA^Qj)H*r9qR:=,7fH%%.=2JaN3G(F3e#EPO]U^MhL5'dSj<u1;6F9%$n7@u(CXBC9f-O[Ik7Vl]*bk6Lr=Q60'oS5hCh/sU[Ua86KN&.P`!bh3I)h)7(TC^%Sd7BGffWluiViG;W990=5qo<AMi@Co^E'uWpUpR-UF=agh@&)5kgpn&L]"PRhY=q]+C+)2=/79D`q]J<qi2M)N.9c$+be(nrk]3&%Egf\ENCf0k*R/1;j6Q3KHUGBd*eQh;J1%El32B0-_V^$oM&c:P)DpPOhmK9;_C\3J<+h2P#46)U1)1W*n8GU#NgbjgjtU)^)j;=1%3h!$1+kP]OpkElbXc@M\lB`+]>4YMefKHGuOo9ae/&CbimfV38ptJ:!!#K)7eRu]/7HkRg.=/A*9js_>D$jeN'<`UWnP=Yd=T\*^%:o>*VkqT!/fuXnM*T!9(82kghSe7`dFekT?r[(lFfV8_6_XWjX$3M"$:rGoP\4)SYp+OEMKOG39&uNa<ar!QPPa@%]I4_L:ZH&c]%LQ5sl:[E4Kce_DU&##"N=4JrKS5#eC@<"WN-hXuLOX*BI(1gVcAfN]'6XOJB;uS;Wg`qmXg#%FK#d]N^=Du?AaWZih<B?Rc4;HK,%]mMmFDnMrM$S)mF-L=Tno*C6^-M`k?*K%:E8<F=7KLmYcr6aD<XATQHPl'L*C->4jB8gP=9R=)1BSQ&!?&*Xu/Tct2W`(8"emWgQ%m=[Wd'_\I\V#3/B^p#HV!AV_6Pq,>:G;@168!T*H&l81CGjjNb2[.:Z!Z=[031c599&Y4c_CbF&nP`!)L!``:3.Nk](edFndN_4O%Z\6!X3d`3#-G!o?<"!5Mfu!94mfghZT\u>'A!Em;dBQLAS\-]ABKDS"jE8Xgpo&F)$Eho0g:\M)"@t[Jod0hi<'aB\5FMA:Yq^N6%dR0q-Vg_sErAo=fHmZFi4b`qS4A`"iM89oOQoohPYqbX*8IqAPT'gm;\a/_co9neu>9Ii^cO"ra(hUcuN(FPNNh56U]rgVinahKW%9u"DSLK%=-di3l.GcK1`mlVURU%<S<fAU6(1XSqYqAKO0Hm;8(FOJ($USi-=n'lLTd/$GcDdWlXG>4ZfT/S3EA(!G(7o.gN*o;&7%@/DKsF/**g+g8/eCHn";-9WJ4HCEu=^ifFNHdd'e\%It905Aqq:Ie4-]H2pqn8\5H.Cip9gS:OA?s\oXFnj%*>EhHadbCFi-XU2@%qK;QEI9Vqp1$ME\d1\.9a7;9=ga4=1=?:b#jn7\>LC`OCUpj,i:SYRojQl<oSWrcWe'ZVjYG^eLI*<ra]b)8J3V%LMYJ[8';Gp:\%:Pc[S]&bu#?6h[NFS([@/$CmO*BmhnSnpH6JEN3LK=MJa8kG's*BeZ=b3L(_%\I<(Nscsk<:e8u@:+dc\thiaNZOd;jn/mbLX4#:%LJLDN]"IT[S?BaWCskC87h;c8np1qO_^BKQgS^eO;-nN2/_AsF4m=:64XfmD/$Jn4S0:#>FEH^/Puh:1nN*1e4MGoZfB&9!?4ZKc%SDcT!FEG"QPuh:QgiYS`8fj@$??n\B=)ta^*r"ugB>3@=ht#PqYJ52B@kZV_k(>=qDjK9&H0J82^\lfVYIUuF4St_.O8\o:F.MaE%j#18'_f0h!6bU!J=BbnYGGekS0CC8i7tKs]@9k48L,'EHQI61W9>Q&:h5RgAfN>1^e(ld^Mdb)g-=UaBre[Ulph[RsL1rG[S/\&j%n!;LBX.(=!;Z$p1#dW6&ng-Xq*It89le)-OTh7%jD>)(Kr\`ZCm;C[S)&-;`A\/f&E4<!&h`!2gZ#)+_@AlF?GNYq@6cNsH<prY7%8&OW!$8gT[L2+f6XrF'[/W/)j>:mXd^/>N[Q>)YjQ$-4iTbu?m<'`3Pn^4R\hJh@'T<GS0A]@f<]>JI0<pjj"Tk0[)K9gM@c78/9%WGIc,X]4P<ZJ?P0d3#L61(mgR`Le/?C$W#6GGf0%B4V@Nk^<29.9?K-DQ?,L[]JLu=I#R'9dF4Z@`@EQgG6oRP1GaCRpkp"1h+X/%%:U&BN0W(X@GR_c[G=9^!Ne*s;([@[\RsLDUj_P[s*o$e8A>P@aHJZHcoBdUfWn9&Yc/)1WOu`hTnIUF(29VVh(?Ogg.V$1%7XgM%4;Yn)))rGm.'6Gr[YT%][\A#A1uYI`7^.0"=p&!K`UBiUhH3WfI@X&t@@$2>158UI`Q##;@e7$AnRP`T]MJMdXg;GQ6:2'fD/1r/%PR0d@mn^9!<JEQL43K`**NPQU^p[*).g9d;SP6V;1l)fdPUT\'IWW*3(24gtlT?hTESud2jbB1!b3W>&]PJMSQ>&*fFD.p^.._W$%PEW5Id[EHH5;3CNRWP>9kerV1]FKic<W4519[PWZUGEaY@PZ:N/'EaP$I>01Q:0H(XSAlUY\e>qB[]:A7_CnmQ8YHc1<)d(S\bQl%$']#;"4])nE"fL%;-j;6=u#q&BtIAXQs^o"^p]s#G;2/e^+51EF>aHcQJj+8[NVN.@!,cj>=Le,>fF4!/(1fJ7SI.%@4DVm9uSh9%4mitq1Q@8`;2%jS2Hg=d)QImATOk-gQji_ti3mA"KJ_QfXtJ?bEZDOt6P+(C$)aueA=0Gade$91TSt,#;7SHd7G2>.W`0ccTLkcY%c*=R)h[-a:X("McM_KXK[Tmt/L,EkcZbeTbbjqmQGucUX_5(uXP.<&*4qIKr@.KVc.^i"XaZ(6eiH)gXe@3O&R:R!4>?@q\@)?11%$a]?7C!gR_$t5B<`k&D=I99qp6>^&^.-l*o0,\CRB?cNhMlAtJElGK0oOP@A@2U:oGf@gbaXE6E++:o.iY;jU/DX8c);?@JWaTMc%=A=R=Qjek0`GQI:=1$!N'4+[pD/IX4(OQ\bQaU&)R21)@Js)dX#rE[$5[#-!-7QNFdYi)_mLIF?+-f^A&M)MX8_+[AknO;?Ol`C%%4,Ibs,A/IDk%Q`P:^gL2kZ,T4r+!A>S#lpl!+\mr-']aOOeo8iOa/0!C8c0jU+9dhq184'VJ.%7Jh7)V/)^pm1;Nr+E9WK,7?9:t%ZX>t#V(WVnlG^aC+IVO)CQW#Qc2+AXdqo:9CQT$&@Y8\_JS&U(5VbaZ)%5f:\g5g:GcrVC%)HI[deagA(bu8+SZ8cm9VJSIKpWR>%UK+05"JJ[^`\:0akS-i4a='KQ&dWp#6MSs]g+WoN`%]Q<Nq7uKO-N'd)/&dLW<>55N6tL@'@sSB[1HMBMJGpg**K_/m]&4fgk+1f%6L^]`dO+G`FH+KXY$/W027[,cIDt9>)hs>[;FD9f=F<I>8'X1K*Q!e)KRcH9Qn7q,Cbb`Pk%rR*]ZC43K#IhU&^"`tm?/=g9_rNA%'pChLL7)-o1](/f8$:=VjLqXMXL6dc3C-c)1l4CH$i@kS?Qhi$I55n4c4N`\%,i5FWqJ/$b1+5&#I%$VO]CL:,&KT$(cN/"rDg\^%^i'@EAHia1!Y6LJNEZZ4:#r'd_4h5/aXW)X[8tL25uoQh"TN&P9u;,ZD'_`j(%SS:17@e;eYF;'<0V21,mPt\_V4<F\O"/$)1@u`%d[RnQ5[NBD,.%m'1Q*nQ==P53&8>c]&3%g-jaA=4NETdoV'd8``Dd@U1@Xpa;Q?^U`0N``X$Nh<r$O#J0^/Wcnk-eaJW1?a)h\lJ%QU(/>lcjr/=b0/:(G=YjhT3po2I\T@#OhpG.p,]c"G&jZ@)]odQ/RUb:rt"o3>Q$qT+r6AZ<pZNm5i+W[S^KK9NFNnDq`!A_+Wl3%AQ!2!TgPJe,eodE:eid^QGUA'[Ut_%Y`2S+g7ZkcF&!8rQDU%j0NFu&0^1<?<(]*--jFK>m%-d<gH(/70b"t/BVu.]G:H!Ko&>ig%kbVGr0bI[uYm(!P7VlpfRku-4h#ti5W-XpiS]h(C,#IM?7e"ca(`,;Bi(YCe!*ecr&E?B8pW8lXfON@UdS=X'<nCJ/=o7K_QjaOT%A!t"]R&(Le-=Qcq29`usPrPXPdSV_bpRS9o9N]n7[3d6DU4,H44.2b[D#-h-`1Y'M'D7:@QluhiQ'b6EQ:9@UY!nP5/Qi)L%9^"e%3%?To!Yq2(G6K>KL#8!b8[R*;R-<r(Zl.S5d:_'2lQM/uf3Mg(d`_JN#Y`SZJ5o9&?k=A^?RV[m+!sB]Lc(IFVe/gM0UoNbKZ9u?%-=+o:gF+-%I4U+(0bg&;Vi9uZVJ?:s(*HX\+@s^\WPk[.Dhk\O_hFKII_K*RP]7NV@\TDA2Gm6S[&g;l.ZIC3I8n.1<^9]H.]caV%eYg$X_7EGE'60#8K9jtGn5`gMJ??sPJVghVDiD"t?XT`[:9mbkg?:<L$T0D2/9I-X-7XV]cPBDfCX`#t?!`@>1KW7$Q3GZ9oc'W_%Za43TTM,HH,7E/`SLE,WV-4d2(=N<1DG^6GRoD0f[SaK&@.01'SsV(W/;l4\F^pgCgPUH(d.II-)/)G<ORYErqh3Gf51dl,NB2QB%k=b%TKll:F?mC52K\3A#$N%us7`@8+/@<X&Kp_e!eY#WLcqgmj"J\,99sF64_=UpM3#t"Wf?#2TctcYikuRKhAq(ig$P_=2LaWH?%.m!C>'3D6fUadIr.BQXP"iRHgGJNOT:_Mfu^sZ(K>#n0A,M"^ajK4DADoXmfih871(DpO)\j_NT<P@F-?Pi#a$7$0'KO7j5Q3D+q%fjq=i*G,f%Oa>ELV&KX;lq4rVLYeoj,04%WBf_L1Kn;DJ]uE5LCuCD,S6.^&/?>dh^]r?B3TRTdOD@peI@P>nfO]q7$[E#rDJD5&%I9I"..5oS,L[_A&gs@`7R2<K=Wj^5F^D+AbGcNB5)MAT!8lNI0lDat5M$a_19;T1M$<B%@2%ND9@BdqPpW:jYf]4WqW,<(R`l=i(%h^^`?KQ@[K^+h/QLT.K.U0MiA>*ao:1`Q0paH</C%rG9^<c*b0GHI._1ip)jAX<Fm/&=2aVEqU3k,'Y[NLpF@je.Np'N8q&h.G2[%A^K!Ajt3pD&t>lp^tca]E?\,38R'CYaUQZ0+._o'<L5KR4P0YN]ZJe[iI"0^p91MLU[pgt$I_i%MM_88:lZU=]fDlVop^))$2:=0%%8?VRpPfl`<\F"0UdGi:I\k+/j0s%8L.uM&M$RU!/VJ>38H:Ou%p$<ja;V'_?sj,5'n\V8#OMfQI9)bJROJcbc8Z<7att+"^fE>9%JsC.qRrmXPW!p*OB;eP,)8Noa0V[0%-*sVG!%bLH%dj@4^YW%r@a)dQQ)miB^miK!_IJFRRr9!JA2`(.'5kP#!Wqmi(aj),]BN-l%=qrJ[n!!<n,m12o(J4qu#Ye?)7q$#eelChjA^CXS?'8QV)*cd.V")Gj0fAsHhEMK(<,>ZDF9Z,NYH*Q>dn31uSI?_diR)t@N7=7.%]J4nD&49lW&POM`90rq+[X,c)d@Q$phdF-KS?:os3*oQQ(<e<T't1]!DT%JY=&`k0U9cHdl77*C4V_AiUHLW,j$PM_kmOc<1sTsN%WsZ>;"u=:9Kr/G/gRqeLK7R0mEaPXX%9A)jb8&Qh.dMV4<`QhQUWo`H*LKr:kU:hL8G*'9#Zs]2eYP[.QF`O-=k.(_.Fth<@E:"r%/9H.1(sEOjc)N<(A@0-S7:=X[1&:fHob5<'@4NnMqLq5k&^[[>MCoWu&\+2.2-iQ7!pQkf&l-aQYSe5N8d1ff&/[gsBd.0/jLW]]%2pk1#DG;ifgh4U'A_(d!X@&6i/]b_bEX44PF![lc$\V];l9H+]@D@C0!4rG:&n&"OPtc*9WaOBq,B]Ae3a"B^..^-i#bXc^94;f/%S*4^A[I=SO#If7@.htT_YW!%:YqhEa<\-$/br*qUXXH)p8QW-jb'n2s)ITdQe!'l,\q%B[$55;YjpH/E/a(P4ZKSVG0NW*fm%KQ@%N!rAae4*Bgg9cuR3>*cC1&7GjA$T5a4\@4>0R2DeF+d/YO2A[B`j9&aUf8ZS<`]0QONDRO5n*od=dh*!_'\dXC'L64Ol+]'<LYom%LJ?T.($cWgC1*Q%^uX#rbc;-$7/cK%e0YFEei_=aV/]rA?!oh#Di?M:".G)_:R3bMj-^Z[;blT\?QVCC(g8GX+>A[(&5Lfel"=R:%CbRSP\4p4jl\P7(LWaq+NoE";eSOIeK<*95pjG&&%j9N3;=C"5$<W,+\E#SZ)-em_AR*MrR10c`7?,Ed`JK&GWt49`[V:67g*hl7%)QYBW!/"$"E[D4LD.re!!rk&Ni\L3!Fcbj#[@GG:3#X-,lp_)h8S&WP-q4Y"@:K/9XJ'C`Kr%fr2;q?Z(q^AKk1Ll'S7(WS#A&On%f$\:5C`'-3aiZ.S"s\DJr2`Raelk+%+c3>$-3L$DW0mqncj15!V@R/SBkF>`!Q,BPX>K%e:p=Oq];Vi$0bGtdT<`=Vosmc6$7;,l%NYO``FCT)i6\Qr3"08eoeZu4G!E!bVBof5ic"N3XI%-?2_D+Ye?Gf#LolZAp@0M;2GbUV:_LKhI<HY\t1hak4?>,hLW\7!@8o,>e%d#)#9(<j)hTB`^!<a`b!?Yia.IP!`]0Nj0"Mc\+W3a!OT-;7jC5AnptiGsTj+G^GbdBEtW#@aV,c`7<`d[qJ`U6F0Y+?0R*?E-gl%@*,-^]')0\?(oZ,-c<[OUZ<0TO&SiR;YkpB+d6/AT%U=[N<i3I2lcq0\k_N.F[cbV:LQhjkr'G8.\pNEN0&1[g$Y?r^(GO6D.6&E%0TlGeC@VQUPu@?/QSi/NV5&$-2lB!lX+AB?f%1XJLi=H^ATj$h?\lg9a9"gs*nY-.%mhVVQK.%t!+=6e)mM]bLBTS0b!Ns%`eA1J%0^AUUTeFQK$H5NHT4+lJHNOJu+67=G#lp,+UlKei*dX;)F23O4<Pt[KJK$J2I:-kfQr]MU9/l0$JVdu@%@]gHmd&kJ#V`h'.($1I%@L_9).ku/J!h,eT;NCL@$CjMGiYV:A(J'FFYt##9bQcJ&Ll_rQAH8MW$h5Rd!J(]6_&_&P_6S(Fd6J1M,1SAiMB_W/X,;EDYVs>?%i/e4K'B;T[ER<;\Ar%$V=?blt0G/gm*bDQ/^hnaZ6PP8q/79C+_2+"8lRG71Af>(>BEol9Z3J[SrW,RA=^`lQ[Q6m3(>)IDFVSga%N/fKK^k@UsN:**H)drgoLP8SjgKGuB(j,mR"TE/'X@>#+LLuN'!S/Ui[IB,LAIW%raH.lRB@bTe))a:gQ:sLE-EH1HO=(_4J/.o0%BFp!*%.ld$oNJ6B&;()mVP1GO!nS$+c]JuRWcZ%d1/YM`*T?dKc$Q368;r0A.]n$aJI23)N!j,\QXMZiAck,+%LdE;o=ge`K/2QV%;(>$"6]FkA)p5DW7=h1D(9f3-V75R!@Si>u\Z\2YlGH_.WBr%4EAe`!qG\>IhrqjD,%uDf5fmaZV%]C*-#;$W,ruuI;:-cr"Ve/k%NuVh=[Q__;"'0e[gIQuEjtk`r/2T(2HelK7G.+Mo56:&\\5X=Z"WH,NQ*^8h9N_&B]RptIb0&E8KGM$*><e)Jd6>t&FsqNDZ^Mb5%J7<0"L#=#fkR6UA%(&0#/[h5g6/A$nWUrjlqVJ[6>VtSDWEGIjB7^jnoN%i\=&L^D\SWl4fN:UU`ald0'eP4k(c6>'Ra!oX%W![S%B8teIIr'b@'jMQJ5;G!j><dXt23o9nGD%r#F_ru;AsV%N[A[\4e(O!j23T2,q]Z<%$=C8C6M2>c/mD5IGqs]G>C(i0)RpDQFCbm&%gooec7R[NNq\>_AWWk,0A,m@pN/f&I5XetZb)7ld!%Ws7_Bt@0CMdS&16c"9[5(LWPAbtOdp62gWY"?O#r<n];7g+5KQOa3R-REu%ImN+#e.1MJ)Ba?/4)qDY,fr5Y;BM.]e\lp'%Y9nq5&4%APi1]`Ta@2bJh;R+A5ZfoN9b"U.)tn8F>>J6AQ'IO&r*]n'!BF$Q(iV(%H.h7n@+Bp)QbT4Yg\M\+3j>:lIFdJ).+P%HBLtncLJf^=_KrJf#Cq\$k(FLI.Cr_\9\Y)h]kqi$kd1t1Ap=dP"hOFh9Wn,'j%WsR%F'T(:\C\St-=Fj(6FDE&/i.7TkYs77kf2OJ<<H:RU6qp%d+]ACPaUY=8-QZQ&#$BeC9uA6Tsac*FF=hT1mgmNH7:[r7TFWs.kop>%Wa(u""RUY8#=>B,^l%^!:n(JF=/k!*CLDeK4'`5L&R\f8'<\E(j52[=16d)mDOYV,^G69g-]f8Rpd_a=\h*sO=IMNfEWB.*+baV3%hm\E40OXr3:$8+;3`'pf;Jm'IAF!`-:/L8bW;c&t(1;$KE(^UCdCG;UC]FoUdnc?:LE/(mC9TGi%m%k1J=DAqd@YZ%2^b<VV/WMh%S"5'aV#K4gSuVG:l2Yr_<d!0s]s)\1H=d]*k\DYIL"VDp['hd^>%IiL^<!BpJEVd%[p/0?)E:-[?DUs_khF>VLDe%$#krKe+_R6u%aG)D]1X^NLgDg7E8Z0>X-97FCIigRB?u@8J;^Y\"gnh21P:3ZW$uTZ;"]t5KF9=$I'CWdJ$VX`a'm"^R31%V[\lfhG*@[#(obT`/%F_e9cM1M'o("Qpbd*9d*DKQ071t!hSe%eT3cE,[Va\,JEVH^Z`OX&]:XlA:/Y0afNS:#fG\$6#clF.1#4OspR-Z66Qb#6col_]*3%5]5.p(I2Q5Ptl.>'`]KY\[T0bYf^\HCH*@bh<90S4".U()Y\>D7V.O3M?3/7W/SVjrp5XW0#H2`mQ[[me#IrYIMQ>ROUQ^J(A_mp%nu:4FLrGR5Dl5@,7fA;6"/7'7H@P^IJ6B6\plp;/F!A6b$.?sSQqthO<59D0C%l.<H8jB2mLCnk6R$L5D<;Z;2G\sOo#uSQ=_^pf%S%72Pfs2I_3(RK$aNB7lNmaBlrS>!hX>Ii=#ma,KQHsLc;BfA(](aFJ#Y\EXmQGbX;OX\WUuA,&e7n'!E+T/-NZ(Yg$ER5Hfbl%<%gMK,uU/KVqlB66r/$R,Xs6c'S-8SJh_reS-4M;I%kF.;F(k]mk="l<K[G`j;`3.r0o.'pj=QFEb;q+k`0q?b/Ch$C'Z[n+:QHbuW%e0`\X(=)HUbu&t7U/M^[kI<V.J[Kc#8%gqE$\KbUf5A<L.QccGFrrr5,$jX]&cg:YJu]+b!1Ge#3T:B>`R77.quE*4m-Fug;kSH6%cFaEqJ/YnB3.loJ:pj5]0#Ai`bo3r*@2)ZKFe_fe>6)"&UBo&98m0KX2lM&&";P>d:f0Al`5=kJrNuF"7?(--/a(M-L"dj;=VM4N%@#GrnBGFpMmYZh!(2D3;3K&=e`qZSe8;>j-`V"I0%CC4q4qG4*[T[d9a6$3f\*i`&*b%PYkoT-mbZ=_!$)2RX`g"LR&L4N)HWE):%7N`=<%2s'@nOeIV4'mRt!L%)\O*^R70k89G-:MF!%9a:?,,U6HKO#0gqc?0u!RoRCK"))#Cf1C_&K<T<c%ElhWEA;f@t[f2M\%[R%\gBoq>-[QP$Wb_\o]6k;VU2CfG8C(QDkG?bjKr<I`n+?E*ANK2oU%^L)Jp1nH,R-[j6J7LO)7k,6q=0t0o_=eLd6-9ZF5Q/,W;1s%(_T^sA-=*^V^H=f%p7m8d=#U=fLS[r>6I33FH,I7OrTl2A8)(0`,nXD"C?+J2p,J>TZJ(FH_;REP;C8Ei;oR@@343<JYATj79e7D%83(0[Y)5JCc>8F.p4-+_J?!+r"'<Sn<$Ur.f"tgA%5IK/=>H;`6=VTPQFpn;cr^[V,p1Tiet[-a)=NA(?*_7?>JT9DJXIJhn\/P5%Ws4l:>VIl"VX3;taeCAIe)QApA,J9F.COJ3/d&[S8),l(;>6kSHui`3%;#QqK;Oo/ja`/Rjs"@]aQ';*QuV"t(Oo_(51X+dO40s`%:O-NiEs%opZ`n@5U;q%_\V5eT`ol[[o.Y2m*ou\Hk-Xu%k@*Vj<(Vu2F[00=W-!)86\m/8K((?1*gl>VLo>S;#M!Z+dIj?jE8XUg%OEt_oMeIO-$uI&1:d6Xk7/-E5Ipclkn3$gab(bm&K%NWpbVjshNWY^c2%J7t-<0Dje?S!P(a'n9[?SZp#@Q#Ve%k]F<!LJ[rN,CU%J?8#ue$iBYX./N1nSK,.HOb-NTPrGT<H?Xg0>=OjEjMkuZ2FdWUe568'<1W31ju"`-@lG@8nREN!G8Z%G,G?3SXI3KV(u/Yl/!<6%lU$N,2H=RM!Ci'MgH#FbA[#Gf^;Yh=:(;E)XZ4+4%s)R?JX/.VDBIch6d+YkTCj3iPsP/UVpfhs5rl7oOk<K@f$K=mh[q!#6*WYR%1:CFHXSFb$)G!k>NQk56KMO%/S"cR!RTC[k:XNi:l$%!&'f9.fXnk44+OXj/flet$;:RcFgUa%>PO!DH^OZ,4-Jp.>gT#-GO6pJn%D#8-e3s2qE#k74qYQ9]XN^hpG#0c(L@_3TG%)o^/fsWkJ9ipi:4pS^=:j)fADmKOXR3#g!*\c>/'&3+f)A..hg\l5<+)SF.$%3%$%CbN@#b-qZYM>`L<-:<0b);r+:J[O0S/DBM[(kt_aM-Z(IkUqVSAk,,@W;UX=,%5aP"*Nt#UlAG7JGBCB(pZQG3ST>rb^:,0@8kFb%7<b<f^.pr-rR&*(_THJ*?>L:O/QcQlhb=FkT%U_bdj_Li9hMZNQ0.&Q2R_<d<aa*q^=a5J`i@ud^*a]C1>,u8h)GdhV7N7-HS(n%%eoBp.E+/%5l>;L9]"f*;J.T>=@6$1]>&=0A[]2DB2@78643kFFdl.pB1GamV3/1_jS<pK8);(f`GHl^ep1Fj&NK)5KE?n_;h[g5j%C4<U2)YRh$RdM,rJ^#\>`'.uSV<afO_/6eBmF8K1S$l&I0N4J1k$,S$XW"hb42bjD*plPR71@DqRBbeb;Gbk_m5rd2cISPg^4.0M%]]fo9hrbJbG-u5[mI7nl@i`:#*YrYJ:)2OL.moNCff"4[]qq>k_mitoAoG#fa0pG)c;/lc5>:%u]oOuN^heSmC]Z;O2qo/6=U/=U%k7G;8B.!]A4#B*W!DMWf-AZ1;^as@^Os7]#Y+fLg:4O(mW'V%U(4\!&TYaS]^p%_%[n,0PbdILAC'U-]S#Uq"!Wj]mRXr%L&\osY%2c<8`$u`T583K7#]EUeoM@*at-:[N!(9k^.Z[<QSPdNq`$lJ,Lj'ZEDJ6h#*b+<,G&G(Eo\N!us2hAhEG/.'q$V+b$!&cd\lf&49%i-_r8nN7tF2Vip!ksSq@(T*nj=Z#FMN;R:,MqfSn<g=CEKaB=1<\;X>!lKNXlmJ)2"dmHcOZ3NY!#$(l_$Z\5[du'`YlHSb.h];+%5qm&DNotP9J&&K08,=$0jqNb21%Z?^+;3pLi&!-Y1"+>IZN.O,:BO+=b!2$-"qW.^QgG!kKis'*,:a7O$Y-HfC@W?0('kL4G2R8*%VoA9#:aL_*_)QceliC^L&<YQL/r8puk5R^IL<gi4'*QCH?'.heSdI-UB,uT%Jp*&)444%k9+i3\ZgJK_6q?OPd*snD&.+@)$O-.7%8V#$/mb*l`ar!8DPpKjj/&Q_aP;T=dA+IQ39^2cTL;bH/ngDB5%-uiNUmND7R(57@Pn^kRPNAk8N)OhNPh#@u2+<gJnOura2&miQ%*/lFME/YL#Kq8_]R(6WMBbm3b9eB8*>RSgiZd`(a/g0I@H\sIObUjUYaQA2T.MX6RknbI`&P$jq3*BjsPpI#pPJnfH82^Zg;qGY-%-%k5h<k"4S/q`=uCf(@/E<as'/qN\pd-f_8iQeXAo/1a+0%-T0pX=>@Mm&EGIJcjNpt/+#nmSe21ts-Gh5>%E].=#qGN\c`n,3GQ%bhNrg^qARN*>jkuYM]@aoQ)+bK,+:C_t*iYMsn/(_o5\aHkZJgTA%8&*%nroDN_;E,N,4Q20j':4PQ?O'Dn`XjLH3?KD?"@g@9"R%,E#XCEb6&],.OX!WiEoq;<aS"-=log@,)El9?m0B'1MVuC??)n()ZVdAA.ab"W6XJfF&L(/P=hu?:)L/eY6K1)k`p5Vk+b]iB:mL%[FA?G<&M9^c1F7Y&3sN1:gBt@TfjRg@]?BM9H$)Z0slT$pVC>*?og*CG>^&hAhn8sV^+ChG&55/FAkNUeCbsSjR-D!)9j^7UW!h]%[A*Xu=N"/KCkLub;mX\lN!5ZoE4/XT`QC0p(@/Dsmqpq:ec:%6'dpSL[=.5rT@Gk;:KW@^iieh5DLkZgAX'"J7B\N'P.LZ8WK>i,%JZ`>Rfc7\EkfK2o%BK!D1H*p,3OI%SR>ccRD4k($a(WDtC:ur5eAMJn#a@8p+LE5D(f+7=ZnX.,$sZ*,T)_TgklajL)m4#/8U$Rr%]!6Ze4UY)+4e"o=fZ`7lWKo,GJj0J[!uaL)o,ZoS=tM%[EY](fC"(==`R50f4qi-'_K2IVd;`'$$JpQ;L5D=$i*c=qV0.E_BffK8%[Q-jF/OO$.Bb^=6(5m(h`gi6,Ut]a'K+:TFQD5\5WF6-07J@Rec_&ef@F:kNA$O^J28OHJDoFZaPAtOp\]UJuI'&5[2GYao\T=Yf%S-e^QB'TuQ['E,H`l%lOjbtk/['OZ;N%[Ia<(hQ,V/]@l]&u^_I'D.sk=a9u>bgIT0RZkcK@F89]-(pV8R:GamNKR=2pR(V:PV!D%KTcTb9PTN<'j8GE_obC50J*Wf<`]MDXM2PL-At&ra;`@6oT+4$0ehF`!>,BaMYe(]0OfIn&DGpj3j"A/)T%1/GJRB\04m1%YZ^AV%N$)>IeA:Uu&A%/[3SRq%%AA[h)MHtgV+9'nbbtMI"Ci)PM]2\*qdXFoJh8RPcDE3;L?fOJ*`e.*;^t#4@0G"A])l4*1sVm?quu3t%Ll]N>i*sP()Fn?`=>r6^))uIZJV['p'b+TK-Ud<;ZUUH\Q5Z](!6<@uq'c!.Tf,8XN0[$>:"8/_MWd]EMG?fAKW0khJ&melm'.:X%?#ru&EmUlg7W&2EMf0;=6SY8UG26gQ7'rlR/S%,lC@+3HS&3@B2ESjtY"TQi\>Y6jUcFMu^mZ/&2rfClI;*^39H#6pA%:oB6V$k^%ca-+V9aoE8`NU;$N0HO8-K8W/h)g?7]*q-;Ec/H)*^cE*`lpS(k_-g%:$-K]\?8L?9*D]53<D!o]*<CfZ2&Jg9CN7kgSAOfYYKMY%-qi!G229N[dkk3&&EZm?S4CJk5$Z$n:8@C>X\El_5F=cNdI]fOB:-G!;sFQK@WDYF#s-[ImKZ`8S[m.iX5R=/!\Lg<Ebsd#B<6@,%@.=K>MJ!ro4Y)8C&(TX-l]hC^Sf*Ti-GSl7Z&Cr:K0*]#/?GLW`ipa_jbt#%l;;%:N[b+Z_Dp"9,DFWr#f"t(ED5MDRan4M-nEP=%`S-Ce_dfS(CU6Hj&SdWO&3L@EU9M:7/-.(<UU+Y`2f:Aom6[QkgJm)8FdF7E<$g(0$/(Zf;2r4)n3#'"8OKP!c4SVp[;AqRUhJP4%B=:?DJ!9]43q3jFH28n8k)<tg.$.@Q/nj$i#t"n`7Wn/=/EMi!@IU1?2k#(<>/VGh(Ae2+Qpi/F19(n/C&8+OA7u,^NbtKZ0O(Ro%#b)ebIir8W`b])$Kk1t;:1=F:X^Pdnfm4]JaBG'+-a6fjeFtT6!b70/fXT_?k$hH!WOu]PVj7K'o-7Z8BMnn>Ko?i,(M38Xco@)r%3AV-Ge%L!nJ5$[]_Z#2$?4a2M]+(GYfHpc'6]4p->S\30VQ#AZiR\L,eTYHK2m@<U-J]#41L[(uYB5p_>S='u,(t5B;ff9aGD:$Q%g1d=bis<hk8Z@>M:mD=f=#,?_D:@F]B8T`LWIc'[o1`WYK;Of_X,.GtK:s&<aN>^V@,'l\JOYj:VYi9#+i9lIjMFFj6DNt%_[=0Z%Z$Z*dC4]JW3E%JoN3R"*8b^A2KH<I99^md<<XX[n&B::baC%YlVQ/8mF^8GPNlcK,_9Y9J<RZ=t"<IF+9XW.D1[`bjq2rehg)@NR%L8JZk4;nAQgU*o0DAekIShTfJceHH&_R&B(Z^hV'@qinljrfYZVI"fHUqCR1,-4k(j]E/S8u:W@STC5t96JXk^'6u%iP#M@9`3Q^%Yc/nsY6!;3Z)l.%)Lru8a*n>^+Z6CNfb2)jW!l2Mf)Sq&<^oRHMZAA4/VMWE8.][Kb@P#a+B)!R!:HlfI+#-(!pCN!BpbK#SN5>a%T[NW!]6rNf<A+VH6(K;1DIh,clDa>/&Lkb#[lWfm<dX@S:*=<s42rV-c19W+RF63?JnY8T>gX8m$/IpXiE,"S*Sh@%r+'*XLcu9^%CBtt!2%*)s(b<5Q9UUF`^+=p64Obf!@f+Aoi`S2Q=muum")?=QR#]j-d;%HQ!IMQ7mi_M5eb=cKeo@bl]?LChlDbWfWhJHfIqGQO%fTk8*c8]5,G8B';8V?HHXc6r)EYBuTiTojR$uMlkA?\)$c#-,&\;,L3TZ,<eNijkfX4;/h9B'(5A;&O,U1:86M]4P>`)@3_%>?V`%/<[-$4i]RA_%UnW:VHpu-KpkEV-PgKd2P_7;sde@pWZU0ZUD]C9rD59Z-)[rrWgX%*k@p$cd59,&n)j;M_^AC_?$VW5.G[6VI6U=%=$jSmA[D<uS<W=2>1$k7a&iBD\CED`F/tG6)A-FPr7e>%gh'bJ&Vc2OZDpiThmEeNAJa]D_LbYjRhj7hf?]r+`7mo0QGPi-C%2q'%lPPRg]&+;s,m+sO>@q,'[",d2R*`@CWlZOUb[1Hp>utma?^gj='Fg$4REe_"<b8m:V6iWo>"6q,bpZaTmM+;1jcmgU62DRV@bFsY%jACURWej]5a)Gm_!DFiKWC;hbTh3_*RH0523(ptVroLT/2N4*BNI`JOB^hhbOh'joE?c2ME_NfPC_lOHSf*ZQfOcebXJoE73W5IL%RGk#7)XS]mGIGqmFU&A9N0OU@`bUuG^XB?]93_:YAu*N3+bUak:D5+NH"3g^.XR/UNMQh&mBecp9+<-12_H8Ye1bOSAs$B-e6jV$%CYtHs./+W=Ycft/A&+Ia?/ZW7>:XKmE:EdiELAkAK,[MJmb&<b3+40#nE:RH]%T'M:>p^rCFcWlKYdc!)Rlkk)@*c)=[K$+E$$j1%Y',eW>TE"t3fO6cSf:rsQ(p+e"e1g$Q%L$i7bGe*PlmHZ2O8G'LUt.MZ.CtF>?+t6Z*<FE<85X`Rr9Y_9e=K"`kedQF@:l#JV#ZS%:8`&1eQ#8GE,^_K3R]ps6PM)I>=9;7J_YXD^-SilW>gB?adp#Z]n;CM3ctO3<FL,R2c/L"o3?s__<;/RA(NZLH'!cP?/IoBX=G!A%co8J8\")b'#YAEui_JC(j_hLh1o>1FAmen+FT]'7Oe#.KDST2s`)aLY!I).&T\.kN9!rISHYnDijCogq[1.67>.1ij2UH`8A^&[6%3ajOZV1lKHG:9f-n*1,OH8QV(6JXmsM&'*;FTYjL1uJ,3DD3dN9=Lr@k`g3,cdWCLA8+.@BNI-;OA')G^/-b5.LYfAn+m773LPWM%lPh'9=/NO[2b$8be>_%Y\=RGAm*I]$^I3-0LVCU+Br\q$^;1Nq8&'0B#1b\E0CJHAk&i6:!U1Oo7&_p)h($c.CIGoE+<SU&ch%Yn%p"+0XI2.8AEF$mk!<c7qm<fX6,hl5_fd_N3T_#Vb%KN@7)qs(/!19^#D5DFV+?e:6dDck1!4o<UXE>Qab#I/j(`i\$/]J3A*WXDM%@Df5A!&-DGK0XSj!08:,Hi$$da;S`rg]'d`!K;)<s(@'.Ra--S5KE<$QJVV%c$c#lA`riN0W/slE%M0Yfej'WeMRb.mf:.fWncGO%%KNSTNB;N3#Jd;/cJ1J]Qt_;+Vn3%=A.Ar'kO&>cE[a?5ep@CIPnAJ#h#dX%5Bm*L*WTR^RQ:t0@c0E.!T9__koBd%_S#O7ImBH4%0#W.'(ZKLKs(B$4kpajVpl_L$g<KY6-JIU+o04,BeBZ;<j*lSXf`/M@Z[e,*p4!cuKiZm[s-Zt\cg5ZK5>sN*GqUeLA*@V&d@D/U%gNW)1s/aNNJUTQXdhBB2BBF]8Bf3a]Z^^u_J;j;*GOn&aW!2%SEZWiNZ]]M'5Gm7[c2<V`E\gF&r^RtdF_b+ZH$GAlH!ocaE!<h)%47dr@O3[YF>c'=W#;b)Ys1u$&o7-8<cMenJY]g(,Y<6k+9Y*1WJN*XC!H7-2!,STaoC.\VDn869B?&Rp3cI%:cAW><MPM[A1Z""d%T^S:'"BY7Dm*$<lUU?@CB"[]iKW,IqiAia+dlQJVY_gbN4[beG"rou\\i::8&]4%85#-d#/@hrlNt]@&el\c)'4F5ONT&JtfV.:s%Z#Ym=_,aFU^Km?8AeOK*SR@HEW,7sK,"9L`EH6E%#kL>_L1s,Q#fQf+-.kRR&0au;V=nL;c2ijm;p,plXgr8ENtgQ(?jN4dKO3ed%`0hVX.70i<N[<[Fc(;HNMD/Zg&'rr377Kad:hktT&Y:8&G3o?":]laN:)r@%@EcO"#E#1:AgW'#30B>s-uJD47(BRI4HC.aekd9m%4\Pu-82kei\hF_<[,m^80G+Y^A<VA-#f[<4-1r5cnWa2TpI:YY`h@'-@im(MnN,\qTIruml$53L6cK0r@f1G4+u)m)8.d1Eeh\'c%;FHT>)9sEp\1(Gh)Mpus9Ojs]kX%^--Aeba/5ubE>K/j)`0nX`GA8&?ra<67p[db?OHL0+Ip[Do0Y*]>\.>%K4BdIM^$it9pMPW[%:LL@dG.-;+JSZ:V%c^%`Z`8.lhL,1VX]Y=gCWEkY4@F:P?i6iL[mRTsm`q:thn'Wh^I-7e."-LF40)/$kKTpnh2:m_6's6I4*>rb%fNIBZGM[`DhQ>F#D](OD#>0FZnX&@s4"_i_>;F2R:WgqGEq?*^4=N3bb!"K>PUGST8\'+EDP!*YiCeGoDP!)^-fsJ^\Tq(jSs4Sf%Osj,Kc'*2>Ute']2c%T@PB-8jgcR#E:WgqGEq?)3^+N4(c'*2>Ute']2c%T@PB-8jgcR#E:WgqGEq?*^4=N3bb0?,jqq7PgjlT.F%GuAOOPaa&^k"3+/;Jr(jHS81;c'*2>Ute']2c%T@PB-8jgcR#E:WgqGEq?*^4=N3bb.Yl[Eq?*^4=N3bb0?,jo;(/(.9F"Tk"3+/%;Jr(jRj[=[8\'+EDP!)^-fr([-fs>m=WUpsnR;7f^O3;Y?`Q\P[e"$E`0f"oMc@V:I1phabQ+SGRR^c#Rom#gS`9&rETb4*B&hR8%Mp3C$WQt,pF(^JBPP.(hWV?<BhJ(`9])."OQ>&PJo=<_u+ESrrg@$:f+]lCc4)`;H\7[dKCNmMe)raQR5t78RmBcDP&aNiR:NJ'B%14fn4A+t:CmH3rk[@c7gf9',kQt#2gLFGr%(1H1C&K]T<*h+BbA[HtS#$)4W?XSd5Zfo_=$VV<ocW":qhb@qemc9<))dm9C4KHM>%=Oc@Xp'RQLf!]:_-Ps>jN5jfO-"nsgaYSXX-V)Fm`5&1:^P0($10UGR]0eBu,(;o:lmMT##Uc3-B:(C`+D"A;V;,g>VT&:-:I]:s%K+eeo;QT[N+G.3>XJ(GTlH'E;M7@?LHp6'k-E0\"k)G4Y>jBE@P<Gfg!MN>Z4i\8O<"/[bRU\#>FBHrae?G?`1sFffd0r9Rn7D*S%`l6@DV'XIo9,J%<QF#sqTWpM/9^D]TP$M:Ho6Y^ac+:ZZh7m*<C9c?lqHLog%#2aD[q^Fp+C-pLR#VlP\'*_aki!]>BYu'dR4Y-D%C(k'41h'08[PpAR("DXoU2@`Q+p,C.A!T9?kC&To2dE^JbU7=c617Vn(bO_8&CF5<7&`Vm,R2f:=MEqX/q,`QSZ_Y>?#-E*gREMG%I`!A:ft,lE/eKpU.:X5Ob0dW5m,`h%F%82*#61geRP`raDk68WPIf>d``u(mVDHt;5u?0Bc]+ubU;3EQ7AO"hY]2s_0Q2,p`X^C)%/kj=.*)B[`2]_"<*]1qZC\Abmei*IYMojrQ:9d+9WZcI5BGYXF%@_tniR@(_5ALup6s=f@J^n1/__J:b-J]l+2qto"BqOV@k.q8Q%\6>f^`U72=`LB!`neSr4DVPGgf%-#Y)6'K,\6CV0Cf^P60lLu\9V/Uuj5M'=I&00uK=i%qS`mujP0^PdgHs-bb0of!g(+a)V1r51%mVZ?X%-=p_Kp)q[=8t<k[4W>NB?)p3aHq\>f#OO?gE!7S\os`cg:,29T]f9I4+m*>n$lu8!-pQiK&R8QWsG^cSuj.Egphf/):$eE%QqcrAAlTa#ljYHNB6ieYI,cNB2oVG,FEse%p+S9@C17?T\Hh:&jfZ:DWV/4H4pHVB+49K#^9;<>e#)H^%tm5%r>i:m01R+j_HT*'%DcL?SRu`r6=r[06pbVj8?"ZCBMsa_4$[@1$W2kfAb"=Bo6kLebf&CM\Zl$>.RcC!F3l9"i"rmE+M_2MVT&VVZk'Wmg<34>3;d;5-%i-ahH]+o\SNc')]/^qXC<-bj9c@sgi1V%[Yn-76&FVB**l5eNGFWP2Lr>d?PR8E"qVi=IG&>O>E>BDte>C`oeG,'qDibl\B@B!mL%$IMuI;#>STDs1[%a%F/+_5$W2cnuXhib\O/S#O;XeMeQ&]I>kKi!e14W(Ob7UsbONfUGMeF@Yr3M(%edF@9n_""EYQ?5ATh7Zc3d%EfWCAq)UIgne<8RR,E39Pb<ejL\+]M6L9b9!tS?^d@q-%5HnSl3pf(>ZE,^Z4;$Lfe_M"-K]8TRq:BZ=2PTFmTH1qa[:qf_Q[S'(%\)3,UmuUDc'7J"W$^I_cN8hKTgLp0p1C72G\[o08'<IDk3V$DrGMWe&VXt_GDqrmE^Och`b;XA8_,MA;&BMI:Y"u.B43uBA&hRnS%m/A#j>ARt&LI4%RSlog#=IiBOqrh;XCX0`(e_^Ea&aL$"2dSPh<%*+>I+R4a?^c+pC!YOiZG,PPg^kn$s$[HQr#0d4YVgcCRI&gZ%WKV(6m'`lHC]$B^Ktbk&L1lp^lPS#m;4;0,.rY'qGqWI[kVr(YDZC/6P]BG93s:.j3R)uA+MN-p(=::dL_9=rYRq;fbR/4%CN)HK%Dq`gX/Y4c"mW[?RlqcI3CmU,FB;I),=-S+%2b!\"rHja3"``/Tg`YH1WLVIdD7XLoZo^TEM,FT,eLe">s-BiUB4'rX0hO7jpK3:8%)tf).q`G=Lh-Z,mh<,_o[5SNU)@"fEm"i]*cMtE?Gd77DrA1g!j*r)teMse5j19S5Yp9bTf1bV\Y75C,+D:.8D;=N[2iS(56jkpr%fj3.q&+QOVMdZ:mU?c6PWAs("EX1%C0!K!kH]PR3I&Uo%.$(cY]quV&m'Fl>qU&n,dT+4"11?+:l1[Vldl?j4//EGZn-76&FVB,@%D<WaRg=eclG]@($%:"6Aah@\fgG"!JSrZuu>M[M:.O().?SaK]=SLCg/RZ%rOkdNpp,4JGN*RlN_tIa-K/Tji-<B/#\Jo\'*RgV!%Z%KHfoR-qR\$-G=$N^^\G\j^i1UgfA?D,sVTBXNm3`B;TV*b;]SBeQ;0HRd>eMU].ks)c'7SO`@eG[*l^jb,94'#_6W%4VaPCM6g%NQAC=g+kJ]]2=R)I#"ZCeH+0cp_)aLK:Y]>mC^C0AY'bV2G]-j/9&pR>*t:nIY5Y>rB7K&R?Y2MHfnS%<GLCB-*HV$C<[*Y8\nU%%V?gJ<_odG6=`aRO\hXnmR@;>qQS=0JLM(7RHZ*,GK$!o;`Bt:nGVm=d@q_8.c'pSU$0%g1ZZgg0jmY[5QcUS24V`eGg^]8Zh&B$a%l+ReqE`\RkU+>Ni/\CB3+&eTR#.32D]+*-#>Ko"::mgpcgA"KcqiiPRh/"s&q<%UgG:OI,PjY?uYNtqn3Ii?l&E`CcCgp<]@-5aD%JtC'mbgYhARGHD:A^'!F8??GE<qj5m9d]+Hh[=.s.ok9kZ4UsBM7O/nfDMkZrN=[>h0@8WO8AY*l5Fg$mom06eFpMTR3C%.LV4p9%.)+3=A!A?E43B\CW7a&]X8>Q2?CH@e(jCobfh>DGROu%Z8o?Bd2h8F7[V=#nohr?Ud32ed"#CglH]Q9/h:Ft/l:PS";cd_oF(bGc%]TB[9-[X/,C?AFIhpgGBdXBI/c[2W<2nqi("6o(e=L:E-akA2Xf!T(RakAgK*BeGVh_&j3b?\oCghh5CI4#CsaOR_i9-`8@[pdm!%+oFbL*kM].bn@1j2LF;BrJbm/q(j:[\Gmm2lrucM9XeHdPKh.jD-0=m2f!Fq`\sCM:*fOJc`qZ\0A*OkEk!40h+K]3OF2SH5&ZSp%O=gA3Kh*Uq+o),=c:B\.k/iCGaYc?5gUG?ie(f,iQeg396`JKEl4S8FPCA$rC*8jl-9pNPUn8.E27*H6rU;,0Q[\]YI;MM>/<8%^%8j>Ql;j#@:<qKYn@08A+3Hj$<I%Po(n+`3j5JV(=1&6SFhY@NJ4#B9fIl].A+$MXVndjRtlN_p!Z[F::4jUeI`1?]Vfs$W<0+hnE%2]'L#Y1C:0Zc7l::cI]%;d`?!!E'a8lgdi,Gi&ZY??C*>q5=*^a?Ns5VMhUUPIG@-.-.#,@;U4JH>7B>5<s%]#RLd(=YB@ZZS@mO%eBM0\J8WZmHadIKJ/\%5fG\6(r!kLr5.81mZ.2PC5h+u-(&hmA]u4M6GK]c>g#^j;1\b8B;':#KO\=M.j/t)JCNOWkRIYo^l*g,U%aW,>=cNdp]Aeoe;en&>RjS!qk!-k\qHfP\n1tK?ZU\CgoGp$-:Zdq'ia_mZ7?Q6oFH/)E41tAWepcW6<k9_HkFgL<7d;1d[e*iC&%BqAb?kr6jXTGF\%gW)Z=G.Tr\A?qTUoo\8WQ<mO,3A^5AK:ElOf^R%_\^9A\Qt/o.5_P]5+pnb6*]9BPNoR3.6La1m1[5&[>d1L<%MH(dXqWubcQm$`(O9iO.mksOl*R:1\*3X#7(E-tH]6#;6[i5j)o+u=o1[K2Z\>d5XVk$UE2stm,*9M[6f%H6rCj"nB'Tb="be*70%Fh4GfEP*s5p9DsbdLDcXj%A1AM+715<g_^To$#rH;.^Kf]:-ukO&hmKEE@-o+Pp(fqf^jI^:[U*MSCO]g`]t<3$\+ma*XP?b0K=J%-)4/]g/7;%OmDshGtVN4_JA1GZ0"&&V%Yrhg3VToX1R6T]?B%l0tJ/SESKrf0ff&V!pO;q@!047"N]QUpHf=J1)7PO8j2rrU2ImJ%[7r%Kfj1JuqjSG;IeG@HYBRsbK+"8Wj;lo([U[d8=6nS\^XKUL[`?'`)b,,9)n!8SE-?^;Kp-F+4g/B>7T2Uh(Mh'ASM,!s?,mbD%ilV."aqo8tX)MID[WV$neZSdQ."GT[#&!\b/oqoNlhWC3iju>IG1U2#B)A&5GEVFP_p41c!Po5LlWLcBU`64_`S+_gZ*bgje?(B$%*a=8k`3Dp?n$C2AqU+FU[MJRGkC%5!N!`e9CPP>D0/b:tmLH=I`+<<gd*$(>2/53qYuC1]lIB>!GNXB/]+$PZZE(r=,bDW.]Y[C"%egqEU$S3,%n)W%gQX721@H1hii*HWZ!gtmT=-plPJh;p[SfnlqfjPZ=$cJjF_@NiQ'mTa3A_.VqZ<JO@`lBX=%X!Z[-228J)cD2S%339:Wa=lT4>o(N9GarOtm24OJl5k?]jMf]tGg6A94"LGYnYF8HAUi=BOcO&Z8",2'U80-/>:;.dBEJu';.H5^^:#c4g=?H&!X[m!%hp.dmDV/SU09B!;q%"UfK.NP%6b9Ge0GU4JLW<pEXJ8GQ1i7_WE:^@=oE(G.7HU+-h2HDD82&^cV8ET'm4\q,jcaQ_R/AYnO:!=O%Og&!PlEHNO/I\64LiZQk'p-+gRZG8pZ,#3PbZ`8%7u$a.9.kQoBJ7Q8]!TH1UVtGiUc_pu=E#o)@k_mm7.,"jY[o@n=@7Eqc:0aS%D)V5J(tD!#3F7U]AhCC!_]lIsHdY6-q0(@:F:=iG@AL:ta$\SMh!]HqX=hC.%pt',3XT*@@tpu=!&7u(7/)jIR3S>M`):dcPBH)N%M![@C6tITQEqO6a`m>p^gPe>W=Df*drQ%aiG/`+jRnWSI(.PClH#iTq<]b-I[TU!k*BP#P3pmNn%1%;$!#mk/Y6/5\IB(Hb^%lJa%h1(j+-RTqbZ`hbgLZ:"/Z_+b8%bo@RgtVIOXM[6J:^?T'RaqV[qU02&NB%lc0!;ZNeDAXT[+4[m&IHI.NXr[],e@jGQ+!]ne[!6"%k^p(`B>2P^2P@2GEDP<mAmJAT-FSEKQ'EY3l=R0Y#(L"WNM0#e04reH5f-RBiN`)r]g-bUm%e"GQP1ljluIqX?`u$pZULS^Mb//c%m%1&#o4BRd,,Z=FfYs&Xm^+MslY^LDVZQAu$t-a3hVcQ/rfo1iF_-snU7e[^m?J!!h:]<H]@q/Kk1U?aphlJbJD&X@=^1V4^>3lg%F5>(II.()e*1$3[rbAC8Luc7!B1BaoZ6T.h0`cqN"$egnH)/="+[+FWk8,habFDD(+4/[aX!7D1@EX+d^'U\\Spt[_=LlU:H`=6U%hX=Y?\%X6Tk/\k79;^M#<RcK)^B[=`(;>(og1\pS?7)IQDI'7?pKfXG[f$\a8$l*?WGBO&:UG;03I9aUYIXYbrMAdk\,1QJ7Q*6G%Ou3%?K/7,0a?g\-$lb2fW4J"nCkLQ]oaj"?i9cW/eq%h5dJf_gOk9JsGj=AH\h"B)J")_M@_Z`]lZt?f5P2I?'uXC#os6:K:"@+e%qsP]W1L9u\VJ:G_^!-BBDO^pn[?%db$cTTL'r*n=dS]/?2m2o.jXpFUm];q@Lm7dg96"Sj0^CI2JC(_mKKh=N!`m9,6!taNV<)Zc%fZfW!L_STbE/'`FGD7i<]mJ5$iDn_.#!V%C6,najjg24sl(H_qjTqHQ@BR5__Do.$QmLHN2"q[.*a)*Bf(^9Y$,l*Kmtc.DO*%Me%7Bm'JP4n9mhFm`.NPBT,e?UEE,K$$C5b]HKSen^tF.if8nVo4X>@fes3TdCu)Cu"]b"Q5Q7Qr=E/_j8-KXt=,B/gnkReN_[hSJt7%r3j#L'WX#8)RmVcAgX.T%pP9\*-Tf@pqC?2-AE/;_0m)>Cp>:!)agJk"1,BYma<5erB8.ScFu1shaa+$.6ED8b2"5s<2e*7#OV9-%HO21$IVgfg*UQ)Y^!-g^/N!c3o`+S]Ed>jL1!Y:P/N=uW<E2c]'@@JV"Ch_flt1$f5RrN^15'7'[S,b%Tkf6?J7m_KGA';@\$8)E%!m"n\HHZFhpmX'nh^(@R/7S+3V-=pTdfk3dJE2/pI"u??@mW1raeUg50YQ@T-5.U$qI#e,J2mEICh"_F/ds^t?9c0p29Yu\$$mW#%C"Sk$hk?W"1..2;8CqKRGHi?+m,57MBZg68*"bI.%]d6Zh+)%Uh$%i@e3(>)`*L@+6M>#7qIXrYdCRZ*0#3d,pK4r&79,p&d=m-k%9.&Q53TU),Ap=1COMLfD*W+JoM=tLATtuHkKE#OY\uk@U[`>2;WPspkl`dBVd1R5ZgWm%"]1^l]D1Da$Ck&gL^<-'ZBM!=V@TVZ-%cWNh0++WmN$[^csLdCa<.HbB.mSqfAnb_,/Ueaj*#81l=[1M;LauT2sBi.>@nea<e)Z#?dD&q^V6-8Kug4UqH2,g,-&0$,*kO@49%J"6!X*RKNtO&Lq6>l;Qf28kfMl1j@T+g#O:Dqd)%i5=]nZH\]*_+]T7BX>XHoe&)`k2EWkq1L@d9HbIi72LMeOmM-]ecG+4n"Bjh%>I=9MBu:iJgOOgi#JSEi]N'/).$)ebV*eqhK/6`:Nplf0jUI7)lW#o@U0=8$!o559A(`Q3W%nQ?q8f-#d7%A^a[B/f^;g,SWg/G8%<%Y,RJ<#lm%XX!,XnOK2Bua/Ao/=5(b<5Sm)E"#XobP*C7d"''f,P16@_ZUW55X'nZ-lJrM\YHu*Cs8@^rH=*HW.;5J$3c\/^rS-%?L#3gY4l,@C].U"FRSgLZO^(UcFP)#P=mpRikp,sQbCr0PCoX?f"eENHnLM`eq":-8]7)F1HY'_j2/F;ZEA8K+[rA?!Sr*E?Y2sG%%Moq?p6U^blh;J>e^Dn]B67i4MEH(Q7uc[?MsC2/p*TA!oaU/^g7,_II;us@/oU!nCKd!M5C*%l6<d"6fbcTcigehJc-Gs9i]#CN%1T,;U;=^^(4p4PNljsOk35[-JFDi'l5kY_J\dR`m:0/9#+a%A(+K)A+L?M"Ef]'(!Cft+T5*iN.<TS="Q>.Alp@<Ate>gEfme35c%SbQ6l#@`7gerA*IqtE5fo<ZJcIb&PA\,$#4CMm)sp1q25>H@?fgRH$:X?P.H\kDD]E!nt>%5*VUI--`am2k@BeWL+"0XdlK?h.ls%k3nBb\D6aJ1i6Wqf?LV6]/7D<l@Lt^SQJQ\g.#uk>m)TTZP?,ofH?Yh.bec100Y6[4bHP_mV@G-V\[R1heL'`9,u%+6jO4<8+$$!%W#AtoOR9.2LV9V97_lpB>\Mg9kJGLTDIDZ*!4e8h.EARe)@f/*W+4&V/>_$u!TBBfj+pA_h\T/p;+BD9Op5B6)70Rn&=]X\k,5*E%Do+f8O=U(oXe@UsM:P\Y\\65QW`rQ;?N0hboht%(^Lst)EIX$<kF?s92)ETcU=J-8V08Z<>DH>hpm^tXo'c6gl)!tEp2]X#ESb=?%=T\il@akM`pZ(G4bEqA(Y)71*19s+8,SI6-U4748TIZ/?G[<EBh/_Z'3LiDkG+Q:ep=FFGbbgQ_S'?7X^LM;#o1Ve:-\Z=UdX9g=%j+-60W]E8M`1Q!6hCPr@L^Hi",K\i3C_=LEqk-g6%rX(J8d1"K96Qb$+D9LBG?NdVGW-O!m\sBjc)8d[IoeP==k8cHkm!)VlaFQ0%c!9S3)AB`EN(Jcj>be3].BfcU5tpF%_bi>W=S:od^MO<Tn_W`>#d9A'-Eu<k<N`AQMnl^/G_Q8mj>PE1o^iVBqrA-dqGcK/*S%@B%4RWshb-Ef<eoe=+<Li1bIlEo7Zi/6O:pZSgFk$MJT.t,d>2],l1X4cANKK2n:(3r&OPPl,4J-$5pa?hk.^/?T=r'b%HRlj==S$T+%U70.Lc[dj_h#N7*]Q(\V`PAVPHNMliGfPR;Y2GgSs#&tMQZr-9XfL@>V%,[,FmHPOF)>^-CSF/,^SgmHlFuESn\%?8<:@NMJTQ#B%XR:;ci.tG)n+COsA_LAC9AT?`H+sMAh>`'-F^JKVI!df\^LD/&dP\M^Jr,pX]=BL0rcX=,Ak<V4'3u>rUoSEA5,mO91%F7Mh=QY(%fbCk=`t[EXEb>M;K6'#ab;QWD>?n&l^Jsold`PM4n?SB@OKN2H7K*0ZHQ2eTqNe5[I(&bBEa+<hFk>aJrjt@"2bN>(.E_CA=B?Bk%=tJTq`TT1gb\iW6#D&k)KgE]i%me^$\CmbY%N/P#5/X=OFDkUk@/%&l\8*bHW7L@=gdioC&N(MEX_\cmf)=DaZ+j_UfY%2Fo?^48%RJ.OKo@!>gf4i:<k50M<FnW"]D&?iAQB"j5Dk-RS5"uL\8SYD$*u19INBGOJ?WSbL1OZ=)Z$"2%Z^XuYD%r)o:KapW@&kZtZWSfY%))YO>CpA[6`r;4)qNKVR&D\64K!')Td^<kG21>"*9i$b""]X>k8VOck5ss1Wn9IM/+WISP(c.Vbdl.5&gpQR%']67bJsLlmLE&A<%V4u!49Ss4#k<EJS#A-F8^8?/`:,X=dmlbO^[dMsE=d)9TB&OaoF](O*e)QXS99\m5m]sB!=[PPT*4sg46_++[5C4@#4aRihAS42Z%mIhs!en(R^?kb(.c<![Mn4h9k9NTSk);cN).7`9*qkMGu:,c#YXpi>"`L@F^_)U$@hU(LR?D\l&-82j?HhQ/RElf58,\qmr7bGbN%A0'$f:u1m(S_L69>,p^>Yu1'W])))e[R.VU=t78<[:b`Hg-!Lu]lKn:G",F_P,Yqm[Nh!.JZS#@)+KaCAbEYl?5ICQhrF!(o;LYX%C#jPCdGftbLr94hH1*KD%NTc0WTT*%AD:Ec:4F3+N8fPfP.M0rX"qbRV`3AOdd<C?(2S?#&M_7@[Cmd'Jn-9@1GH&_^6BNY?`KPT%GWsT&p9j$#66/)PYIMca_o1;\`'*I+PEgQ6/Lkc(rfpq^Pn*%JQ",FsBU$&ENmO`BY;%MUfG-6-8Ila2DUNLa+U"s817`mVkEs1n%P@lup9YI4HUMgY@b_+u3d*Fh&?jZc_O:i4Ka6IP?d5\sO)VXK3E71_!$5>"K*Jt:%K,7[gLN;Fka,KWM_'1,kn"/O%LGmn'cq*J3%,/:OX^I:#fk.;JcH#nE-?/Cs0f*+E65_mh2C^EAD)a22hEZWbIMi(T(o(?aWid1uFqW'aYpU`7i[ab7ML?qXKA&EasE89jYHd;Z`%3@tuW?17?In(^oYf5k=q-aV]??N0@U^8%h1g>_-Qb2dn%p2UDdeLn);J'S<l[$-!CDbVn8hWA/8]jK(^DWefi]-t2U6ck"CfnQ@u%6r0[X3^%!G!?0[Jmt'E]Ku;Cb?$ue_mDn)u;_c#<:"Ujo9^4&"c5s&G4.WM,hN[u1Ai".NcXcRTrR[opNO:N9()soQ4-6UgJOLOQ%S+_$rn+Eg9pA)C;ae`JY?'eigpY`FcMdoaW)[<IOc+[K!0hBI,(gN8lMfU-O&ls;3f"YZ<GDlW&>65Ze9#&FA7XpD38F`6GMi,rA%(+I"bGdQj`HbIF$6tbDpe_d3-WV8?2kF_;c`*St]K&l[SG"C+3Yc)i[-X(.FDn@DhZuD6fHJs0W`>%/.@Zto:H]PYWPYk+YX8D`+%g=kcW2Y8lQpqUAdXf@RL(DUdA;KTh.kfh*#arE0`k\HrsJX2s\Ll5lVipFfiZNf"Q`BI@F.pjPA.@n0g'iRgWE_r!8Jbj1F>GQ]!%oNZQ"amS`U1&dc+F3eqqNRfbcZ-A^i]srZ.5GCW%\?7`:p4_M;)F!20(Ib[5<D>&gE^j\c6fIV4f^P9C_4nZ2.UJHV*3EgEf14Gq%3\4$@m%1m"gRl._HUWQ9\-Jar=F?a7#.j'="/p`,4$mkih^X13Oh*R7=&2FQl9Bg_rX-`2%(5McC;G0W<`E\'@uIm19BXE4RdN@k%j"t%JZNr/\[c:4/C8';nj+mmLTPsON-9oMe1^F<<BL;J[HPhQZ1E`a;2<YHlOVUJM<R'L6A&V1M/=uCO-,M[j:q2HK7uiaEL(u;V%m+LE5IURbfV>nSHAmNN^*7;@_khY]rNOequp#%nn;k[;iI;r,[Ps(X-[q[cnWR2kp5Bb]GiB/S2_80qp,O`GSoV_%lDd[*g5j\BF%PbBG8pW*q^';$:>:\a@^aU]laZhh*?F&C@?Q9tJk">Y_`pq(pC6LjtJLjPLlenD,Hj01o)?mDA_<r\a;pRaSke.6,)F!'VAMH?:\%-"d.\i14PIGqWXu'.2]kh_`p.><'68c.B*10rA1l=Q*ZXF$H,TW8d<KG)u$ul``ge9A..AqW+BUXVM\&hrc_05WkX79`%c>"jNqH%,(*O!4^^XdJnj(BpNKE\jiKe+@('0g,<F2\%lS3Bngtjk[c=DURVs94_lCH*H8*4_(6a_?T(0*J0s[3eKY1;(Cf:#q9b)Pr$Wlb+%&eXNYX9tiVnKc,r`WEE$pL+$+4fbXEXgodqJ0c4ZD83.IjKLQPqncdIEei3DY1X?!fWKY+\>IfAar0&Bo"j3_]@0LPH^50$m&kc!%co:42C]2jS>rKiSLRf+lV%0<%>@>p/(Z,mCA7+WUZ0nsBmYMS&2sN8mlZCri((-!/6!A).Be7ZmF$nUaNg\D550&gg4df<SRHb_S%RsCkmUoSEAk">$t<;+rjqq_l=eU+8"'sRFA`r[2;lPAIE6I^INV.o/MjMmq^HUY7s7%&!rq:(\`J+#79`,"g[M"Z\/FKHBkM73-K%>%a@Jf&cS]],lj>pt8!?CNR@NP8OQM35#O6=5TM$B%KY*WIjE,e%*d$0W5oL(.`MWp'`1(lJ=oLV#+>:AZI>FV+^*rD/!(_g,7LJ%YZ8t.>hnEgX6ab.9mlEEk:%sp9U[>P06@&OH5R?<O#KK(`-8dnN7(*u7u=kW3:F8'WlACnWigd=cTL.A(+$$#1u$Hf`CANmDl=S1%\!ja^+m4!U='A<]%1UHIafTI'JqCOP+%]JeJj'c^+2qW*=:CUM/)QA/D;&Dm?e[X3"pOT%D=q#GW6h=PMk4(LR4QTPdrV',fBIf[%^4=4/rEFA.G5iT/bNU?A+IZNN$JYOG`r>2f]a>j+NA9D6B$B6t(.F-6eO\ifVit41T+-Cql_D=!J=gdb0>?uYVqgijgB!(jhE3.Z%rdHm][_.oGNUqW-\$NM$qY@ujLR:.CKqVdoLEDS=[+aY41ZQR<&XqEa7fqEgcQa364jlO>Q6*)<3f*s@7r4DqVg?a]UHN'Jmoita%iUP_K2T\[>Y.>\n52lRhFhH?;0-;PYQC=D*DF^Yc8->1rrA8_9//rh!Gap;1XW,`fB?f0CpW*AAb/eZ/#d[YM7#c(D!h9fWZqp8(%R?9^kM9)tH:hH#U:jKc1ZPo'*4u"9&1J_fK;8)UJ01aeVYF]5qMBH$m<5(2;Xp>MBAGhc_0ndlT#X(Hh3@u9rbkUNS*@tP"2QlO`%cO<<XAZ!pm`9rJEOX6b\!"["SWeHS>+N;>)?,LG(L/d+6_p!'83"JQPR)Yr\;8a<U.jbJ3N75a&fY0#T(<$/1@'HrA+;5XnB6,l0%o>5[C?jbSK_fi8*N0#k5`k\l79=$H5T:J@lPfD'4eR]nYS`CUib\"OH4pqZ(Tpa,N4cRC;SIQ-Gh"6#^$WWn"nq:ia)Di35]SYh,%O#Sj6B=Uf[ZrT:MZ>UORlcg[N"@FBbAXch542m[,kA.2gIX7ks"@mQ-1AR<G=uZ\X*Kf3-?.i2#ZM+VW403ZK2K?$;U5+XN]A\0W%WbGTq0bsm&^qmsoLN>lE$2F.T+G;ORo;0YL0=,]9j,il?D&R(i(XB_:A0mGZTs^"qf]21Al"gbkmZ6O>V+_5T3P*?AC7M'!$V:kg%k^$d_o!958bo2JAVjbc,QVT0ZbH%4_.cSl'ru@.EC+=Zto$CF]Zkrpg`(%I`j6Tttc4"D,.4IH=^lt2,a&hc(<cp09RoU?:Z;ai5%2,#70$iAa<lW0jin/uq$-[#<E0ENgI;Vt,E"i@p?(1Kh[MKpmbF6]k$%<cVL\+=WH'cub>$r4gm63nqNa:ff:K>Ni'$\Dq.An4?S%h:RP")C.ZVCiu1I]asMTc+VcbVbjW&L%;jXq?[uYX6qqgLKY-#`j(ZjY8_+qnITN.5dVH8bba#r37Vq6A+Q)"Bq4R%A[9fJ[4]_.%GoeQBE`jb?S.%E?(=pHALoA3N+sjSbX^N3MeQ%@4Ht1,gG\VXmE00SIMn7hs#AXt],iSI6Dj31r'2+D0ZcKbeZ7P2HJ`PK%hrWe4%JPt\4%,S:kg5GM.9X>'a[+M--&f+LAMnKVF\1DC)eAHN>n6<q&?":-L$^&nVY'pSZ:-@K*.OIhhR45@/gBU5a='7pO['>5dcXN+<%W8GC"\)E.#&a*KFH>K^Ub#`"oD0hp7"Ab6l'$/f%53V_M%18qQdZYZUS5$L&iE%QbP#:6j,8_H.2:8WJc]t@mSPQQTe2jRs]F8%]%.q8FS=e/tVAX1G(n3fPHjS;fYMFDfF6odLO,Qq%V`FmRE'A)K2HXTB+C7[797Q>qZ&bPQJElsCUe2E^/"fF'>*5h2!kuc_r%B,eT%4T8n,el*D[?cYKp"\dY?Jhp's#AYmd.n8W49R=[,D.0H[AA"+oUM;<OXY(]GYKHp:J8q!.4_n>JMj.l5Eb$U<po7cbA(&7.Q99W%%EnX6Dn89aL2E*8:'.c4Ddi+%tTrY$fH)`Z9.]\]7Wg84NG_RrSaQD(sqb\+b@9*kT@1*I0i\tgu+kS`"U-^iWWfMOZF_->&PllP^%0am+HcMSM>:`;_r9HssrWkHk8:a*(t!bbEXAK#[adb3#Ig-VG9"u^#/=eugM;I2@C\'acV%:#qfKGRq$OD@`2qoGJFN3d,e.Ombm%8dOnH#EXKC_@EH'/H+A>YuVg_bRq\G<Z(_1V_Jihdt09ui)D[GAO5?h2q&LeRe*a[3ncLRp3N10)WJ"OE+[!g0WXPt-538N,!6#K%DLn^_#e/.2e927oDudpn3jI3&]FHaM'@$]N'XN[,?+*0+2T2SG;.Aj8<Egn=`5.BK8/Id0Zo9NqH>Y;al`5gp1+F+t4;`ucfVBgi%>EKqWZ4+u7OF*C9;.UG!jto^lfW%4]_dNj:UuAmFG,CGXNd^QF2r&]@S%n`NYJ'qjX-^$)qT2OGo\+Lq]MG25ATmZkcc$]Mo_$gB%rPZ`0T)I#k5'VAKl2)RujQeJXf(WEsU"h&[ki.Lbo(#HJ/tW%"Mqc4/pV6*ZYJ#DTThg.6'ArA[Mm*0A\*71[k2,U1%t4$Af0=Of%Dk'6;Gf(Ibo'491olYVT%$<K]n#KcD`GU%;r9qpSna(TT55+=2I+=#?4S-B*gGaW$-be]C?M_s6?i-QN](=-%^[@qZ^\mc.^%CU'%QX@ArnP?jjm4VhZoSHA:L+e%Gr8lquYJ'k5f0B)bb86fIek^`"&:)34J**0&ptFp"r;V\FX+^~>%AI9_PrivateDataEnd