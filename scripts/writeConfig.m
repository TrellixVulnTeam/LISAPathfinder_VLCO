function writeConfig(filename,comment,delimiter)
% DESCRIPTION: Writes a configuration file to text for the MCMC
% micrometeorite code.
%
% USAGE: writeConfig(filename)
%        writeConfig(filename,comment)
%        writeConfig(filename,comment,delimter)
%
% Ira Thorpe
% 2016.03.02

% parse inputs
if nargin < 2
  delimiter = ' ';
  comment = '//';
end
if nargin < 1
  filename = 'LPF.h';
end

% gather data

groupNames = {...
  'Spacecraft Geometry',...
  'Housing 1 Geometry',...
  'Housing 2 Geometry',...
  'Spacecraft Mass Properties',...
  'Cold gas thruster positions',...
  'Cold gas thruster directions',...
  'CMNT thruster positions',...
  'CMNT thruster directions',...
  'Typical Noise levels'};

% Spacecraft Geometry
geoParams = getGeometry();
groupParams{1} = [...
  geoParams,...
  LPFParam.EOM_RB_X,...
  LPFParam.EOM_RB_Y,...
  LPFParam.EOM_RB_Z];

% Housing 1 Geometry
groupParams{2} = [...
  LPFParam.EOM_H1SC_X,...
  LPFParam.EOM_H1SC_Y,...
  LPFParam.EOM_H1SC_Z];

% Housing 2 Geometry
groupParams{3} = [...
  LPFParam.EOM_H2SC_X,...
  LPFParam.EOM_H2SC_Y,...
  LPFParam.EOM_H2SC_Z];

[IB,IH1,IH2] = getInertias();

% Spacecraft Mass Properties
groupParams{4} = [...
  LPFParam.EOM_SC_M,...
  IB,...
  IH1,...
  IH2];

% Cold Gas Positions (these are for the A-side, I think)
groupParams{5} = [...
  LPFParam.COLDGAS_01_RX,...
  LPFParam.COLDGAS_01_RY,...
  LPFParam.COLDGAS_01_RZ,...
  LPFParam.COLDGAS_02_RX,...
  LPFParam.COLDGAS_02_RY,...
  LPFParam.COLDGAS_02_RZ,...
  LPFParam.COLDGAS_03_RX,...
  LPFParam.COLDGAS_03_RY,...
  LPFParam.COLDGAS_03_RZ,...
  LPFParam.COLDGAS_04_RX,...
  LPFParam.COLDGAS_04_RY,...
  LPFParam.COLDGAS_04_RZ,...
  LPFParam.COLDGAS_05_RX,...
  LPFParam.COLDGAS_05_RY,...
  LPFParam.COLDGAS_05_RZ,...
  LPFParam.COLDGAS_06_RX,...
  LPFParam.COLDGAS_06_RY,...
  LPFParam.COLDGAS_06_RZ...
  ];


% Cold Gas directions (these are for the A-side, I think)
groupParams{6} = [...
  LPFParam.COLDGAS_01_ELV,...
  LPFParam.COLDGAS_01_AZM,...
  LPFParam.COLDGAS_02_ELV,...
  LPFParam.COLDGAS_02_AZM,...
  LPFParam.COLDGAS_03_ELV,...
  LPFParam.COLDGAS_03_AZM,...
  LPFParam.COLDGAS_04_ELV,...
  LPFParam.COLDGAS_04_AZM,...
  LPFParam.COLDGAS_05_ELV,...
  LPFParam.COLDGAS_05_AZM,...
  LPFParam.COLDGAS_06_ELV,...
  LPFParam.COLDGAS_06_AZM...
  ];

% CMNT Positions
groupParams{7} = [...
  LPFParam.CMNT_01_RX,...
  LPFParam.CMNT_01_RY,...
  LPFParam.CMNT_01_RZ,...
  LPFParam.CMNT_02_RX,...
  LPFParam.CMNT_02_RY,...
  LPFParam.CMNT_02_RZ,...
  LPFParam.CMNT_03_RX,...
  LPFParam.CMNT_03_RY,...
  LPFParam.CMNT_03_RZ,...
  LPFParam.CMNT_04_RX,...
  LPFParam.CMNT_04_RY,...
  LPFParam.CMNT_04_RZ,...
  LPFParam.CMNT_05_RX,...
  LPFParam.CMNT_05_RY,...
  LPFParam.CMNT_05_RZ,...
  LPFParam.CMNT_06_RX,...
  LPFParam.CMNT_06_RY,...
  LPFParam.CMNT_06_RZ,...
  LPFParam.CMNT_07_RX,...
  LPFParam.CMNT_07_RY,...
  LPFParam.CMNT_07_RZ,...
  LPFParam.CMNT_08_RX,...
  LPFParam.CMNT_08_RY,...
  LPFParam.CMNT_08_RZ...
  ];

% CMNT Directions
groupParams{8} = [...
  LPFParam.CMNT_01_ELV,...
  LPFParam.CMNT_01_AZM,...
  LPFParam.CMNT_02_ELV,...
  LPFParam.CMNT_02_AZM,...
  LPFParam.CMNT_03_ELV,...
  LPFParam.CMNT_03_AZM,...
  LPFParam.CMNT_04_ELV,...
  LPFParam.CMNT_04_AZM,...
  LPFParam.CMNT_05_ELV,...
  LPFParam.CMNT_05_AZM,...
  LPFParam.CMNT_06_ELV,...
  LPFParam.CMNT_06_AZM,...
  LPFParam.CMNT_07_ELV,...
  LPFParam.CMNT_07_AZM,...
  LPFParam.CMNT_08_ELV,...
  LPFParam.CMNT_08_AZM...
  ];

% Typical noise levels
groupParams{9} = getNoiseParameters();

% open file & write header
fid = fopen(filename,'w');
fprintf(fid,['%s Configuration file for MCMC LPF Micrometeorite code\n'....
  '%s Written by %s.m at %s\n'], comment,comment,mfilename(),datestr(now,'yyyy-mm-dd HH:MM:SS'));


% write
for ii = 1:numel(groupNames)
  % write group header
  fprintf(fid,'\n%s %s',comment,groupNames{ii});
  % write group contents
  for jj = 1:numel(groupParams{ii})
    p = groupParams{ii}(jj);
    fprintf(fid,'\n#define %s%s%8.6e %s %s %s',p.name,delimiter,p.double,comment,p.description,char(p.units));
  end
  fprintf(fid,'\n');
end

% close
fclose(fid);


end

function geomParams = getGeometry()
% load geometry file
data = load('corners.mat');

% height
geomParams(1) = LPFParam(...
  'SC_H',data.h,'m','Height of spacecraft');

% corners
kk = 1;
for ii = 1:8
  kk = kk+1;
  geomParams(kk) = LPFParam(...
    sprintf('SC_BOT_CORNER_%i_X',ii),data.pt(ii,1),'m',...
    sprintf('x coordinate of spacecraft bottom deck corner %i',ii));
  kk = kk+1;
  geomParams(kk) = LPFParam(...
    sprintf('SC_BOT_CORNER_%i_Y',ii),data.pt(ii,2),'m',...
    sprintf('y coordinate of spacecraft bottom deck corner %i',ii));
end

end

function [IBparams, IH1params, IH2params] = getInertias()
% function to get the moments of inertia in the body and housing frames

M = double(LPFParam.EOM_SC_M);

IM = reshape(double([...
  [LPFParam.EOM_SC_IXX; LPFParam.EOM_SC_IXY; LPFParam.EOM_SC_IXZ]...
  [LPFParam.EOM_SC_IYX; LPFParam.EOM_SC_IYY; LPFParam.EOM_SC_IYZ]...
  [LPFParam.EOM_SC_IZX; LPFParam.EOM_SC_IZY; LPFParam.EOM_SC_IZZ]...
  ]'),3,3);

RBM = double([LPFParam.EOM_RB_X,LPFParam.EOM_RB_Y,LPFParam.EOM_RB_Z]);

RH1M = double([LPFParam.EOM_H1SC_X,LPFParam.EOM_H1SC_Y,LPFParam.EOM_H1SC_Z]);
RH2M = double([LPFParam.EOM_H2SC_X,LPFParam.EOM_H2SC_Y,LPFParam.EOM_H2SC_Z]);

% parallel axis theorem to body frame
IB = IM - M*(RBM*RBM'*eye(3)-RBM'*RBM);

% parallel axis theorem to housing frames
RH1B = RH1M-RBM;
RH2B = RH2M-RBM;

IH1 = IB + M*(RH1B*RH1B'*eye(3)-RH1B'*RH1B);
IH2 = IB + M*(RH2B*RH2B'*eye(3)-RH2B'*RH2B);

% build LPFParam arrays
coordNames = {'X','Y','Z'};
kk = 0;
for ii = 1:3
  for jj = 1:3
    kk = kk+1;
    % B
    IBparams(kk) = LPFParam(...
      sprintf('EOM_SC_IB_%s%s',coordNames{ii},coordNames{jj}),... %name
      IB(ii,jj), ...% value
      unit('kg*m^2'), ...% units
      sprintf('%s%s component of spacecraft moment of inertia tensor about B',...
      coordNames{ii},coordNames{jj}));
    % H1
    IH1params(kk) = LPFParam(...
      sprintf('EOM_SC_IH1_%s%s',coordNames{ii},coordNames{jj}),... %name
      IH1(ii,jj), ...% value
      unit('kg*m^2'), ...% units
      sprintf('%s%s component of spacecraft moment of inertia tensor about H1',...
      coordNames{ii},coordNames{jj}));
    %H2
    IH2params(kk) = LPFParam(...
      sprintf('EOM_SC_IH2_%s%s',coordNames{ii},coordNames{jj}),... %name
      IH2(ii,jj), ...% value
      unit('kg*m^2'), ...% units
      sprintf('%s%s component of spacecraft moment of inertia tensor about H2',...
      coordNames{ii},coordNames{jj}));
  end
end


end

function noiseParams = getNoiseParameters()
% Makes LPFParam objects corresponding to thruster and sensor noise levels

% Cold Gas Thruster noise
noiseParams(1) = LPFParam(...
  'NOISE_COLD_GAS',...
  1e-7,...
  unit('kg*m*s^(-2)*Hz^(-1/2)'),...
  'Amplitude spectral density of force noise for a typical single Cold Gas Thruster');

% CMNT Thruster noise
noiseParams(2) = LPFParam(...
  'NOISE_CMNT',...
  1e-7,...
  unit('kg*m*s^(-2)*Hz^(-1/2)'),...
  'Amplitude spectral density of force noise for a typical single CMNT Thruster');

% GRS Noise in linear DOFs
noiseParams(3) = LPFParam(...
  'NOISE_GRS_POS',...
  3.5e-9,...
  unit('m*Hz^(-1/2)'),...
  'Amplitude spectral density of displacement noise for GRS capacitive sensing in linear DoFs');

% GRS Noise in angular DOFs
noiseParams(4) = LPFParam(...
  'NOISE_GRS_ANG',...
  2.5e-7,...
  unit('rad*Hz^(-1/2)'),...
  'Amplitude spectral density of displacement noise for GRS capacitive sensing in angular DoFs');

% GRS Noise in linear DOFs
noiseParams(5) = LPFParam(...
  'NOISE_OMS_POS',...
  1.0e-12,...
  unit('m*Hz^(-1/2)'),...
  'Amplitude spectral density of displacement noise for OMS optical sensing in linear DoFs');

% GRS Noise in angular DOFs
noiseParams(6) = LPFParam(...
  'NOISE_OMS_ANG',...
  1.0e-8,...
  unit('rad*Hz^(-1/2)'),...
  'Amplitude spectral density of displacement noise for OMS optical sensing in angular DoFs');


end